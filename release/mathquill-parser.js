var G,Grammar,OM,OMNode,exports,ref,ref1,symbols,slice=[].slice;void 0!==exports&&null!==exports||(exports=null!=(ref="undefined"!=typeof module&&null!==module?module.exports:void 0)?ref:window),"undefined"!=typeof require&&null!==require?(ref1=require("openmath-js"),OM=ref1.OM,OMNode=ref1.OMNode,Grammar=require("earley-parser").Grammar):(Grammar=window.Grammar,OM=window.OM,OMNode=window.OMNode),window.mathQuillToMeaning=exports.mathQuillToMeaning=function(e){var a,t,o,n,r,i,l,u,s,d,c,f,m,b;if(3===e.nodeType)return""===e.textContent.trim()?[]:e.textContent;for(b=[],t=0,r=(d=e.childNodes).length;t<r;t++)a=d[t],$(a).hasClass("selectable")||$(a).hasClass("cursor")||/width:0/.test("function"==typeof a.getAttribute?a.getAttribute("style"):void 0)||(b=b.concat(mathQuillToMeaning(a)));for("SUP"!==(c=e.tagName)&&"SUB"!==c||(s=e.tagName.toLowerCase(),$(e).hasClass("nthroot")&&(s="nthroot"),b.length>1&&(b.unshift("("),b.push(")")),b.unshift(s)),o=0,i=(f=["fraction","overline","overarc"]).length;o<i;o++)u=f[o],$(e).hasClass(u)&&(b.length>1&&(b.unshift("("),b.push(")")),b.unshift(u));for(n=0,l=(m=["numerator","denominator"]).length;n<l;n++)u=m[n],$(e).hasClass(u)&&b.length>1&&(b.unshift("("),b.push(")"));return 1===b.length?b[0]:b},exports.mathQuillParser=G=new Grammar("expression"),G.addRule("digit",/[0-9]/),G.addRule("nonnegint","digit"),G.addRule("nonnegint",["digit","nonnegint"]),G.addRule("integer","nonnegint"),G.addRule("integer",[/\u2212|-/,"nonnegint"]),G.addRule("float",["integer",/\./,"nonnegint"]),G.addRule("float",["integer",/\./]),G.addRule("infinity",[/\u221e/]),G.addRule("variable",/[a-zA-Z\u0374-\u03FF]/),G.addRule("atomic","integer"),G.addRule("atomic","float"),G.addRule("atomic","variable"),G.addRule("atomic","infinity"),G.addRule("factor","atomic"),G.addRule("factor",["atomic",/sup/,"atomic"]),G.addRule("factor",["factor",/[%]/]),G.addRule("factor",[/\$/,"factor"]),G.addRule("factor",["factor",/sup/,/\u2218/]),G.addRule("prodquo","factor"),G.addRule("prodquo",["prodquo",/[\u00f7\u00d7\u00b7]/,"factor"]),G.addRule("prodquo",[/\u2212|-/,"prodquo"]),G.addRule("sumdiff","prodquo"),G.addRule("sumdiff",["sumdiff",/[+\u00b1\u2212-]/,"prodquo"]),G.addRule("ln",[/ln/,"atomic"]),G.addRule("log",[/log/,"atomic"]),G.addRule("log",[/log/,/sub/,"atomic","atomic"]),G.addRule("prodquo","ln"),G.addRule("prodquo","log"),G.addRule("factorial",["atomic",/!/]),G.addRule("factor","factorial"),G.addRule("setdiff","variable"),G.addRule("setdiff",["setdiff",/[\u223c]/,"variable"]),G.addRule("subscripted",["atomic",/sub/,"atomic"]),G.addRule("noun","subscripted"),G.addRule("fraction",[/fraction/,/\(/,"atomic","atomic",/\)/]),G.addRule("atomic","fraction"),G.addRule("root",[/\u221a/,"atomic"]),G.addRule("root",[/nthroot/,"atomic",/√/,"atomic"]),G.addRule("atomic","root"),G.addRule("decoration",[/overline/,"atomic"]),G.addRule("decoration",[/overarc/,"atomic"]),G.addRule("atomic","decoration"),G.addRule("trigfunc",[/sin|cos|tan|cot|sec|csc/]),G.addRule("trigapp",["trigfunc","prodquo"]),G.addRule("trigapp",["trigfunc",/sup/,/\(/,/-|\u2212/,/1/,/\)/,"prodquo"]),G.addRule("atomic","trigapp"),G.addRule("limit",[/lim/,/sub/,/\(/,"variable",/[\u2192]/,"expression",/\)/,"prodquo"]),G.addRule("takesleftcoeff","limit"),G.addRule("sum",[/[\u03a3]/,/sub/,/\(/,"variable",/[=]/,"expression",/\)/,/sup/,"atomic","prodquo"]),G.addRule("sum",[/[\u03a3]/,/sup/,"atomic",/sub/,/\(/,"variable",/[=]/,"expression",/\)/,"prodquo"]),G.addRule("takesleftcoeff","sum"),G.addRule("differential",[/d/,"atomic"]),G.addRule("difffrac",[/fraction/,/\(/,/d/,/\(/,/d/,"variable",/\)/,/\)/]),G.addRule("indefint",[/[\u222b]/,"prodquo"]),G.addRule("defint",[/[\u222b]/,/sub/,"atomic",/sup/,"atomic","prodquo"]),G.addRule("defint",[/[\u222b]/,/sup/,"atomic",/sub/,"atomic","prodquo"]),G.addRule("factor","differential"),G.addRule("factor","difffrac"),G.addRule("takesleftcoeff","indefint"),G.addRule("takesleftcoeff","defint"),G.addRule("sumdiff","takesleftcoeff"),G.addRule("sumdiff",["factor",/[\u00f7\u00d7\u00b7]/,"takesleftcoeff"]),G.addRule("sumdiff",["prodquo",/[+\u00b1\u2212-]/,"takesleftcoeff"]),G.addRule("noun","sumdiff"),G.addRule("noun","setdiff"),G.addRule("atomicsentence",["noun",/[=\u2260\u2248\u2243\u2264\u2265<>]/,"noun"]),G.addRule("atomicsentence",[/[\u00ac]/,"atomicsentence"]),G.addRule("sentence","atomicsentence"),G.addRule("sentence",[/[\u2234]/,"sentence"]),G.addRule("atomic",[/\(/,"noun",/\)/]),G.addRule("atomicsentence",[/\(/,"sentence",/\)/]),G.addRule("interval",[/[\(\[]/,"noun",/,/,"noun",/[\)\]]/]),G.addRule("atomic","interval"),G.addRule("absval",[/\|/,"noun",/\|/]),G.addRule("atomic","absval"),G.addRule("expression","noun"),G.addRule("expression","sentence"),symbols={"+":OM.symbol("plus","arith1"),"-":OM.symbol("minus","arith1"),"−":OM.symbol("minus","arith1"),"±":OM.symbol("plusminus","multiops"),"×":OM.symbol("times","arith1"),"·":OM.symbol("times","arith1"),"÷":OM.symbol("divide","arith1"),"^":OM.symbol("power","arith1"),"∞":OM.symbol("infinity","nums1"),"√":OM.symbol("root","arith1"),"∼":OM.symbol("set1","setdiff"),"=":OM.symbol("eq","relation1"),"<":OM.symbol("lt","relation1"),">":OM.symbol("gt","relation1"),"≠":OM.symbol("neq","relation1"),"≈":OM.symbol("approx","relation1"),"≤":OM.symbol("le","relation1"),"≥":OM.symbol("ge","relation1"),"≃":OM.symbol("modulo_relation","integer2"),"¬":OM.symbol("not","logic1"),"∘":OM.symbol("degrees","units"),$:OM.symbol("dollars","units"),"%":OM.symbol("percent","units"),"∫":OM.symbol("int","calculus1"),"def∫":OM.symbol("defint","calculus1"),ln:OM.symbol("ln","transc1"),log:OM.symbol("log","transc1"),"unary-":OM.symbol("unary_minus","arith1"),overarc:OM.symbol("overarc","decoration"),overline:OM.symbol("overline","decoration"),d:OM.symbol("d","diff")},G.setOption("expressionBuilder",function(e){var a,t,o,n,r,i,l,u,s;return o=function(){var a,t,o,n,r;return o=1<=arguments.length?slice.call(arguments,0):[],o=function(){var t,n,r;for(r=[],t=0,n=o.length;t<n;t++)"number"==typeof(a=o[t])&&(a=e[a]),symbols.hasOwnProperty(a)&&(a=symbols[a]),"string"==typeof a&&(a=OM.decode(a)),r.push(a);return r}(),r=OM.application.apply(OM,o),G.expressionBuilderDebug&&(n=function(){var e,a,n;for(n=[],e=0,a=o.length;e<a;e++)(t=o[e])instanceof OMNode?n.push(t.encode()):n.push(""+t);return n}(),console.log.apply(console,["build"].concat(slice.call(n),["--\x3e"],[r]))),r},null==(i=function(){var i,d;switch(e[0]){case"digit":case"nonnegint":return e.slice(1).join("");case"integer":return OM.integer(parseInt(e.slice(1).join("")));case"float":return OM.float(parseFloat(""+e[1].value+e.slice(2).join("")));case"variable":return OM.variable(e[1]);case"infinity":return symbols[e[1]];case"sumdiff":case"prodquo":switch(e.length){case 4:return o(2,1,3);case 3:return o("unary-",2)}break;case"factor":switch(e.length){case 4:return"∘"===e[3]?o("×",1,symbols["∘"]):o("^",1,3);case 3:return"%"===e[2]?o("×",1,symbols["%"]):o("×",2,symbols.$)}break;case"fraction":return o("÷",3,4);case"root":switch(e.length){case 3:return o("√",2,OM.integer(2));case 5:return o("√",4,2)}break;case"ln":return o("ln",2);case"log":switch(e.length){case 3:return o("log",OM.integer(10),2);case 5:return o("log",3,4)}break;case"atomic":if(4===e.length&&"("===e[1]&&")"===e[3])return e[2];break;case"atomicsentence":switch(e.length){case 4:return o(2,1,3);case 3:return o(1,2)}break;case"decoration":return o(1,2);case"sentence":if("∴"===e[1])return e[2];break;case"interval":return r="("===e[1]?"o":"c",l=")"===e[5]?"o":"c",o(OM.symbol("interval_"+r+l,"interval1"),2,4);case"absval":return o(OM.symbol("abs","arith1"),2);case"trigapp":switch(e.length){case 3:return o(OM.symbol(e[1],"transc1"),2);case 8:return o(OM.symbol("arc"+e[1],"transc1"),7)}break;case"subscripted":return o(1,3);case"factorial":return o(OM.symbol("factorial","integer1"),1);case"limit":return o(OM.symbol("limit","limit1"),6,OM.symbol("both_sides","limit1"),OM.binding(OM.symbol("lambda","fns1"),e[4],e[8]));case"sum":return i="sup"===e[2]?[6,8,3]:[4,6,9],s=i[0],n=i[1],u=i[2],o(OM.symbol("sum","arith1"),OM.application(OM.symbol("interval","interval1"),e[n],e[u]),OM.binding(OM.symbol("lambda","fns1"),e[s],e[10]));case"differential":return o("d",2);case"difffrac":return o("÷","d",o("d",6));case"indefint":return o("∫",2);case"defint":return d="sup"===e[2]?[5,3]:[3,5],a=d[0],t=d[1],o("def∫",a,t,6)}}())&&(i=e[1]),G.expressionBuilderDebug&&console.log(e instanceof OMNode?e.encode():""+e,"---\x3e",i instanceof OMNode?i.encode():i),i}),G.setOption("comparator",function(e,a){return null!=e&&"function"==typeof e.equals?e.equals(a):void 0});
//# sourceMappingURL=mathquill-parser.js.map

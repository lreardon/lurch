{"version":3,"sources":["worker.litcoffee"],"names":["buildFunction","hasProp","hasOwnProperty","funcStr","argList","body","substring","indexOf","lastIndexOf","Function","self","window","addEventListener","event","func","name","ref","data","action","setFunction","postMessage","apply","runOn","install","importScripts"],"mappings":"AAcI,IAAAA,cAAAC,WAAAC,eAAAF,cAAgB,SAAEG,GAMd,IAAAC,EAAAC,SAAAD,EAAUD,EAAQG,UAAUH,EAAQI,QAAS,KAAQ,EAC1BJ,EAAQI,QAAS,MAC5CF,EAAOF,EAAQG,UAAUH,EAAQI,QAAS,KAAQ,EACzBJ,EAAQK,YAAa,MAK9C,IAAIC,SAASL,EAASC,IAK1BK,KAAKC,OAASD,KAKdA,KAAKE,iBAAiB,UAAW,SAAEC,GAO/B,IAAAC,EAAAC,EAAAC,EAyBA,GAzBGH,EAAMI,KAAKf,eAAe,iBACzBQ,KAAKQ,OAASlB,cAAca,EAAMI,KAAKE,cAWxCN,EAAMI,KAAKf,eAAe,UACzBQ,KAAKU,YAAL,mBAAAV,KAAAQ,OAAiBR,KAAKQ,OAAAG,MAAAX,KAAQG,EAAMI,KAAKK,YAAA,GAY1CT,EAAMI,KAAKf,eAAe,WAA7B,CACIc,EAAAH,EAAAI,KAAAM,QAAA,IAAAR,KAAAC,6BACIN,KAAKK,GAAQf,cAAcc,IAYnC,GAAGD,EAAMI,KAAKf,eAAe,iBACzBsB,cAAAH,MAAA,KAAcR,EAAMI,KAAI,UAE9B","file":"worker.js","sourcesContent":["\n# Universal Web Worker\n\nThis file implements a Web Worker that can take any function and compile it\nfor later calling (in a background thread) on arbitrary inputs.  The\ngeneral idea of the code in this file comes from [this blog post](\nhttp://www.scottlogic.com/blog/2011/02/24/web-workers-part-3-creating-a-generic-worker.html).\nThanks, Jonathan!\n\n## Utilities\n\nThe following routine constructs functions from strings more efficiently\nthan `eval` would.\n\n    buildFunction = ( funcStr ) ->\n\nWe find the first \"(...)\" section of the string and lift out of it the\narguments list for the function.  Then we find the largest \"{...}\" section\nof the string and lift out of it the function body.\n\n        argList = funcStr.substring funcStr.indexOf( '(' ) + 1,\n                                   funcStr.indexOf( ')' )\n        body = funcStr.substring funcStr.indexOf( '{' ) + 1,\n                                 funcStr.lastIndexOf( '}' )\n\nWe then call the `Function` constructor on those strings and store the\nresult.\n\n        new Function argList, body\n\nEnsure that this acts like a browser in the simple way that `window` means\nthe global scope.\n\n    self.window = self\n\nNow we create the main event handler through which clients communicate with\nthis worker.\n\n    self.addEventListener 'message', ( event ) ->\n\n## Receiving the function to execute\n\nWhen we receive a message that tells us what function we will be running,\nthat message will contain the function as a string.\n\n        if event.data.hasOwnProperty 'setFunction'\n            self.action = buildFunction event.data.setFunction\n\nThus a caller should send us this message with code such as\n`workerObject.postMessage setFunction : myFunction`.\n\n## Calling the function we've stored\n\nWhen we receive a message that tells us to run our function on a given\nargument list, we call the function stored earlier (if it exists) on that\nargument list.\n\n        if event.data.hasOwnProperty 'runOn'\n            self.postMessage self.action? event.data.runOn...\n\nThus a caller should send us this message with code such as\n`workerObject.postMessage runOn : argumentList`.\n\n## Installing global functions\n\nClients can also install functions globally in this environment by passing\nthe string version of the function to us, together with the name of the\nglobal identifier by which it should be named.  The following case\nimplements that feature.\n\n        if event.data.hasOwnProperty 'install'\n            for own name, func of event.data.install\n                self[name] = buildFunction func\n\nThus a caller should send us this message with code such as\n`workerObject.postMessage install : { f : myFunc, g : otherFunc }`.\n\n## Importing external scripts\n\nClients can also ask this worker to import external scripts.  They do so by\nsending a message of the form `{ import : [ list, of, scripts ] }`, where\neach entry in the list is the string name of a JavaScript file to import.\nWe handle such requests as follows.\n\n        if event.data.hasOwnProperty 'import'\n            importScripts event.data.import...\n\n    , no\n"]}
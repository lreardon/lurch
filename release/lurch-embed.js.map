{"version":3,"sources":["lurch-embed.litcoffee"],"names":["hasProp","hasOwnProperty","window","LurchEmbed","defaultURL","makeLive","element","attributes","applicationURL","key","ref","replacement","url","value","width","height","getAttribute","encodeURIComponent","innerHTML","ownerDocument","createElement","style","border","setAttribute","$","replaceWith","makeAllLive","each","index"],"mappings":"AAaI,IAAAA,WAAAC,eAAAC,OAAOC,cAIPD,OAAOC,WAAWC,WACd,sDAsBJF,OAAOC,WAAWE,SAClB,SAAEC,EAASC,EAAwCC,GAE/C,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,YAFON,GAAaO,MAAQ,IAAKC,OAAS,gBAAKP,EACjDN,OAAOC,WAAWC,YAGhBQ,EAASJ,EAAe,aAFxB,OAAAE,EAAAJ,EAAAU,aAAA,qBAAAN,EAAsD,IAEZ,IADhCO,mBAAmBX,EAAQY,YAErCP,EAAcL,EAAQa,cAAcC,cAAc,WACtCC,MAAMC,OAAS,kBAC3B,IAAAb,KAAAF,6BACII,EAAYY,aAAad,EAAKI,WAChCW,EAAElB,GAAUmB,YAAYd,GAC1BA,EAAYY,aAAa,MAAOX,IAepCY,EAAEtB,OAAOC,WAAWuB,YAAc,kBAC5BF,EAAE,gBAAiBG,KAAK,SAAEC,EAAOtB,UAC/BA,EAAQiB,aAAa,mBAAoBK,GACzC1B,OAAOC,WAAWE,SAASC","file":"lurch-embed.js","sourcesContent":["\n# Embedding Lurch in web pages\n\nThis file makes it easy to embed Lurch document snippets in web pages or\nblogs, and have those snippets each become live Lurch applications, right\nthere in the page.  It contains functions for converting snippets into live\napplications, and also interpreting a shorthand form of Lurch documents,\ndescribed below.\n\n## Global variables\n\nWe use the following namespace.\n\n    window.LurchEmbed = { }\n\nThe default location of the main webLurch application is the following.\n\n    window.LurchEmbed.defaultURL =\n        'http://nathancarter.github.io/weblurch/app/app.html'\n\n## Making snippets live\n\nAn HTML document author (or blog author) can paste into any DIV in the page\nor blog source the exact HTML copied directly from a live Lurch application,\nsurrounded by a DIV (or other block-level element).  Running the following\nfunction on that element converts it into a live Lurch application.\n\nThe second parameter is an optional set of key-value pairs to attach to the\nconstructed `iframe` element.  Most commonly, this should include its width\nand height, which default to 800 and 400.\n\nThe final parameter is the URL to the Lurch application that should be used\nto embed the main application.  It defaults to the location of the app on\nGitHub, but can be replaced by any URL hosting the main application.\n\nWe respect the attribute \"data-embed-index\" so that we can use different\nfilenames in Local Storage for saving each embedded document on a page, to\nprevent collisions/overwriting.  That attribute is set by the function in\nthe [automation section](#automating-the-process), below.\n\n    window.LurchEmbed.makeLive =\n    ( element, attributes = width : 800, height : 600, applicationURL = \\\n      window.LurchEmbed.defaultURL ) ->\n        number = element.getAttribute( 'data-embed-index' ) ? ''\n        encoded = encodeURIComponent element.innerHTML\n        url = \"#{applicationURL}?document#{number}=#{encoded}\"\n        replacement = element.ownerDocument.createElement 'iframe'\n        replacement.style.border = '1px solid black'\n        for own key, value of attributes\n            replacement.setAttribute key, value\n        ( $ element ).replaceWith replacement\n        replacement.setAttribute 'src', url\n\n## Automating the process\n\nFor convenience, we create a function that calls the `makeLive` function on\nevery element in the document with the class \"lurch-embed\".  Thus web page\nand blog authors can call that script function whenever they need to make\nall Lurch source blocks in the page live.\n\nAlso, we call that function as soon as the page is done loading, so that\npage and blog authors may not need to call any script functions (depending\non the complexity of their page, and whether they are dynamically adding\nelements after loading).  They just mark some elements with a specific\nclass, and all is taken care of for them.\n\n    $ window.LurchEmbed.makeAllLive = ->\n        ( $ '.lurch-embed' ).each ( index, element ) ->\n            element.setAttribute 'data-embed-index', index\n            window.LurchEmbed.makeLive element\n\nAuthors can use Lurch shorthand in their blocks simply by wrapping the\ncontents of the \"lurch-embed\" block in a single `<shorthand>...</shorthand>`\ntag pair.  The embedded Lurch application will notice, from that wrapper,\nthat the content needs to be translated from Lurch shorthand, and will\nperform that translation, simultaneously removing the wrapper.  This is\nuseful for writing Lurch document content in a human-readable form.  See\n[the source code for document\nimport/export](main-app-import-export-solo.litcoffee) for details on Lurch\nshorthand.\n"]}
{"version":3,"sources":["lurch-web-platform.litcoffee"],"names":["Dependencies","Dialogs","DownloadUpload","Group","Groups","Overlay","Storage","addToCache","cacheLookup","createFontStyleString","createStyleString","drawHTMLCache","editor","exportPage","formatContentForWiki","getAPIPage","getIndexPage","getPageContent","getPageData","getPageMetadata","getPageTimestamp","grouperHTML","grouperInfo","htmlToImage","importPage","installClickListener","keyboardShortcutsWorkaround","login","markUsed","maybeSetupTestRecorder","moreMenuItems","moreToolbarItems","plugin","prepareHTML","pruneCache","setAPIPage","setIndexPage","hasProp","hasOwnProperty","JSON","equals","x","y","j","key","len","xkeys","ykeys","Object","Array","keys","sort","stringify","length","window","installDOMUtilitiesIn","isALetter","Node","prototype","address","ancestor","recur","this","parentNode","concat","indexInParent","slice","apply","childNodes","indexOf","index","ref","Error","toJSON","verbose","attribute","chi","result","Text","textContent","Comment","comment","content","m","n","Element","tagName","attributes","name","value","children","results","l","len1","ref1","t","a","c","fromJSON","json","child","document","createTextNode","createComment","createElement","setAttribute","appendChild","nextLeaf","container","walk","nextSibling","previousLeaf","previousSibling","nextTextNode","previousTextNode","firstLeafInside","lastLeafInside","remove","removeChild","hasClass","classes","getAttribute","split","call","addClass","push","join","removeClass","removeAttribute","nodeFromPoint","elt","node","range","rect","elementFromPoint","createRange","selectNode","getClientRects","left","right","top","bottom","strictNodeOrder","A","B","cmp","compareDocumentPosition","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_CONTAINED_BY","strictNodeComparator","groupA","groupB","Range","extendByCharacters","howMany","distanceToEnd","next","prev","remaining","endContainer","endOffset","body","setEnd","startContainer","startOffset","setStart","char","test","firstCharacter","toString","charAt","lastCharacter","extendByWords","lastRange","original","seenALetter","cloneRange","includeWholeWords","otherRange","CanvasRenderingContext2D","bezierArrow","x1","y1","x2","y2","x3","y3","x4","y4","size","localX","localY","nearEnd","nearEndVector","unit","Math","sqrt","beginPath","moveTo","bezierCurveTo","applyBezier","lineTo","C1","C2","C3","C4","pow","roundedRect","radius","arcTo","closePath","roundedZone","upperLine","lowerLine","leftMargin","rightMargin","canvas","width","rectanglesCollide","svgBlobForHTML","html","style","height","span","innerHTML","$","makeBlob","data","type","bb","e","ref2","Blob","error1","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","buffer","getBlob","order","maxSize","image","splice","unshift","pop","drawHTML","url","drawImage","objectURLForBlob","Image","onload","URL","webkitURL","revokeObjectURL","onerror","error","console","log","src","measureHTML","blob","createObjectURL","base64URLForBlob","callback","reader","FileReader","event","target","readAsDataURL","blobForBase64URL","ab","byteString","i","ia","mimeString","atob","ArrayBuffer","Uint8Array","charCodeAt","editor1","getFileMetadata","filepath","filename","success","failure","fullpath","directRead","dependencies","parse","update","dependency","pageName","splitPoint","lastIndexOf","_this","newData","oldData","exports","date","Date","fire","MediaWiki","currentVersion","lastModified","metadata","add","installUI","div","parts","Settings","UI","generalPair","button","info","id","ownerDocument","getElementById","addEventListener","tryToOpen","path","file","alert","title","message","prompt","tinymce","PluginManager","script","element","install","eventName","getElementsByTagName","parent","postMessage","currentTarget","files","focus","handler","innerHandler","activeEditor","windowManager","getWindows","on","removeEventListener","options","dialog","open","buttons","text","subtype","onclick","close","confirm","ref3","ref4","Cancel","cancelCallback","OK","okCallback","lastValue","ref5","promptForFile","types","codeEditor","ref6","setup","whichCallback","language","CodeMirror","fromTextArea","lineNumbers","fullScreen","autofocus","theme","mode","getValue","getContentWindow","waiting","work","control","buttonData","icon","shortcut","tooltip","addButton","addMenuItem","context","downloadDocument","uploadDocument","link","embedMetadata","getContent","click","documentDirty","tryToSave","letUserUpload","fileAsDataURL","extractMetadata","setContent","typeName","openClose","hide","grouper","more","exec","openOrClose","parseInt","styleObject","letter","newkey","defaultEditorStyles","toUpperCase","toLowerCase","defaultView","getComputedStyle","fontSize","fontFamily","open1","close1","plugin1","editors","getDoc","contentsChanged","set","attr","toStore","isNotDirty","updateGrouper","get","dataset","clear","decoration","jquery","base64","redrawContents","contentAsText","contentAsFragment","cloneContents","contentAsHTML","fragment","tmp","contentNodes","setContentAsText","inside","innerRange","selection","setRng","setStartAfter","setEndBefore","outerRange","setStartBefore","setEndAfter","rangeBefore","doc","rangeAfter","cxn","connectionsIn","disconnect","connectionsOut","undoManager","transact","stillInEditor","groupAsHTML","withSrcAttributes","find","removeAttr","propagate","firstTime","nodeName","nodeValue","deleted","connect","toGroup","tag","connection","connstring","mustAdd","oldConnections","fromGroup","matches","array","getScreenBoundaries","onSameLine","rects","toArray","min","max","groupTypes","topLevel","freeIds","addDrawHandler","drawGroups","isScanning","nextFreeId","shift","addFreeId","b","isIdFree","setUsedID","last","addGroupType","menuData","imageHTML","openImageHTML","openImage","closeImageHTML","closeImage","groupCurrentSelection","onPostRender","menuItem","updateButtonsAndMenuItems","connections","group","triples","getRng","collapse","groupAboveCursor","disabled","updateConnectionsMode","connectionsButton","active","cursor","leftNode","leftPos","newGroup","sel","allGroupers","getStart","getEnd","insertContent","grouperToGroup","disableScanning","enableScanning","select","getElementsByClassName","hideOrShowGroupers","groupers","filter","each","scanLocks","scanDocument","after","becameFree","before","count","gpStack","groupData","len2","len3","len4","len5","len6","o","originalId","q","r","s","updateConnections","usedIds","setTimeout","ids","old","idConversionMap","registerGroup","inOutBoth","idsCache","ref7","cached","newId","naturalWidth","g","groupAboveNode","all","middle","leftOfNode","floor","elementAfter","elementBefore","itsGroup","nodeType","groupAboveSelection","leftChain","rightChain","rangeChanged","groupsTouchingRange","firstInRange","lastInRange","maybeOneMore","stack","grouperIndexOfRangeEndpoint","endpoint","isLeftOfEndpoint","END_TO_START","END_TO_END","grouperRange","compareBoundaryPoints","base","base1","base2","base3","bodyStyle","bottomEdge","drawArrow","drawGroup","from","groupEdgesToConnect","innermost","interp","leftMar","moveBy","numArrays","pad","ref8","rightMar","tags","tagsToDraw","to","topEdge","bubbleTags","getBody","drawOutline","drawInterior","withTag","boundaries","color","tagString","tagContents","corner","fillStyle","strokeStyle","save","globalAlpha","lineWidth","setOutlineStyle","stroke","restore","setFillStyle","fill","visibleGroups","font","groupUnderMouse","fromBds","toBds","startDir","endDir","pct","outOf","label","setStyle","centerX","centerY","endX","endY","fromBox","how","startX","startY","toBox","results1","ref9","dom","loadCSS","settings","useGroupConnectionsUI","orig","level","bookmark","getBookmark","moveToBookmark","modifiers","movements","keyCode","item","items","menu","newItems","pos","preventDefault","clientX","clientY","contextmenu","menuItems","contextMenuItems","ui","Menu","renderTo","getContentAreaContainer","position","currentGroup","el","connectionRequest","clicked","tagMenuItems","allAfter","allBefore","allText","newCursorPos","typeData","String","fromCharCode","substr","substring","LaTeXshortcut","indexURL","APIURL","rvprop","xhr","XMLHttpRequest","object","responseText","query","pages","revisions","encodeURIComponent","setRequestHeader","send","username","password","token","xhr2","tokens","csrftoken","edit","editorHTML","charRE","closeRE","decoder","depth","match","openRE","toReplace","ed","drawHandlers","resize","redrawContent","doDrawing","positionCanvas","getContext","clearCanvas","translate","drawFunction","getEditorFrame","frame","frames","can","con","css","clearRect","getWin","scroll","addCategory","localStorage","getItem","setItem","teardown","showUI","category","categoryTitle","wins","windows","getEl","tr","heading","readOnly","tpair","initial","checkbox","checked","optionalDescription","radioButton","groupName","percent","align","setAppName","appName","backends","browser storage","LocalStorageFileSystem","Dropbox","DropboxFileSystem","setBackend","setLastFileObject","saveMetaData","loadMetaData","setDocumentDirty","tryToClear","handleOpen","instances","newname","instance","recomputePageTitle","getFilename","setting","availableBackends","getBackend","backend","which","setFileSystem","fileObject","lastFileObject","documentHTML","metadataObject","re","decodeURIComponent","addLoadingScript","currentHref","location","href","removeLoadingScript","closeIndex","openIndex","openTag","saveAs","done","saveFile","destination","loadIntoEditor","loadedData","openFile","chosenFile","delay","func","args","arguments","contents","readFile","directWrite","writeFile","createShortcutData","maybeInstall","shortcuts","replace","altKey","ctrlKey","metaKey","action","execCommand","__addMenuItem","__addButton","installListeners","installed","testwin","search","screenX","screenY","findAll","fn","notSupported","whatYouDid","editorKeyPress","shiftKey","conversion","ignore","8","13","35","36","37","38","39","40","46","editorMouseClick","panel","buttonClicked","enterReadyState","groupToolbarButtons","groupMenuItems","pluginsToLoad","fullScreenEditor","editorContainer","menuBarIcon","groupTypeNames","p","init","selector","auto_focus","branding","browser_spellcheck","gecko_spellcheck","statusbar","paste_data_images","plugins","object_resizing","toolbar","fontsize_formats","style_formats_merge","style_formats","inline","styles","border-radius","padding","margin","background-color","exact","insert","view","format","table","help","helpAboutText","findMenu","findToolButton","tour","menuHeaders","same","trim","Tour","storage","steps","start","filemenu","fs","getContainer","insertBefore","returnValue","afterEditorReady","application","menuName","k","names","addHelpMenuSourceCodeLink","flash","sourcecode","tutorial","elts","fadeOut","fadeIn","showUndoStack","current","final","manager","previous"],"mappings":"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","file":"lurch-web-platform.js","sourcesContent":["\n# Generic Utilities\n\nThis file provides functions useful across a wide variety of situations.\nUtilities specific to the DOM appear in [the DOM utilities\npackage](domutilities.litcoffee.html).  More generic ones appear here.\n\n## Equal JSON objects\n\nBy a \"JSON object\" I mean an object where the only information we care about\nis that which would be preserved by `JSON.stringify` (i.e., an object that\ncan be serialized and deserialized with JSON's `stringify` and `parse`\nwithout bringing any harm to our data).\n\nWe wish to be able to compare such objects for semantic equality (not actual\nequality of objects in memory, as `==` would do).  We cannot simply do this\nby comparing the `JSON.stringify` of each, because [documentation on\nJSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\nsays that we cannot rely on a consistent ordering of the object keys.  Thus\nwe implement the following comparison routine.\n\nNote that this only works for objects that fit the requirements above; if\nequality (in your situation) is affected by the prototype chain, or if your\nobject contains functions, or any other similar difficulty, then this\nroutine is not guaranteed to work for you.\n\nIt yields the same result as `JSON.stringify(x) is JSON.stringify(y)` would\nif `stringify` always gave the same ordering of object keys.\n\n    JSON.equals = ( x, y ) ->\n\nIf only one is an object, or only one is an array, then they're not equal.\nIf neither is an object, you can use plain simple `is` to compare.\n\n        return no if ( x instanceof Object ) isnt ( y instanceof Object )\n        return no if ( x instanceof Array ) isnt ( y instanceof Array )\n        if x not instanceof Object then return x is y\n\nSo now we know that both inputs are objects.\n\nGet their keys in a consistent order.  If they aren't the same for both\nobjects, then the objects aren't equal.\n\n        xkeys = ( Object.keys x ).sort()\n        ykeys = ( Object.keys y ).sort()\n        return no if ( JSON.stringify xkeys ) isnt ( JSON.stringify ykeys )\n\nIf there's any key on which the objects don't match, then they aren't equal.\nOtherwise, they are.\n\n        for key in xkeys\n            if not JSON.equals x[key], y[key] then return no\n        yes\n\n\n# Utility functions for working with the DOM\n\nThis file defines all of its functions inside one enormous `installIn`\nfunction, which installs those methods into a particular `window` instance.\nThis is so that it can be used in an iframe in addition to the main window.\nThis file itself calls `installIn` on the main `window` instance, so you do\nnot need to.  But if you also wish to use these functions within an iframe,\nyou can call `installIn` on the `window` instance for that iframe.\n\n    window.installDOMUtilitiesIn = ( window ) ->\n\n## Address\n\nThe address of a node `N` in an ancestor node `M` is an array `a` of\nnon-negative integer indices such that\n`M.childNodes[a[0]].childNodes[a[1]]. ... .childNodes[a[a.length-1]] == N`.\nThink of it as the path one must walk through children to get from `M` down\nto `N`.  Special cases:\n * If the array is of length 1, then `M == N.parentNode`.\n * If the array is empty, `[]`, then `M == N`.\n * If `M` is not an ancestor of `N`, then we say the address of `N`\n   within `M` is null (not an array at all).\n\nThe following member function of the `Node` class adds the address function\nto that class.  Using the `M` and `N` from above, one would call it like\n`N.address M`.  [See below](#index) for its inverse function, `index`.\n\nIt computes the address of any one DOM node within any other. If the\nparameter (the ancestor, called `M` above) is not supplied, then it defaults\nto the top-level Node above `N` (i.e., the furthest-up ancestor, with no\n`.parentNode`, which usually means it's the global variable `document`).\n\n        window.Node::address = ( ancestor = null ) ->\n\nThe base case comes in two flavors. First, if the parameter is this node,\nthen the correct result is the empty array.\n\n            if this is ancestor then return []\n\nSecond, if we've reached the top level then we must consider the second\nparameter.  Were we restricted to a specific ancestor?  If so, we didn't\nfind it, so return null.  If not, return the empty array, because we have\nreached the top level.\n\n            if not @parentNode\n                return if ancestor then null else []\n\nOtherwise, recur up the ancestor tree, and concatenate our own index in our\nparent with the array we compute there, if there is one.\n\n            recur = @parentNode.address ancestor\n            if recur is null then return null\n            recur.concat [ @indexInParent() ]\n\nYou'll notice that the final line of code above depends on the\nas-yet-undefined helper function `indexInParent()`.  We therefore create\nthat simple helper function now, which is also a useful member of the `Node`\nprototype.\n\n        window.Node::indexInParent = ->\n            if @parentNode\n                Array::slice.apply( @parentNode.childNodes ).indexOf this\n            else\n                -1\n\n## Index\n\nThis function is an inverse for `address`, [defined above](#address).\n\nThe node at index `I` in node `N` is the descendant `M` of `N` in the node\nhierarchy such that `M.address N` is `I`. In short, if `N` is any ancestor\nof `M`, then `N.index(M.address(N)) == M`.\n\nKeeping in mind that an address is simply an array of nonnegative integers,\nthe implementation is simply repeated lookups in some `childNodes` arrays.\nIt is therefore quite short, with most of the code going to type safety.\n\n        window.Node::index = ( address ) ->\n\nRequire that the parameter be an array.\n\n            if address not instanceof Array\n                throw Error 'Node address function requires an array'\n\nIf the array is empty, we've hit the base case of this recursion.\n\n            if address.length is 0 then return this\n\nOthwerise, recur on the child whose index is the first element of the given\naddress.  There are two safety checks here.  First, we verify that the index\nwe're about to look up is a number (otherwise things like `[0]` will be\ntreated as zero, which is probably erroneous).  Second, the `?.` syntax\nbelow ensures that that index is valid, so that we do not attempt to call\nthis function recursively on something other than a node.\n\n            if typeof address[0] isnt 'number' then return undefined\n            @childNodes[address[0]]?.index address[1..]\n\n## Serialization\n\n### From DOM Nodes to objects\n\nThese methods are for serializing and unserializing DOM nodes to objects\nthat are amenable to JSON processing.\n\nFirst, the function for converting a DOM Node to an object that can be\nserialized with `JSON.stringify`.  After this function is defined, one can\ntake any node `N` and call `N.toJSON()`.\n\n        window.Node::toJSON = ( verbose = yes ) ->\n\nThe `verbose` parameter uses human-readable object keys, and is the default.\nA more compact version can be obtained by setting that value to false.  The\ninverse function below can handle either format.  The shrinking of keys\nfollows the following convention.\n * tagName becomes t\n * attributes becomes a\n * children becomes c\n * comment becomes m\n * content becomes n\n\nText nodes are simply returned as strings.\n\n            if this instanceof window.Text then return @textContent\n\nComment nodes are returned as objects with a comment flag and a text content\nattribute.\n\n            if this instanceof window.Comment\n                return if verbose\n                    comment : yes, content : @textContent\n                else\n                    m : yes, n : @textContent\n\nAll other types of nodes must be elements in order to be serialized by this\nroutine.\n\n            if this not instanceof window.Element\n                throw Error \"Cannot serialize this node: #{this}\"\n\nA serialized Element is an object with up to three properties, tag name,\nattribute dictionary, and child nodes array.  We create that object, then\nadd the attributes dictionary and children array if and only if they are\nnonempty.\n\n            result = tagName : @tagName\n            if @attributes.length\n                result.attributes = { }\n                for attribute in @attributes\n                    result.attributes[attribute.name] = attribute.value\n            if @childNodes.length\n                result.children =\n                    ( chi.toJSON verbose for chi in @childNodes )\n\nIf verbosity is disabled, change all the object keys to one-letter\nabbreviations.\n\n            if not verbose\n                result.t = result.tagName ; delete result.tagName\n                result.a = result.attributes ; delete result.attributes\n                result.c = result.children ; delete result.children\n            result\n\n### From objects to DOM Nodes\n\nNext, the function for converting an object produced with `N.toJSON()` back\ninto an actual DOM Node.  This function requires its one parameter to be one\nof two types, either a string (meaning that a text node should be returned)\nor an object with the three properties given above (tagName, attributes,\nchildren, meaning that an Element should be returned).  One calls it by\nwriting `Node.toJSON object`.\n\n        window.Node.fromJSON = ( json ) ->\n\nHandle the easy case first:  strings yield text nodes.\n\n            if typeof json is 'string'\n                return window.document.createTextNode json\n\nNext, if we can find a comment flag in the object, then we create and return\na comment.\n\n            if 'comment' of json and json.comment\n                return window.document.createComment json.content\n            if 'm' of json and json.m\n                return window.document.createComment json.n\n\nThe only other possibility is that the object encodes an Element. So if we\ncan't get a tag name from the object, we cannot proceed, and thus the input\nwas invalid.\n\n            if not 'tagName' of json and not 't' of json\n                throw Error \"Object has no t[agName]: #{this}\"\n\nCreate an element using the tag name, add any attributes from the given\nobject, and recur on the child array if there is one.\n\n            result = window.document.createElement json.tagName or json.t\n            if attributes = json.attributes or json.a\n                for own key, value of attributes\n                    result.setAttribute key, value\n            if children = json.children or json.c\n                for child in children\n                    result.appendChild Node.fromJSON child\n            result\n\n## Next and previous leaves\n\nAlthough the DOM provides properties for the next and previous siblings of\nany node, it does not provide a method for finding the next or previous\n*leaf* nodes.  The following additions to the Node prototype do just that.\n\nOne can call `N.nextLeaf()` to get the next leaf node in the document\nstrictly after `N` (regardless of whether `N` itself is a leaf), or\n`N.nextLeaf M` to restrict the search to within the ancestor node `M`.  `M`\ndefaults to the entire document.  `M` must be an ancestor of `N`, or this\ndefault is used.\n\n        window.Node::nextLeaf = ( container = null ) ->\n\nWalk up the DOM tree until we can find a previous sibling.  Do not step\noutside the bounds of the document or `container`.\n\n            walk = this\n            while walk and walk isnt container and not walk.nextSibling\n                walk = walk.parentNode\n\nIf no next sibling could be found, quit now, returning null.\n\n            if walk is container then return null\n            walk = walk?.nextSibling\n            if not walk then return null\n\nWe have a next sibling, so return its first leaf node.\n\n            while walk.childNodes.length > 0 then walk = walk.childNodes[0]\n            walk\n\nThe following routine is analogous to the previous one, but in the opposite\ndirection (finding the previous leaf node, within the given `container`, if\nsuch a leaf node exists).  Its code is not documented because it is so\nsimilar to the previous routine, which is documented.\n\n        window.Node::previousLeaf = ( container = null ) ->\n            walk = this\n            while walk and walk isnt container and not walk.previousSibling\n                walk = walk.parentNode\n            if walk is container then return null\n            walk = walk?.previousSibling\n            if not walk then return null\n            while walk.childNodes.length > 0\n                walk = walk.childNodes[walk.childNodes.length - 1]\n            walk\n\nRelated to the previous two methods are two for finding the next and\nprevious nodes of type `Text`.\n\n        window.Node::nextTextNode = ( container = null ) ->\n            if ( walk = @nextLeaf container ) instanceof window.Text\n                walk\n            else\n                walk?.nextTextNode container\n        window.Node::previousTextNode = ( container = null ) ->\n            if ( walk = @previousLeaf container ) instanceof window.Text\n                walk\n            else\n                walk?.previousTextNode container\n\nRelated to the other methods above, we have the following two, which compute\nthe first or last leaf inside a given ancestor.\n\n        window.Node::firstLeafInside = ->\n            @childNodes?[0]?.firstLeafInside() or this\n        window.Node::lastLeafInside = ->\n            @childNodes?[@childNodes.length-1]?.lastLeafInside() or this\n\n## More convenient `remove` method\n\nSome browsers provide the `remove` method in the `Node` prototype, but some\ndo not.  To make things standard, I create the following member in the\n`Node` prototype.  It guarantees that for any node `N`, the call\n`N.remove()` has the same effect as the (more verbose and opaque) call\n`N.parentNode.removeChild N`.\n\n        window.Node::remove = -> @parentNode?.removeChild this\n\n## Adding classes to and removing classes from elements\n\nIt is handy to have methods that add and remove CSS classes on HTML element\ninstances.\n\nFirst, for checking if one is there:\n\n        window.Element::hasClass = ( name ) ->\n            classes = ( @getAttribute 'class' )?.split /\\s+/\n            classes and name in classes\n\nNext, for adding a class to an element:\n\n        window.Element::addClass = ( name ) ->\n            classes = ( ( @getAttribute 'class' )?.split /\\s+/ ) or []\n            if name not in classes then classes.push name\n            @setAttribute 'class', classes.join ' '\n\nLast, for removing one:\n\n        window.Element::removeClass = ( name ) ->\n            classes = ( ( @getAttribute 'class' )?.split /\\s+/ ) or []\n            classes = ( c for c in classes when c isnt name )\n            if classes.length > 0\n                @setAttribute 'class', classes.join ' '\n            else\n                @removeAttribute 'class'\n\n## Converting (x,y) coordinates to nodes\n\nThe browser will convert an (x,y) coordinate to an element, but not to a\ntext node within the element.  The following routine fills that gap.  Thanks\nto [this StackOverflow answer](http://stackoverflow.com/a/13789789/670492).\n\n        window.document.nodeFromPoint = ( x, y ) ->\n            elt = window.document.elementFromPoint x, y\n            for node in elt.childNodes\n                if node instanceof window.Text\n                    range = window.document.createRange()\n                    range.selectNode node\n                    for rect in range.getClientRects()\n                        if rect.left < x < rect.right and \\\n                           rect.top < y < rect.bottom then return node\n            return elt\n\n## Order of DOM nodes\n\nTo check whether DOM node A appears strictly before DOM node B in the\ndocument, use the following function.  Note that if node B is contained in\nnode A, this returns false.\n\n        window.strictNodeOrder = ( A, B ) ->\n            cmp = A.compareDocumentPosition B\n            ( Node.DOCUMENT_POSITION_FOLLOWING & cmp ) and \\\n                not ( Node.DOCUMENT_POSITION_CONTAINED_BY & cmp )\n\nTo sort an array of document nodes, using a comparator that will return -1,\n0, or 1, indicating whether nodes are in order, the same, or out of order\n(respectively), use the following comparator function.\n\n        window.strictNodeComparator = ( groupA, groupB ) ->\n            if groupA is groupB then return 0\n            if strictNodeOrder groupA, groupB then -1 else 1\n\n## Extending ranges\n\nAn HTML `Range` object indicates a certain section of a document.  We add to\nthat class here the capability of extending a range to the left or to the\nright by a given number of characters (when possible).  Here, `howMany` is\nthe number of characters, and if positive, it will extend the right end of\nthe range to the right; if negative, it will extend the left end of the\nrange to the left.\n\nIf the requested extension is not possible, a false value is returned, and\nthe object may or may not have been modified, and may or may not be useful.\nIf the requested extension is possible, a true value is returned, and the\nobject is guaranteed to have been correctly modified as requested.\n\n        window.Range::extendByCharacters = ( howMany ) ->\n            if howMany is 0\n                return yes\n            else if howMany > 0\n                if @endContainer not instanceof window.Text\n                    if @endOffset > 0\n                        next = @endContainer.childNodes[@endOffset - 1]\n                                .nextTextNode window.document.body\n                    else\n                        next = @endContainer.firstLeafInside()\n                        if next not instanceof window.Text\n                            next = next.nextTextNode window.document.body\n                    if next then @setEnd next, 0 else return no\n                distanceToEnd = @endContainer.length - @endOffset\n                if howMany <= distanceToEnd\n                    @setEnd @endContainer, @endOffset + howMany\n                    return yes\n                if next = @endContainer.nextTextNode window.document.body\n                    @setEnd next, 0\n                    return @extendByCharacters howMany - distanceToEnd\n            else if howMany < 0\n                if @startContainer not instanceof window.Text\n                    if @startOffset > 0\n                        prev = @startContainer.childNodes[@startOffset - 1]\n                                .previousTextNode window.document.body\n                    else\n                        prev = @startContainer.lastLeafInside()\n                        if prev not instanceof window.Text\n                            prev =\n                                prev.previousTextNode window.document.body\n                    if prev then @setStart prev, 0 else return no\n                if -howMany <= @startOffset\n                    @setStart @startContainer, @startOffset + howMany\n                    return yes\n                if prev = @startContainer\n                           .previousTextNode window.document.body\n                    remaining = howMany + @startOffset\n                    @setStart prev, prev.length\n                    return @extendByCharacters remaining\n            no\n\nThe `extendByWords` function is analogous, but extends by a given number of\nwords rather than a given number of characters.\n\nA word counts as any sequence of consecutive letters, and a letter counts as\nanything that isn't whitespace.\n\n        isALetter = ( char ) -> not /\\s/.test char\n\nWe will use that on these two simple Range utilities.\n\n        window.Range::firstCharacter = -> @toString().charAt 0\n        window.Range::lastCharacter = ->\n            @toString().charAt @toString().length - 1\n\nReturn values for `extendByWords` are the same as for `extendByCharacters`.\n\n        window.Range::extendByWords = ( howMany ) ->\n            original = @cloneRange()\n            @includeWholeWords()\n            if howMany is 0\n                return yes\n            else if howMany > 0\n                if not @equals original\n                    return @extendByWords howMany - 1\n                seenALetter = no\n                while @toString().length is 0 or not seenALetter or \\\n                      isALetter @lastCharacter()\n                    lastRange = @cloneRange()\n                    if not @extendByCharacters 1\n                        return seenALetter and howMany is 1\n                    if isALetter @lastCharacter() then seenALetter = yes\n                @setStart lastRange.startContainer, lastRange.startOffset\n                @setEnd lastRange.endContainer, lastRange.endOffset\n                return @extendByWords howMany - 1\n            else if howMany < 0\n                if not @equals original\n                    return @extendByWords howMany + 1\n                seenALetter = no\n                while @toString().length is 0 or not seenALetter or \\\n                      isALetter @firstCharacter()\n                    lastRange = @cloneRange()\n                    if not @extendByCharacters -1\n                        return seenALetter and howMany is -1\n                    if isALetter @firstCharacter() then seenALetter = yes\n                @setStart lastRange.startContainer, lastRange.startOffset\n                @setEnd lastRange.endContainer, lastRange.endOffset\n                return @extendByWords howMany + 1\n            no\n\nTwo ranges are the same if and only if they have the same start and end\ncontainers and same start and end offsets.\n\n        window.Range::equals = ( otherRange ) ->\n            @startContainer is otherRange.startContainer and \\\n            @endContainer is otherRange.endContainer and \\\n            @startOffset is otherRange.startOffset and \\\n            @endOffset is otherRange.endOffset\n\nThe following utility function is used by the previous.  It expands the\nRange object as little as possible to ensure that it contains an integer\nnumber of words (no word partially included).\n\nA range in the middle of a word will expand to include the word. A range\nnext to a word will expand to include the word.  A range touching no letter\non either side will not change.\n\n        window.Range::includeWholeWords = ->\n            while @toString().length is 0 or isALetter @firstCharacter()\n                lastRange = @cloneRange()\n                if not @extendByCharacters -1 then break\n            @setStart lastRange.startContainer, lastRange.startOffset\n            @setEnd lastRange.endContainer, lastRange.endOffset\n            while @toString().length is 0 or isALetter @lastCharacter()\n                lastRange = @cloneRange()\n                if not @extendByCharacters 1 then break\n            @setStart lastRange.startContainer, lastRange.startOffset\n            @setEnd lastRange.endContainer, lastRange.endOffset\n\n## Installation into main window global namespace\n\nAs mentioned above, we defined all of the functions in one big `installIn`\nfunction so that we can install them in an iframe in addition to the main\nwindow.  We now call `installIn` on the main `window` instance, so clients\ndo not need to do so.\n\n    installDOMUtilitiesIn window\n\n\n# Canvas Utilities\n\nThis module defines several functions useful when working with the HTML5\nCanvas.\n\n## Curved arrows\n\nThe following function draws an arrow along a cubic Bézier curve.  It\nrequires the four control points, each as an (x,y) pair.  The arrowhead\nsize can be adjusted with the final parameter, the altitude of the arrowhead\ntriangle, measured in pixels\n\n    CanvasRenderingContext2D::bezierArrow =\n    ( x1, y1, x2, y2, x3, y3, x4, y4, size = 10 ) ->\n        unit = ( x, y ) ->\n            length = Math.sqrt( x*x + y*y ) or 1\n            x : x/length, y : y/length\n        @beginPath()\n        @moveTo x1, y1\n        @bezierCurveTo x2, y2, x3, y3, x4, y4\n        nearEnd =\n            x : @applyBezier x1, x2, x3, x4, 0.9\n            y : @applyBezier y1, y2, y3, y4, 0.9\n        nearEndVector = x : x4 - nearEnd.x, y : y4 - nearEnd.y\n        localY = unit nearEndVector.x, nearEndVector.y\n        localY.x *= size * 0.7\n        localY.y *= size\n        localX = x : localY.y, y : -localY.x\n        @moveTo x4-localX.x-localY.x, y4-localX.y-localY.y\n        @lineTo x4, y4\n        @lineTo x4+localX.x-localY.x, y4+localX.y-localY.y\n\nThe following utility function is useful to the function above, as well as\nto other functions in the codebase.\n\n    CanvasRenderingContext2D::applyBezier = ( C1, C2, C3, C4, t ) ->\n        ( 1-t )**3*C1 + 3*( 1-t )**2*t*C2 + 3*( 1-t )*t**2*C3 + t**3*C4\n\n## Rounded rectangles\n\nThe following function traces a rounded rectangle path in the context.  It\nsits entirely inside the rectangle from the upper-left point (x1,y1) to the\nlower-right point (x2,y2), and its corners are quarter circles with the\ngiven radius.\n\nIt calls `beginPath()` and `closePath()` but does not stroke or fill the\npath.  You should do whichever (or both) of those you like.\n\n    CanvasRenderingContext2D::roundedRect = ( x1, y1, x2, y2, radius ) ->\n        @beginPath()\n        @moveTo x1 + radius, y1\n        @lineTo x2 - radius, y1\n        @arcTo x2, y1, x2, y1 + radius, radius\n        @lineTo x2, y2 - radius\n        @arcTo x2, y2, x2 - radius, y2, radius\n        @lineTo x1 + radius, y2\n        @arcTo x1, y2, x1, y2 - radius, radius\n        @lineTo x1, y1 + radius\n        @arcTo x1, y1, x1 + radius, y1, radius\n        @closePath()\n\n## Rounded zones\n\nThe following function traces a rounded rectangle that extends from\ncharacter in a word processor to another, which are on different lines, and\nthus the rectangle is stretched.  Rather than looking like a normal\nrectangle, the effect looks like the following illustration, with X\nindicating text and lines indicating the boundaries of the rounded zone.\n\n```\n  x x x x x x x x x x x x\n       /------------------+\n  x x x|x x x x x x x x x |\n+------+                  |\n| x x x x x x x x x x x x |\n|          +--------------|\n| x x x x x|x x x x x x x\n+----------/\n  x x x x x x x x x x x x\n```\n\nThe corners marked with slashes are to be rounded, and the other corners are\nsquare.  The left and right edges are the edges of the canvas, minus the\ngiven values of `leftMargin` and `rightMargin`.  The y coordinates of the\ntwo interior horizontal lines are given by `upperLine` and `lowerLine`,\nrespectively.\n\nIt calls `beginPath()` and `closePath()` but does not stroke or fill the\npath.  You should do whichever (or both) of those you like.\n\n    CanvasRenderingContext2D::roundedZone = ( x1, y1, x2, y2,\n    upperLine, lowerLine, leftMargin, rightMargin, radius ) ->\n        @beginPath()\n        @moveTo x1 + radius, y1\n        @lineTo @canvas.width - rightMargin, y1\n        @lineTo @canvas.width - rightMargin, lowerLine\n        @lineTo x2, lowerLine\n        @lineTo x2, y2 - radius\n        @arcTo x2, y2, x2 - radius, y2, radius\n        @lineTo leftMargin, y2\n        @lineTo leftMargin, upperLine\n        @lineTo x1, upperLine\n        @lineTo x1, y1 + radius\n        @arcTo x1, y1, x1 + radius, y1, radius\n        @closePath()\n\n## Rectangle overlapping\n\nThe following routine computes whether two rectangles collide.  The first is\ngiven by upper-left corner (x1,y1) and lower-right corner (x2,y2).  The\nsecond is given by upper-left corner (x3,y3) and lower-right corner (x4,y4).\nThe routine returns true iff the interior of the rectangles intersect.\n(If they intersect only on their boundaries, false is returned.)\n\n    window.rectanglesCollide = ( x1, y1, x2, y2, x3, y3, x4, y4 ) ->\n        not ( x3 >= x2 or x4 <= x1 or y3 >= y2 or y4 <= y1 )\n\n## Rendering HTML to Images and/or Canvases\n\nThis section provides several routines related to converting arbitrary HTML\ninto image data in various forms (SVG, Blob, object URLs, base64 encoding)\nand for drawing such forms onto an HTML canvas.\n\nThis first function converts arbitrary (strictly well-formed!) HTML into a\nBlob containing SVG XML for the given HTML.  This makes use of the\ndocument's body, it can only be called once page loading has completed.\n\n    window.svgBlobForHTML = ( html, style = 'font-size:12px' ) ->\n\nFirst, compute its dimensions using a temporary span in the document.\n\n        span = document.createElement 'span'\n        span.setAttribute 'style', style\n        span.innerHTML = html\n        document.body.appendChild span\n        span = $ span\n        width = span.width() + 2 # cushion for error\n        height = span.height() + 2 # cushion for error\n        span.remove()\n\nThen build an SVG and store it as blob data.  (See the next function in this\nfile for how the blob is built.)\n\n        window.makeBlob \"<svg xmlns='http://www.w3.org/2000/svg'\n            width='#{width}' height='#{height}'><foreignObject width='100%'\n            height='100%'><div xmlns='http://www.w3.org/1999/xhtml'\n            style='#{style}'>#{html}</div></foreignObject></svg>\",\n            'image/svg+xml;charset=utf-8'\n\nThe previous function makes use of the following cross-browser Blob-building\nutility gleaned from [this StackOverflow\npost](http://stackoverflow.com/questions/15293694/blob-constructor-browser-compatibility).\n\n    window.makeBlob = ( data, type ) ->\n        try\n            new Blob [ data ], type : type\n        catch e\n            # TypeError old chrome and FF\n            window.BlobBuilder = window.BlobBuilder ?\n                                 window.WebKitBlobBuilder ?\n                                 window.MozBlobBuilder ?\n                                 window.MSBlobBuilder\n            if e.name is 'TypeError' and window.BlobBuilder?\n                bb = new BlobBuilder()\n                bb.append data.buffer\n                bb.getBlob type\n            else if e.name is 'InvalidStateError'\n                # InvalidStateError (tested on FF13 WinXP)\n                new Blob [ data.buffer ], type : type\n\nNow we move on to a routine for rendering arbitrary HTML to a canvas, but\nthere are some preliminaries we need to build first.\n\nCanvas rendering happens asynchronously.  If the routine returns false, then\nit did not render, but rather began preparing the HTML for rendering (by\ninitiating the background rendering of the HTML to an image).  Those results\nwill then be cached, so later calls to this routine will return true,\nindicating success (immediate rendering).\n\nTo support this, we need a cache.  The following routines define the cache.\n\n    drawHTMLCache = order : [ ], maxSize : 100\n    cacheLookup = ( html, style ) ->\n        key = JSON.stringify [ html, style ]\n        if drawHTMLCache.hasOwnProperty key then drawHTMLCache[key] \\\n            else null\n    addToCache = ( html, style, image ) ->\n        key = JSON.stringify [ html, style ]\n        drawHTMLCache[key] = image\n        markUsed html, style\n    markUsed = ( html, style ) ->\n        key = JSON.stringify [ html, style ]\n        if ( index = drawHTMLCache.order.indexOf key ) > -1\n            drawHTMLCache.order.splice index, 1\n        drawHTMLCache.order.unshift key\n        pruneCache()\n    pruneCache = ->\n        while drawHTMLCache.order.length > drawHTMLCache.maxSize\n            delete drawHTMLCache[drawHTMLCache.order.pop()]\n\nAnd now, the rendering routine, which is based on code taken from [this MDN\narticle](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas).\n\n    CanvasRenderingContext2D::drawHTML =\n    ( html, x, y, style = 'font-size:12px' ) ->\n\nIf the given HTML has already been rendered to an image that remains in the\ncache, just use that immediately and return success.\n\n        if image = cacheLookup html, style\n            @drawImage image, x, y\n            markUsed html, style\n            return yes\n\nOtherwise, begin rendering that HTML to an image, for later insertion into\nthe cache, and return (temporary) failure.  Start by creating the image and\nassign its URL, so that when rendering completes asynchronously, we can\nstore the results in the cache.\n\n        url = objectURLForBlob svgBlobForHTML html, style\n        image = new Image()\n        image.onload = ->\n            addToCache html, style, image\n            ( window.URL ? window.webkitURL ? window ).revokeObjectURL url\n        image.onerror = ( error ) ->\n            addToCache html, style, new Image()\n            console.log 'Failed to load SVG with this <foreignObject> div\n                content:', html\n        image.src = url\n        no\n\nThe following routine queries the same cache to determine the width and\nheight of a given piece of HTML that could be rendered to the canvas.  If\nthe HTML is not in the cache, this returns null.  Otherwise, it returns an\nobject with width and height attributes.\n\n    CanvasRenderingContext2D::measureHTML =\n    ( html, style = 'font-size:12px' ) ->\n        if image = cacheLookup html, style\n            markUsed html, style\n            width : image.width\n            height : image.height\n        else\n            @drawHTML html, 0, 0, style # forces caching\n            null\n\nThe `drawHTML` function makes use of the following routine, which converts a\nBlob into an image URL using `createObjectURL`.\n\n    window.objectURLForBlob = ( blob ) ->\n        ( window.URL ? window.webkitURL ? window ).createObjectURL blob\n\nThe following does the same thing, but creates a URL with the base-64\nencoding of the Blob in it.  This must be done asynchronously, but then the\nURL can be used anywhere, not just in this script environment.  The result\nis sent to the given callback.\n\n    window.base64URLForBlob = ( blob, callback ) ->\n        reader = new FileReader\n        reader.onload = ( event ) -> callback event.target.result\n        reader.readAsDataURL blob\n\nAs long as we're here, let's also create the inverse for this function,\nwhich takes a base64 URL and converts it into a Blob.  This one is\nsynchronous.\n\n    window.blobForBase64URL = ( url ) ->\n        # For this code, thanks to:\n        # http://stackoverflow.com/a/12300351/670492\n        byteString = atob url.split( ',' )[1]\n        mimeString = url.split( ',' )[0].split( ':' )[1].split( ';' )[0]\n        ab = new ArrayBuffer byteString.length\n        ia = new Uint8Array ab\n        for i in [0...byteString.length]\n            ia[i] = byteString.charCodeAt i\n        window.makeBlob ab, mimeString\n\n\n# Dependencies Plugin for [TinyMCE](http://www.tinymce.com)\n\n## Overview\n\nThis plugin adds features for making the current document depend on others,\nmuch like programming languages permit one file importing the definitions in\nanother file (such as with `#include` in C, for example).\n\nThe particular mechanism by which this is implemented in Lurch is described\nhere.  It will be convenient to assume we're discussing two documents, A and\nB, with A being used as a dependency by B (that is, B imports A).\n\n * Document B must store in its metadata a member called `exports`.  As with\n   all document metadata, it must be JSON data.\n * Document A will see none of the actual contents of document B.  Rather,\n   it will see all the data stored in that `exports` member of B.\n * Both documents must leave the `dependencies` member of their metadata\n   untouched; this plugin will manage it.\n * When the user indicates that document A should import document B as a\n   dependency, this plugin will store the address (URL or filename) of\n   document B in the `dependencies` member of document A's metadata.  It\n   will also fetch all of document B's `exports` data and store that, too.\n * Whenever document A is opened, the last modified time of document B will\n   be checked.  If it is newer than the last import, B's `exports` data will\n   be re-fetched, and the updated version stored in A.\n * If B depended on another document C, then both the `exports` data in B\n   (if any) *and* its `dependencies` data would be imported into A.  The\n   `dependencies` would be embedded as a member of the `exports`, so do not\n   ever include a `dependencies` member inside an `exports` member, or it\n   may be overwritten and/or misinterpreted.\n * Documents may import more than one dependency, and so the dependencies\n   data is actually an array.  These examples have considered the case of\n   importing only one dependency, for simplicity.\n\n## Example\n\nHere is a summary of the metadata structure described by the above bullet\npoints.\n\n### Document C\n\n * Exports some data about its own contents.  Thus its metadata has an\n   `exports` member, let's say this one for example:\n\n```json\n    [ \"example\", \"C\", \"data\" ]\n```\n\n * Has no dependencies.  Thus its metadata has no dependencies member, which\n   by default is equivalent to an empty array, `[ ]`.\n\n### Document B\n\n * Exports some data about its own contents.  Thus its metadata has an\n   `exports` member, let's say this one for example:\n\n```json\n    { \"what\" : \"example data\", \"whence\" : \"document B\" }\n```\n\n * Imports document C.  Thus its metadata has a dependencies member like\n   the following.  Recall that this is a one-element array just for the\n   simplicity of this example.\n\n```json\n    [\n        {\n            \"address\" : \"http://www.example.com/document_c\",\n            \"data\" : [ \"example\", \"C\", \"data\" ],\n            \"date\" : \"2012-04-23T18:25:43.511Z\"\n        }\n    ]\n```\n\n### Document A\n\n * Exports some data about its own contents, but that's irrelevant here\n   because in this example no document depends on A.\n * Imports document B.  Thus its metadata has a dependencies member like\n   the following.  Note the embedding of C's dependencies inside B's.\n\n```json\n    [\n        {\n            \"address\" : \"http://www.example.com/document_b\",\n            \"data\" : {\n                \"what\" : \"example data\",\n                \"whence\" : \"document B\",\n                \"dependencies\" : [\n                    {\n                        \"address\" : \"http://www.example.com/document_c\",\n                        \"data\" : [ \"example\", \"C\", \"data\" ],\n                        \"date\" : \"2012-04-23T18:25:43.511Z\"\n                    }\n                ]\n            },\n            \"date\" : \"2012-05-21T16:00:51.278Z\",\n        }\n    ]\n```\n\n## Responsibilities\n\nThe author of a Lurch Application (see [tutorial](../doc/tutorial.md)) must\nimplement a `saveMetadata` function (as documented\n[here](storageplugin.litcoffee#constructor)) to store the appropriate\n`exports` data in the document's metadata upon each save.  It should also\nstore the document's `dependencies` data, which can be obtained by calling\n`export` in this plugin.\n\nSometimes, however, it is not possible, to give accurate `exports` data.\nFor example, if a lengthy background computation is taking place, the\napplication may not know up-to-date exports information for the current\ndocument state.  If `saveMetadata` is called at such times, the application\nshould do two things.\n 1. Inform the user that the document was saved while a background\n    computation (or other cause) left the document's data not fully updated.\n    Consequently, the document *cannot* be used as a dependency until this\n    problem is corrected.  Wait for background computations (or whatever)\n    to complete, and then save again.\n 1. Store in the `exports` member an object of the following form.  The\n    error message will be used if another user attempts to import this\n    document as a dependency, to explain why that operation is not valid.\n\n```json\n    { \"error\" : \"Error message explaining why exports data not available.\" }\n```\n\nThe author of a Lurch Application must also have the application call this\nplugin's `import` function immediately after a document is loaded, on the\ndependency data stored in that document's metadata.  This can happen as part\nof the `loadMetaData` event, for example.\n\nWhenever any dependency is added, removed, or updated, a\n`dependenciesChanged` event is fired in the editor, with no parameters.  Any\naspect of the current document that the app needs to update or recompute\nbased on the fact that the dependencies list or data has changed should be\ndone in response to that event.  That event will (rarely) fire several times\nin succession.  This happens only if `update` was called in this plugin in\na document for which many dependencies have new versions that need to be\nimported, replacing the cached data from old versions.  See the `update`\nfunction below for details.\n\nThis plugin provides functionality for constructing a user interface for\nediting a document's dependency list.  That functionality is responsible for\nimporting other documents' `exports` data into the current document's\n`dependencies` array, and managing the structure of that array.  The\nrecursive embedding show in the examples above is handled by this plugin.\n\nApplications need to give users access to that interface, using the methods\ndocumented in the [Presenting a UI](#presenting-a-ui) section, below.\n\n# `Dependencies` class\n\nWe begin by defining a class that will contain all the information needed\nabout the current document's dependencies.  An instance of this class will\nbe stored as a member in the TinyMCE editor object.\n\nThis convention is adopted for all TinyMCE plugins in the Lurch project;\neach will come with a class, and an instance of that class will be stored as\na member of the editor object when the plugin is installed in that editor.\nThe presence of that member indicates that the plugin has been installed,\nand provides access to the full range of functionality that the plugin\ngrants to that editor.\n\n    class Dependencies\n\n## Constructor and static members\n\nWe construct new instances of the Dependencies class as follows, and these\nare inserted as members of the corresponding editor by means of the code\n[below, under \"Installing the Plugin.\"](#installing-the-plugin)\n\n        constructor: ( @editor ) ->\n            @length = 0\n\nThis function takes a path into an in-browser filesystem and extracts the\nmetadata from the file, returning it.  It assumes that the filesystem into\nwhich it should look is the local one provided by [the Storage\nPlugin](storageplugin.litcoffee), and fetches the name of the filesystem\nfrom there.\n\n        getFileMetadata: ( filepath, filename, success, failure ) ->\n            if filename is null then return\n            if filepath is null then filepath = '.'\n            fullpath = filepath.concat [ filename ]\n            @editor.Storage.directRead 'browser storage', fullpath,\n                success, failure\n\n## Importing, exporting, and updating\n\nTo make this plugin aware of the dependency information in the current\ndocument, call this function.  Pass to it the `dependencies` member of the\ndocument's metadata, which must be of the form documented at the top of this\nfile.  It uses JSON methods to make deep copies of the parameter's entries,\nrather than re-using the same objects.\n\nThis function gives this plugin a `length` member, and storing the entries\nof the `dependencies` array as entries 0, 1, 2, etc. of this plugin object.\nTherefore clients can treat the plugin itself as an array, writing code like\n`tinymce.activeEditor.Dependencies[2].address`, for example, or looping\nthrough all dependencies in this object based on its length.\n\nAfter importing dependencies, this function also updates them to their\nlatest versions.  (See the `update` function defined further below for\ndetails.)  Note that `update` may result in many `dependenciesChanged`\nevents.\n\n        import: ( dependencies ) ->\n            for i in [0...@length] then delete @[i]\n            for i in [0...@length = dependencies.length]\n                @[i] = JSON.parse JSON.stringify dependencies[i]\n            @update()\n\nThe following function is the inverse of the previous.  It, too, makes deep\ncopies using JSON methods.\n\n        export: -> ( JSON.parse JSON.stringify @[i] for i in [0...@length] )\n\nThis function updates a dependency to its most recent version.  If the\ndependency is not reachable at the time this function is invoked or if its\nlast modified date is newer than the date stored in this plugin, this\nfunction does not update the dependency.  The parameter indicates the\ndependency to update by index.  If no index is given, then all dependencies\nare updated, one at a time, in order.\n\nNote that update may not complete its task immediately.  The function may\nreturn while files are still being fetched from the wiki, and callback\nfunctions waiting to be run.  (Parts of this function are asynchronous.)\n\nAny time the dependency data actually changes, a `dependenciesChanged` event\nis fired in the editor.  This may result in many such events, if this\nfunction is called with no argument, and depending on how many dependencies\nneed updating.\n\n        update: ( index ) ->\n\nHandle the no-parameter case first, as a loop.\n\n            if not index? then return ( @update i for i in [0...@length] )\n\nEnsure that the parameter makes sense.\n\n            return unless index >= 0 and index < @length\n            dependency = @[index]\n\nA `file://`-type dependency is in the in-browser filesystem provided by the\nStorage plugin.  It does not have last modified dates, so we always update\nfile dependencies.\n\n            if dependency.address[...7] is 'file://'\n                splitPoint = dependency.address.lastIndexOf '/'\n                filename = dependency.address[splitPoint...]\n                filepath = dependency.address[7...splitPoint]\n                @getFileMetadata filepath, filename, ( result ) =>\n                    newData = result.exports\n                    oldData = @[index]\n                    if JSON.stringify( newData ) isnt JSON.stringify oldData\n                        @[index].data = newData\n                        @[index].date = new Date\n                        @editor.fire 'dependenciesChanged'\n                , ( error ) => # pass\n\nA `wiki://`-type dependency is in the wiki.  It does have last modified\ndates, so we check to see if updating is necessary\n\n            else if dependency.address[...7] is 'wiki://'\n                pageName = dependency.address[7...]\n                @editor.MediaWiki.getPageTimestamp pageName,\n                ( result, error ) =>\n                    return unless result?\n                    lastModified = new Date result\n                    currentVersion = new Date dependency.date\n                    return unless lastModified > currentVersion\n                    @editor.MediaWiki.getPageMetadata pageName,\n                    ( metadata ) =>\n                        if metadata? and JSON.stringify( @[index] ) isnt \\\n                                JSON.stringify metadata.exports\n                            @[index].data = metadata.exports\n                            @[index].date = lastModified\n                            @editor.fire 'dependenciesChanged'\n\nNo other types of dependencies are supported (yet), but we fire a change\nevent in such cases (which includes virtual dependencies written in\n[Lurch shorthand](main-app-import-export-solo.litcoffee#lurch-shorthand)).\n\n            else\n                @editor.fire 'dependenciesChanged'\n\n## Adding and removing dependencies\n\nAdding a dependency is an inherently asynchronous activity, because the\ndependency may need to be fetched from the wiki.  Thus this function takes\na dependency address and a callback function.  The new dependency is always\nappended to the end of the list.\n\nThe address must be of a type supported by `update` (see above).  The\ncallback will be passed result and an error, exactly one of which will be\nnon-null, depending on success or failure.\n\nIf the callback is null, it will not be used, but the dependency will still\nbe added.  Whether the callback is null or not, this function ends by firing\nthe `dependenciesChanged` event in the editor if and only if the dependency\nwas successfully added.\n\n        add: ( address, callback ) ->\n            if address[...7] is 'file://'\n                splitPoint = address.lastIndexOf '/'\n                filename = address[splitPoint...]\n                filepath = address[7...splitPoint]\n                try\n                    @getFileMetadata filepath, filename, ( result ) =>\n                        newData = result.exports\n                        @[@length++] =\n                            address : address\n                            data : newData\n                            date : new Date\n                        callback? newData, null\n                        @editor.fire 'dependenciesChanged'\n                    , ( error ) =>\n                        callback? null, error\n                catch e\n                    callback? null, e\n            else if address[...7] is 'wiki://'\n                pageName = address[7...]\n                @editor.MediaWiki.getPageTimestamp pageName,\n                ( result, error ) =>\n                    if not result?\n                        return callback? null,\n                            'Could not get wiki page timestamp'\n                    @editor.MediaWiki.getPageMetadata pageName,\n                    ( metadata ) =>\n                        if not metadata?\n                            return callback? null,\n                                'Could not access wiki page'\n                        @[@length++] =\n                            address : address\n                            data : metadata.exports\n                            date : new Date result\n                        callback? metadata.exports, null\n                        @editor.fire 'dependenciesChanged'\n\nTo remove a dependency (which should happen only in reponse to user input),\ncall this function.  It updates the indices and length of this plugin, much\nlike `splice` does for JavaScript arrays, and then fires a\n`dependenciesChanged` event.\n\n        remove: ( index ) ->\n            return unless index >= 0 and index < @length\n            @[i] = @[i+1] for i in [index...@length-1]\n            delete @[--@length]\n            @editor.fire 'dependenciesChanged'\n\n## Presenting a UI\n\nThe following method fills a DIV (probably in a pop-up dialog) with the user\ninterface elements necessary for viewing and editing the dependencies stored\nin this plugin.  It also installs event handlers for the buttons it creates,\nso that they will respond to clicks by calling methods in this plugin, and\nupdating that user interface accordingly.\n\n        installUI: ( div ) ->\n            parts = [ ]\n            for dependency, index in @\n                parts.push @editor.Settings.UI.generalPair \\\n                    dependency.address,\n                    @editor.Settings.UI.button( 'Remove',\n                        \"dependencyRemove#{index}\" ),\n                    \"dependencyRow#{index}\", 80, 'center'\n            if @length is 0\n                parts.push @editor.Settings.UI.info '(no dependencies)'\n            parts.push @editor.Settings.UI.info \\\n                \"#{@editor.Settings.UI.button 'Add file dependency',\n                    'dependencyAddFile'}\n                 #{@editor.Settings.UI.button 'Add wiki page dependency',\n                    'dependencyAddWiki'}\"\n            div.innerHTML = parts.join '\\n'\n            elt = ( id ) -> div.ownerDocument.getElementById id\n            for dependency, index in @\n                elt( \"dependencyRemove#{index}\" ).addEventListener 'click',\n                    do ( index ) => => @remove index ; @installUI div\n            elt( 'dependencyAddFile' ).addEventListener 'click', =>\n                @editor.Storage.tryToOpen ( path, file ) =>\n                    if file?\n                        if path? then path += '/' else path = ''\n                        @add \"file://#{path}#{file}\", ( result, error ) =>\n                            if error?\n                                @editor.Dialogs.alert\n                                    title : 'Error adding dependency'\n                                    message : error\n                            else\n                                @installUI div\n            elt( 'dependencyAddWiki' ).addEventListener 'click', =>\n                if url = prompt 'Enter the wiki page name of the dependency\n                        to add.', 'Example Page Name'\n                    @add \"wiki://#{url}\", ( result, error ) =>\n                        if error?\n                            @editor.Dialogs.alert\n                                title : 'Error adding dependency'\n                                message : error\n                        else\n                            @installUI div\n\n# Installing the plugin\n\nThe plugin, when initialized on an editor, places an instance of the\n`Dependencies` class inside the editor, and points the class at that editor.\n\n    tinymce.PluginManager.add 'dependencies', ( editor, url ) ->\n        editor.Dependencies = new Dependencies editor\n\n\n# Dialogs Plugin\n\nThis plugin adds to TinyMCE some much-needed convenience functions for\nshowing dialog boxes and receiving callbacks from events within them.\n\nAll of these functions will be installed in an object called `Dialogs` in\nthe editor itself.  So, for example, you might call one via code like the\nfollowing.\n```javascript\ntinymce.activeEditor.Dialogs.alert( {\n    title : 'Alert!'\n    message : 'Content of the alert box here.',\n    callback : function ( event ) { console.log( event ); }\n} );\n```\n\n    Dialogs = { }\n\n## Generic function\n\nThe following functions give every dialog in this plugin the ability to\ninclude buttons and links, together with an on-click handler\n`options.onclick`.\n\nThe first extends any HTML code for the interior of a dialog with the\nnecessary script for passing all events from links and buttons out to the\nparent window.  It also converts the resulting page into the object URL for\na blob, so that it can be passed to the TinyMCE dialog-creation routines.\n\n    prepareHTML = ( html ) ->\n        script = ->\n            install = ( tagName, eventName ) ->\n                for element in document.getElementsByTagName tagName\n                    element.addEventListener eventName, ( event ) ->\n                        parent.postMessage\n                            value : event.currentTarget.value\n                            id : event.currentTarget.getAttribute 'id'\n                        , '*'\n            install 'a', 'click'\n            install 'input', 'click'\n            install 'input', 'input'\n            for element in document.getElementsByTagName 'input'\n                if 'file' is element.getAttribute 'type'\n                    element.addEventListener 'change', ->\n                        reader = new FileReader()\n                        reader.onload = ( event ) =>\n                            parent.postMessage\n                                value : event.target.result\n                                id : @getAttribute 'id'\n                            , '*'\n                        reader.readAsDataURL @files[0]\n            document.getElementsByTagName( 'input' )[0]?.focus()\n        window.objectURLForBlob window.makeBlob \\\n            html + \"<script>(#{script})()</script>\",\n            'text/html;charset=utf-8'\n\nThe second installs in the top-level window a listener for the events\nposted from the interior of the dialog.  It then calls the given event\nhandler with the ID of the element clicked.  It also makes sure that when\nthe dialog is closed, this event handler will be uninstalled\n\n    installClickListener = ( handler ) ->\n        innerHandler = ( event ) -> handler event.data\n        window.addEventListener 'message', innerHandler, no\n        tinymce.activeEditor.windowManager.getWindows()[0].on 'close', ->\n            window.removeEventListener 'message', innerHandler\n\n## Alert box\n\nThis function shows a simple alert box, with a callback when the user\nclicks OK.  The message can be text or HTML.\n\n    Dialogs.alert = ( options ) ->\n        dialog = tinymce.activeEditor.windowManager.open\n            title : options.title ? ' '\n            url : prepareHTML options.message\n            width : options.width ? 400\n            height : options.height ? 300\n            buttons : [\n                type : 'button'\n                text : 'OK'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    dialog.close()\n                    options.callback? event\n            ]\n        if options.onclick then installClickListener options.onclick\n\n## Confirm dialog\n\nThis function is just like the alert box, but with two callbacks, one for OK\nand one for Cancel, named `okCallback` and `cancelCallback`, respectively.\nThe user can rename the OK and Cancel buttons by specfying strings in the\noptions object with the 'OK' and 'Cancel' keys.\n\n\n    Dialogs.confirm = ( options ) ->\n        dialog = tinymce.activeEditor.windowManager.open\n            title : options.title ? ' '\n            url : prepareHTML options.message\n            width : options.width ? 400\n            height : options.height ? 300\n            buttons : [\n                type : 'button'\n                text : options.Cancel ? 'Cancel'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    dialog.close()\n                    options.cancelCallback? event\n            ,\n                type : 'button'\n                text : options.OK ? 'OK'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    dialog.close()\n                    options.okCallback? event\n            ]\n        if options.onclick then installClickListener options.onclick\n\n## Prompt dialog\n\nThis function is just like the prompt dialog in JavaScript, but it uses two\ncallbacks instead of a return value.  They are named `okCallback` and\n`cancelCallback`, as in [the confirm dialog](#confirm-dialog), but they\nreceive the text in the dialog's input as a parameter.\n\n    Dialogs.prompt = ( options ) ->\n        value = if options.value then \" value='#{options.value}'\" else ''\n        options.message +=\n            \"<p><input type='text' #{value} id='promptInput' size=40/></p>\"\n        lastValue = options.value ? ''\n        dialog = tinymce.activeEditor.windowManager.open\n            title : options.title ? ' '\n            url : prepareHTML options.message\n            width : options.width ? 300\n            height : options.height ? 200\n            buttons : [\n                type : 'button'\n                text : options.Cancel ? 'Cancel'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    dialog.close()\n                    options.cancelCallback? lastValue\n            ,\n                type : 'button'\n                text : options.OK ? 'OK'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    dialog.close()\n                    options.okCallback? lastValue\n            ]\n        installClickListener ( data ) ->\n            if data.id is 'promptInput' then lastValue = data.value\n\n## File upload dialog\n\nThis function allows the user to choose a file from their local machine to\nupload.  They can do so with a \"choose\" button or by dragging the file into\nthe dialog.  The dialog then calls its `okCallback` with the contents of the\nuploaded file, in the format of a data URL, or calls its `cancelCallback`\nwith no parameter.\n\n    Dialogs.promptForFile = ( options ) ->\n        value = if options.value then \" value='#{options.value}'\" else ''\n        types = if options.types then \" accept='#{options.types}'\" else ''\n        options.message +=\n            \"<p><input type='file' #{value} id='promptInput'/></p>\"\n        lastValue = null\n        dialog = tinymce.activeEditor.windowManager.open\n            title : options.title ? ' '\n            url : prepareHTML options.message\n            width : options.width ? 400\n            height : options.height ? 100\n            buttons : [\n                type : 'button'\n                text : options.Cancel ? 'Cancel'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    dialog.close()\n                    options.cancelCallback?()\n            ,\n                type : 'button'\n                text : options.OK ? 'OK'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    dialog.close()\n                    options.okCallback? lastValue\n            ]\n        installClickListener ( data ) ->\n            if data.id is 'promptInput' then lastValue = data.value\n\n## Code editor dialog\n\n    Dialogs.codeEditor = ( options ) ->\n        setup = ( language ) ->\n            window.codeEditor = CodeMirror.fromTextArea \\\n                document.getElementById( 'editor' ),\n                lineNumbers : yes\n                fullScreen : yes\n                autofocus : yes\n                theme : 'base16-light'\n                mode : language\n            handler = ( event ) ->\n                if event.data is 'getEditorContents'\n                    parent.postMessage window.codeEditor.getValue(), '*'\n            window.addEventListener 'message', handler, no\n        html = \"<html><head>\n            <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/codemirror.min.css'>\n            <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/theme/base16-light.min.css'>\n            <script src='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/codemirror.min.js'></script>\n            <script src='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/addon/display/fullscreen.min.js'></script>\n            <script src='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.17.0/mode/javascript/javascript.min.js'></script>\n            </head>\n            <body style='margin: 0px;'>\n            <textarea id='editor'>#{options.value ? ''}</textarea>\n            <script>\n                (#{setup})(\\\"#{options.language ? 'javascript'}\\\")\n            </script>\n            </body></html>\"\n        whichCallback = null\n        dialog = tinymce.activeEditor.windowManager.open\n            title : options.title ? 'Code editor'\n            url : window.objectURLForBlob window.makeBlob html,\n                'text/html;charset=utf-8'\n            width : options.width ? 700\n            height : options.height ? 500\n            buttons : [\n                type : 'button'\n                text : options.Cancel ? 'Discard'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    whichCallback = options.cancelCallback\n                    dialog.getContentWindow().postMessage \\\n                        'getEditorContents', '*'\n            ,\n                type : 'button'\n                text : options.OK ? 'Save'\n                subtype : 'primary'\n                onclick : ( event ) ->\n                    whichCallback = options.okCallback\n                    dialog.getContentWindow().postMessage \\\n                        'getEditorContents', '*'\n            ]\n        handler = ( event ) ->\n            dialog.close()\n            whichCallback? event.data\n        window.addEventListener 'message', handler, no\n        dialog.on 'close', -> window.removeEventListener 'message', handler\n\n## Waiting dialog\n\nThis function shows a dialog with no buttons you can use for closing it. You\nshould pass as parameter an options object, just as with every other\nfunction in this plugin, but in this case it must contain a member called\n`work` that is a function that will do whatever work you want done while the\ndialog is shown.  That function will *receive* as its one parameter a\nfunction to call when the work is done, to close this dialog.\n\nExample use:\n```javascript\ntinymce.activeEditor.Dialogs.waiting( {\n    title : 'Loading file'\n    message : 'Please wait...',\n    work : function ( done ) {\n        doLengthyAsynchronousTask( param1, param2, function ( result ) {\n            saveMyResult( result );\n            done();\n        } );\n    }\n} );\n```\n\n    Dialogs.waiting = ( options ) ->\n        dialog = tinymce.activeEditor.windowManager.open\n            title : options.title ? ' '\n            url : prepareHTML options.message\n            width : options.width ? 300\n            height : options.height ? 100\n            buttons : [ ]\n        if options.onclick then installClickListener options.onclick\n        options.work -> dialog.close()\n\n# Installing the plugin\n\n    tinymce.PluginManager.add 'dialogs', ( editor, url ) ->\n        editor.Dialogs = Dialogs\n\n\n# Download/Upload Plugin for [TinyMCE](http://www.tinymce.com)\n\nThis plugin lets users download the contents of their current document as\nHTML, or upload any HTML file as new contents to overwrite the current\ndocument.  It assumes that TinyMCE has been loaded into the global\nnamespace, so that it can access it.\n\nIf you have the [Storage Plugin](storageplugin.litcoffee) also enabled in\nthe same TinyMCE editor instance, it will make use of that plugin in\nseveral ways.\n\n * to ensure that editor contents are saved, if desired, before overwriting\n   them with new, uploaded content\n * to determine the filename used for the download, when available\n * to embed metadata in the content before downloading, and extract metadata\n   after uploading\n\n# `DownloadUpload` class\n\nWe begin by defining a class that will contain all the information needed\nregarding downloading and uploading HTML content.  An instance of this class\nwill be stored as a member in the TinyMCE editor object.\n\nThis convention is adopted for all TinyMCE plugins in the Lurch project;\neach will come with a class, and an instance of that class will be stored as\na member of the editor object when the plugin is installed in that editor.\nThe presence of that member indicates that the plugin has been installed,\nand provides access to the full range of functionality that the plugin\ngrants to that editor.\n\n    class DownloadUpload\n\n## Constructor\n\nAt construction time, we install in the editor the download and upload\nactions that can be added to the File menu and/or toolbar.\n\n        constructor: ( @editor ) ->\n            control = ( name, data ) =>\n                buttonData =\n                    icon : data.icon\n                    shortcut : data.shortcut\n                    onclick : data.onclick\n                    tooltip : data.tooltip\n                key = if data.icon? then 'icon' else 'text'\n                buttonData[key] = data[key]\n                @editor.addButton name, buttonData\n                @editor.addMenuItem name, data\n            control 'download',\n                text : 'Download'\n                icon : 'arrowdown2'\n                context : 'file'\n                tooltip : 'Download this document'\n                onclick : => @downloadDocument()\n            control 'upload',\n                text : 'Upload'\n                icon : 'arrowup2'\n                context : 'file'\n                tooltip : 'Upload new document'\n                onclick : => @uploadDocument()\n\n## Event handlers\n\nThe following functions handle the two events that this class provides, the\ndownload event and the upload event.\n\nThe download event constructs a blob, fills it with the contents of the\neditor as HTML data, and starts a download.  The only unique step in this\nprocess is that we attempt to get a filename from the\n[Storage Plugin](storageplugin.litcoffee), if one is available.  If not,\nwe use \"untitled.html.\"\n\n        downloadDocument: ->\n            html = @editor.Storage.embedMetadata @editor.getContent(),\n                @editor.Settings.document.metadata\n            blob = new Blob [ html ], type : 'text/html'\n            link = document.createElement 'a'\n            link.setAttribute 'href', URL.createObjectURL blob\n            link.setAttribute 'download',\n                editor.Storage.filename or 'untitled.html'\n            link.click()\n            URL.revokeObjectURL link.getAttribute 'href'\n\nThe upload event first checks to be sure that the contents of the editor are\nsaved, or the user does not mind overwriting them.  This code imitates the\nFile > New handler in the [Storage Plugin](storageplugin.litcoffee).\nThis function calls the `letUserUpload` function to do the actual uploading;\nthat function is defined further below in this file.\n\n        uploadDocument: ->\n            return @letUserUpload() unless editor.Storage.documentDirty\n            @editor.windowManager.open {\n                title : 'Save first?'\n                buttons : [\n                    text : 'Save'\n                    onclick : =>\n                        editor.Storage.tryToSave ( success ) =>\n                            if success then @letUserUpload()\n                        @editor.windowManager.close()\n                ,\n                    text : 'Discard'\n                    onclick : =>\n                        @editor.windowManager.close()\n                        @letUserUpload()\n                ,\n                    text : 'Cancel'\n                    onclick : => @editor.windowManager.close()\n                ]\n            }\n\nThe following function handles the case where the user has agreed to save or\ndiscard the current contents of the editor, so they're ready to upload a new\nfile to overwrite it.  We present here the user interface for doing so, and\nhandle the upload process.\n\n        letUserUpload: ->\n            @editor.Dialogs.promptForFile\n                title : 'Choose file'\n                message : 'Choose an HTML file to upload into the editor.'\n                okCallback : ( fileAsDataURL ) =>\n                    html = atob fileAsDataURL.split( ',' )[1]\n                    { metadata, document } =\n                        @editor.Storage.extractMetadata html\n                    @editor.setContent document\n                    if metadata?\n                        @editor.Settings.document.metadata = metadata\n                    @editor.focus()\n\n# Installing the plugin\n\n    tinymce.PluginManager.add 'downloadupload', ( editor, url ) ->\n        editor.DownloadUpload = new DownloadUpload editor\n\n\n# Groups Plugin for [TinyMCE](http://www.tinymce.com)\n\nThis plugin adds the notion of \"groups\" to a TinyMCE editor.  Groups are\ncontiguous sections of the document, often nested but not otherwise\noverlapping, that can be used for a wide variety of purposes.  This plugin\nprovides the following functionality for working with groups in a document.\n * defines the `Group` and `Groups` classes\n * provides methods for installing UI elements for creating and interacting\n   with groups in the document\n * shows groups visually on screen in a variety of ways\n * calls update routines whenever group contents change, so that they can be\n   updated/processed\n\nIt assumes that TinyMCE has been loaded into the global namespace, so that\nit can access it.  It also requires [the overlay\nplugin](overlayplugin.litcoffee) to be loaded in the same editor.\n\nAll changes made to the document by the user are tracked so that appropriate\nevents can be called in this plugin to update group objects.\n\n# Global functions\n\nThe following two global functions determine how we construct HTML to\nrepresent group boundaries (called \"groupers\") and how we decipher such HTML\nback into information about the groupers.\n\nFirst, how to create HTML representing a grouper.  The parameters are as\nfollows:  `typeName` is a string naming the type of the group, which must be\n[registered](#registering-group-types); `image` is the path to the image\nthat will be used to represent this grouper; `openClose` must be either the\nstring \"open\" or the string \"close\"; `id` is a nonnegative integer unique to\nthis group; `hide` is a boolean representing whether the grouper should be\ninvisible in the document.\n\n    grouperHTML = ( typeName, openClose, id, hide = yes, image ) ->\n        hide = if hide then ' hide' else ''\n        image ?= \"images/red-bracket-#{openClose}.png\"\n        \"<img src='#{image}' class='grouper #{typeName}#{hide}'\n              id='#{openClose}#{id}'>\"\n    window.grouperHTML = grouperHTML\n\nSecond, how to extract group information from a grouper.  The two pieces of\ninformation that are most important to extract are whether the grouper is an\nopen grouper or close grouper, and what its ID is.  This routine extracts\nboth and returns them in an object with the keys `type` and `id`.  If the\ndata is not available in the expected format, it returns `null`.\n\n    grouperInfo = ( grouper ) ->\n        info = /^(open|close)([0-9]+)$/.exec grouper?.getAttribute? 'id'\n        if not info then return null\n        result = openOrClose : info[1], id : parseInt info[2]\n        more = /^grouper ([^ ]+)/.exec grouper?.getAttribute? 'class'\n        if more then result.type = more[1]\n        result\n    window.grouperInfo = grouperInfo\n\nA few functions in this module make use of a tool for computing the default\neditor style as a CSS style string (e.g., \"font-size:16px;\").  That function\nis defined here.\n\n    createStyleString = ( styleObject = window.defaultEditorStyles ) ->\n        result = [ ]\n        for own key, value of styleObject\n            newkey = ''\n            for letter in key\n                if letter.toUpperCase() is letter then newkey += '-'\n                newkey += letter.toLowerCase()\n            result.push \"#{newkey}:#{value};\"\n        result.join ' '\n\nThe main function that uses the previous function is one for converting\nwell-formed HTML into an image URL.\n\n    htmlToImage = ( html ) ->\n        objectURLForBlob svgBlobForHTML html, createStyleString()\n\nA few functions in this module make use of a tool for computing a CSS style\nstring describing the default font size and family of an element.  That\nfunction is defined here.\n\n    createFontStyleString = ( element ) ->\n        style = element.ownerDocument.defaultView.getComputedStyle element\n        \"font-size:#{style.fontSize}; font-family:#{style.fontFamily};\"\n\n# `Group` class\n\nThis file defines two classes, this one called `Group` and another\n([below](#groups-class)) called `Groups`.  They are obviously quite\nsimilarly named, but here is the distinction:  An instance of the `Group`\nclass represents a single section of text within the document that the user\nhas \"grouped\" together.  Thus each document may have zero or more such\ninstances.  Each editor, however, gets only one instance of the `Groups`\nclass, which manages all the `Group` instances in that editor's document.\n\n## Group constructor\n\n    class Group\n\nThe constructor takes as parameters the two DOM nodes that are its open and\nclose groupers (i.e., group boundary markers), respectively.  It does not\nvalidate that these are indeed open and close grouper nodes, but just stores\nthem for later lookup.\n\nThe final parameter is an instance of the Groups class, which is the plugin\ndefined in this file.  Thus each group will know in which environment it\nsits, and be able to communicate with that environment.  If that parameter\nis not provided, the constructor will attempt to correctly detect it, but\nproviding the parameter is more efficient.\n\nWe call the contents changed event as soon as the group is created, because\nany newly-created group needs to have its contents processed for the first\ntime (assuming a processing routine exists, otherwise the call does\nnothing).  We pass \"yes\" as the second parameter to indicate that this is\nthe first call ever to `contentsChanged`, and thus the group type may wish\nto do some initial setup.\n\n        constructor: ( @open, @close, @plugin ) ->\n            if not @plugin?\n                for editor in tinymce.editors\n                    if editor.getDoc() is @open.ownerDocument\n                        @plugin = editor.Groups\n                        break\n            @contentsChanged yes, yes\n\n## Core group data\n\nThis method returns the ID of the group, if it is available within the open\ngrouper.\n\n        id: => grouperInfo( @open )?.id ? null\n\nThe first of the following methods returns the name of the type of the\ngroup, as a string.  The second returns the type as an object, as long as\nthe type exists in the plugin stored in `@plugin`.\n\n        typeName: => grouperInfo( @open )?.type\n        type: => @plugin?.groupTypes?[@typeName()]\n\n## Group attributes\n\nWe provide the following four simple methods for getting and setting\narbitrary data within a group.  Clients should use these methods rather than\nwrite to fields in a group instance itself, because these (a) guarantee no\ncollisions with existing properties/methods, and (b) mark that group (and\nthus the document) dirty, and ensure that changes to a group's data bring\nabout any recomputation/reprocessing of that group in the document.\n\nBecause we use HTML data attributes to store the data, the keys must be\nalphanumeric, optionally with dashes and/or underscores.  Furthermore, the\ndata must be able to be amenable to JSON stringification.\n\nIMPORTANT:  If you call `set()` in a group, the changes you make will NOT be\nstored on the TinyMCE undo/redo stack.  If you want your changes stored on\nthat stack, you should make the changes inside a function passed to the\nTinyMCE Undo Manager's [transact](https://www.tinymce.com/docs/api/tinymce/tinymce.undomanager/#transact) method.\n\nYou may or may not wish to have your changes stored on the undo/redo stack.\nIn general, if the change you're making to the group is in direct and\nimmediate response to the user's actions, then it should be on the undo/redo\nstack, so that the user can change their mind.  However, if the change is\nthe result of a background computation, which was therefore not in direct\nresponse to one of the user's actions, they will probably not expect to be\nable to undo it, and thus you should not place the change on the undo/redo\nstack.\n\n        set: ( key, value ) =>\n            if not /^[a-zA-Z0-9-_]+$/.test key then return\n            toStore = JSON.stringify [ value ]\n            if @open.getAttribute( \"data-#{key}\" ) isnt toStore\n                @open.setAttribute \"data-#{key}\", toStore\n                if @plugin?\n                    @plugin.editor.fire 'change'\n                    @plugin.editor.isNotDirty = no\n                    @contentsChanged()\n                if key is 'openDecoration' or key is 'closeDecoration'\n                    @updateGrouper key[...-10]\n                if key is 'openHoverText' or key is 'closeHoverText'\n                    grouper = @[key[...-9]]\n                    for attr in [ 'title', 'alt' ] # browser differences\n                        grouper.setAttribute attr, \"#{value}\"\n        get: ( key ) =>\n            try\n                JSON.parse( @open.getAttribute \"data-#{key}\" )[0]\n            catch e\n                undefined\n        keys: => Object.keys @open.dataset\n        clear: ( key ) =>\n            if not /^[a-zA-Z0-9-_]+$/.test key then return\n            if @open.getAttribute( \"data-#{key}\" )?\n                @open.removeAttribute \"data-#{key}\"\n                if @plugin?\n                    @plugin.editor.fire 'change'\n                    @plugin.editor.isNotDirty = no\n                    @contentsChanged()\n                if key is 'openDecoration' or key is 'closeDecoration'\n                    @updateGrouper key[...-10]\n                if key is 'openHoverText' or key is 'closeHoverText'\n                    grouper = @[key[...-9]]\n                    for attr in [ 'title', 'alt' ] # browser differences\n                        grouper.removeAttribute attr\n\nThe `set` and `clear` functions above call an update routine if the\nattribute changed was the decoration data for a grouper.  This update\nroutine recomputes the appearance of that grouper as an image, and stores it\nin the `src` attribute of the grouper itself (which is an `img` element).\nWe implement that routine here.\n\nThis routine is also called from `hideOrShowGroupers`, defined later in this\nfile.  It can accept any of three parameter types, the string \"open\", the\nstring \"close\", or an actual grouper element from the document that is\neither the open or close grouper for this group.\n\n        updateGrouper: ( openOrClose ) =>\n            if openOrClose is @open then openOrClose = 'open'\n            if openOrClose is @close then openOrClose = 'close'\n            if openOrClose isnt 'open' and openOrClose isnt 'close'\n                return\n            jquery = $ grouper = @[openOrClose]\n            if ( decoration = @get \"#{openOrClose}Decoration\" )?\n                jquery.addClass 'decorate'\n            else\n                jquery.removeClass 'decorate'\n                decoration = ''\n            html = if jquery.hasClass 'hide' then '' else \\\n                @type()?[\"#{openOrClose}ImageHTML\"]\n            if openOrClose is 'open'\n                html = decoration + html\n            else\n                html += decoration\n            window.base64URLForBlob window.svgBlobForHTML( html,\n                createFontStyleString grouper ), ( base64 ) =>\n                    if grouper.getAttribute( 'src' ) isnt base64\n                        grouper.setAttribute 'src', base64\n                        @plugin?.editor.Overlay?.redrawContents()\n\n## Group contents\n\nWe will need to be able to query the contents of a group, so that later\ncomputations on that group can use its contents to determine how to act.  We\nprovide functions for fetching the contents of the group as plain text, as\nan HTML `DocumentFragment` object, or as an HTML string.\n\n        contentAsText: => @innerRange()?.toString()\n        contentAsFragment: => @innerRange()?.cloneContents()\n        contentAsHTML: =>\n            if not fragment = @contentAsFragment() then return null\n            tmp = @open.ownerDocument.createElement 'div'\n            tmp.appendChild fragment\n            tmp.innerHTML\n\nYou can also fetch the exact sequence of Nodes between the two groupers\n(including only the highest-level ones, not their children when that would\nbe redundant) using the following routine.\n\n        contentNodes: =>\n            result = [ ]\n            walk = @open\n            while walk?\n                if strictNodeOrder walk, @close\n                    if strictNodeOrder @open, walk then result.push walk\n                    if walk.nextSibling? then walk = walk.nextSibling \\\n                        else walk = walk.parentNode\n                    continue\n                if strictNodeOrder @close, walk\n                    console.log 'Warning!! walked past @close...something\n                        is wrong with this loop'\n                    break\n                if walk is @close then break else walk = walk.childNodes[0]\n            result\n\nWe can also set the contents of a group with the following function.  This\nfunction can only work if `@plugin` is a `Groups` class instance.  This\nactually accepts not only plain text, but HTML as well.\n\n        setContentAsText: ( text ) =>\n            if not inside = @innerRange() then return\n            @plugin?.editor.selection.setRng inside\n            @plugin?.editor.selection.setContent text\n\n## Group ranges\n\nThe above functions rely on the `innerRange()` function, defined below, with\na corresponding `outerRange` function for the sake of completeness.  We use\na `try`/`catch` block because it's possible that the group has been removed\nfrom the document, and thus we can no longer set range start and end points\nrelative to the group's open and close groupers.\n\n        innerRange: =>\n            range = @open.ownerDocument.createRange()\n            try\n                range.setStartAfter @open\n                range.setEndBefore @close\n                range\n            catch e then null\n        outerRange: =>\n            range = @open.ownerDocument.createRange()\n            try\n                range.setStartBefore @open\n                range.setEndAfter @close\n                range\n            catch e then null\n\nWe then create analogous functions for creating ranges that include the text\nbefore or after the group.  These ranges extend to the next grouper in the\ngiven direction, whether it be an open or close grouper of any type.\nSpecifically,\n * The `rangeBefore` range always ends immediately before this group's open\n   grouper, and\n   * if this group is the first in its parent, the range begins immediately\n     after the parent's open grouper;\n   * otherwise it begins immediately after its previous sibling's close\n     grouper.\n   * But if this is the first top-level group in the document, then the\n     range begins at the start of the document.\n * The `rangeAfter` range always begins immediately after this group's close\n   grouper, and\n   * if this group is the last in its parent, the range ends immediately\n     before the parent's close grouper;\n   * otherwise it ends immediately before its next sibling's open grouper.\n   * But if this is the last top-level group in the document, then the\n     range ends at the end of the document.\n\n        rangeBefore: =>\n            range = ( doc = @open.ownerDocument ).createRange()\n            try\n                range.setEndBefore @open\n                if prev = @previousSibling()\n                    range.setStartAfter prev.close\n                else if @parent\n                    range.setStartAfter @parent.open\n                else\n                    range.setStartBefore doc.body.childNodes[0]\n                range\n            catch e then null\n        rangeAfter: =>\n            range = ( doc = @open.ownerDocument ).createRange()\n            try\n                range.setStartAfter @close\n                if next = @nextSibling()\n                    range.setEndBefore next.open\n                else if @parent\n                    range.setEndBefore @parent.close\n                else\n                    range.setEndAfter \\\n                        doc.body.childNodes[doc.body.childNodes.length-1]\n                range\n            catch e then null\n\n## Working with whole groups\n\nYou can remove an entire group from the document using the following method.\nIt does two things:  First, it disconnects this group from any group to\nwhich it's connected.  Second, relying on the `contentNodes` member above,\nit removes all the nodes returned by that member.\n\nThis function requires that the `@plugin` member exists, or it does nothing.\nIt also tells the TinyMCE instance that this should all be considered part\nof one action for the purposes of undo/redo.\n\n        remove: =>\n            if not @plugin then return\n            @disconnect @plugin[cxn[0]] for cxn in @connectionsIn()\n            @disconnect @plugin[cxn[1]] for cxn in @connectionsOut()\n            @plugin.editor.undoManager.transact =>\n                ( $ [ @open, @contentNodes()..., @close ] ).remove()\n\nWhen a group has been removed from a document in a different way than the\nabove function (such as replacing its entire content and boundaries with\nother text in the editor) the group object may persist in JavaScript memory,\nand we would like a way to detect whether a group is \"stale\" in such a way.\nThe following function does so.  Note that it always returns false if the\ngroup does not have a plugin registered.\n\n        stillInEditor: =>\n            walk = @open\n            while @plugin? and walk?\n                if walk is @plugin.editor.getDoc() then return yes\n                walk = walk.parentNode\n            no\n\nSometimes you want the HTML representation of the entire group.  The\nfollowing method gives it to you, by imitating the code of `contentAsHTML`,\nexcept using `outerRange` rather than `innerRange`.\n\nThe optional parameter, if set to false, will omit the `src` attributes on\nall groupers (the two for this group, as well as each pair for every inner\ngroup as well).  This can be useful because those `src` attributes can be\nrecomputed from the other grouper data, and they are enormous, so omitting\nthem saves significant space.\n\n        groupAsHTML: ( withSrcAttributes = yes ) =>\n            if not fragment = @outerRange()?.cloneContents()\n                return null\n            tmp = @open.ownerDocument.createElement 'div'\n            tmp.appendChild fragment\n            if not withSrcAttributes\n                ( $ tmp ).find( '.grouper' ).removeAttr 'src'\n            tmp.innerHTML\n\n## Group hierarchy\n\nThe previous two functions require being able to query this group's index in\nits parent group, and to use that index to look up next and previous sibling\ngroups.  We provide those functions here.\n\n        indexInParent: =>\n            ( @parent?.children ? @plugin?.topLevel )?.indexOf this\n        previousSibling: =>\n            ( @parent?.children ? @plugin?.topLevel )?[@indexInParent()-1]\n        nextSibling: =>\n            ( @parent?.children ? @plugin?.topLevel )?[@indexInParent()+1]\n\nNote that the `@children` array for a group is constructed by the\n`scanDocument` function of the `Groups` class, defined [below](#scanning).\nThus one can get an array of child groups for any group `G` by writing\n`G.children`.\n\n## Group change event\n\nThe following function should be called whenever the contents of the group\nhave changed.  It notifies the group's type, so that the requisite\nprocessing, if any, of the new contents can take place.  It is called\nautomatically by some handlers in the `Groups` class, below.\n\nBy default, it propagates the change event up the ancestor chain in the\ngroup hierarchy, but that can be disabled by passing false as the parameter.\n\nThe second parameter indicates whether this is the first `contentsChanged`\ncall since the group was constructed.  By default, this is false, but is set\nto true from the one call made to this function from the group's\nconstructor.\n\n        contentsChanged: ( propagate = yes, firstTime = no ) =>\n            @type()?.contentsChanged? this, firstTime\n            if propagate then @parent?.contentsChanged yes\n\n## Group serialization\n\nThe following serialization routine is useful for sending groups to a Web\nWorker for background processing.\n\n        toJSON: =>\n            data = { }\n            for attr in @open.attributes\n                if attr.nodeName[..5] is 'data-' and \\\n                   attr.nodeName[..9] isnt 'data-mce-'\n                    try\n                        data[attr.nodeName] =\n                            JSON.parse( attr.nodeValue )[0]\n            id : @id()\n            typeName : @typeName()\n            deleted : @deleted\n            text : @contentAsText()\n            html : @contentAsHTML()\n            parent : @parent?.id() ? null\n            children : ( child?.id() ? null for child in @children ? [ ] )\n            data : data\n\n## Group connections (\"arrows\")\n\nGroups can be connected in a graph.  The graph is directed, and there can be\nmultiple arrows from one group to another.  Each arrow has an optional\nstring attribute attached to it called its \"tag,\" which defaults to the\nempty string. For multiple arrows between the same two groups, different\ntags are required.\n\nIMPORTANT: Connections among groups are not added to the undo/redo stack (by\ndefault).  Many apps do want them on the undo/redo stack, and you can\nachieve this by following the same directions given under `get` and `set`,\nusing the TinyMCE Undo Manager's [transact](https://www.tinymce.com/docs/api/tinymce/tinymce.undomanager/#transact) method.\n\nConnect group `A` to group `B` by calling `A.connect B`.  The optional\nsecond parameter is the tag string to attach.  It defaults to the empty\nstring.  Calling this more than once with the same `A`, `B`, and tag has the\nsame effect as calling it once.\n\n        connect: ( toGroup, tag = '' ) =>\n            connection = [ @id(), toGroup.id(), \"#{tag}\" ]\n            connstring = \"#{connection}\"\n            oldConnections = @get( 'connections' ) ? [ ]\n            mustAdd = yes\n            for oldConnection in oldConnections\n                if \"#{oldConnection}\" is connstring\n                    mustAdd = no\n                    break\n            if mustAdd\n                @set 'connections', [ oldConnections..., connection ]\n            oldConnections = toGroup.get( 'connections' ) ? [ ]\n            mustAdd = yes\n            for oldConnection in oldConnections\n                if \"#{oldConnection}\" is connstring\n                    mustAdd = no\n                    break\n            if mustAdd\n                toGroup.set 'connections', [ oldConnections..., connection ]\n\nThe following function undoes the previous.  The third parameter can be\neither a string or a regular expression.  It defaults to the empty string.\nCalling `A.disconnect B, C` finds all connections from `A` to `B` satisfying\na condition on `C`.  If `C` is a string, then the connection tag must equal\n`C`; if `C` is a regular expression, then the connection tag must match `C`.\nConnections not satisfying these criterion are not candidates for deletion.\n\n        disconnect: ( fromGroup, tag = '' ) =>\n            matches = ( array ) =>\n                array[0] is @id() and array[1] is fromGroup.id() and \\\n                    ( tag is array[2] or tag.test? array[2] )\n            @set 'connections', ( c for c in @get( 'connections' ) ? [ ] \\\n                when not matches c )\n            fromGroup.set 'connections', ( c for c in \\\n                fromGroup.get( 'connections' ) ? [ ] when not matches c )\n\nFor looking up connections, we have two functions.  One that returns all the\nconnections that lead out from the group in question (`connectionsOut()`)\nand one that returns all connections that lead into the group in question\n(`connectionsIn()`).  Each function returns an array of triples, all those\nthat appear in the group's connections set and have the group as the source\n(for `connectionsOut()`) or the destination (for `connectionsIn()`).\n\n        connectionsOut: =>\n            id = @id()\n            ( c for c in ( @get 'connections' ) ? [ ] when c[0] is id )\n        connectionsIn: =>\n            id = @id()\n            ( c for c in ( @get 'connections' ) ? [ ] when c[1] is id )\n\n## Group screen coordinates\n\nThe following function gives the sizes and positions of the open and close\ngroupers.  Because the elements between them may be taller (or sink lower)\nthan the groupers themselves, we also inspect the client rectangles of all\nelements in the group, and adjust the relevant corners of the open and close\ngroupers outward to make sure the bubble encloses the entire contents of the\ngroup.\n\n        getScreenBoundaries: =>\n\nThe first few lines here redundantly add rects for the open and close\ngroupers because there seems to be a bug in `getClientRects()` for a range\nthat doesn't always include the close grouper.  If for some reason there are\nno rectangles, we cannot return a value.  This would be a very erroneous\nsituation, but is here as paranoia.\n\n            toArray = ( a ) ->\n                if a? then ( a[i] for i in [0...a.length] ) else [ ]\n            rects = toArray @open.getClientRects()\n            .concat toArray @outerRange()?.getClientRects()\n            .concat toArray @close.getClientRects()\n            if rects.length is 0 then return null\n\nInitialize the rectangle data for the open and close groupers.\n\n            open = rects[0]\n            open =\n                top : open.top\n                left : open.left\n                right : open.right\n                bottom : open.bottom\n            close = rects[rects.length-1]\n            close =\n                top : close.top\n                left : close.left\n                right : close.right\n                bottom : close.bottom\n\nCompute whether the open and close groupers are in the same line of text.\nThis is done by examining whether they extend too far left/right/up/down\ncompared to one another.  If they are on the same line, then force their top\nand bottom coordinates to match, to make it clear (to the caller) that this\nrepresents a rectangle, not a \"zone.\"\n\n            onSameLine = yes\n            for rect, index in rects\n                open.top = Math.min open.top, rect.top\n                close.bottom = Math.max close.bottom, rect.bottom\n                if rect.left < open.left then onSameLine = no\n                if rect.top > open.bottom then onSameLine = no\n            if onSameLine\n                close.top = open.top\n                open.bottom = close.bottom\n\nIf either the open or close grouper has zero size, then an image file (for\nan open/close grouper) isn't yet loaded.  Thus we need to return null, to\ntell the caller that the results couldn't be computed.  The caller should\nprobably just set up a brief timer to recall this function again soon, when\nthe browser has completed the image loading.\n\n            if ( open.top is open.bottom or close.top is close.bottom or \\\n                 open.left is open.right or close.left is close.right ) \\\n               and not ( $ @open ).hasClass 'hide' then return null\n\nOtherwise, return the results as an object.\n\n            open : open\n            close : close\n\nThe `Group` class should be accessible globally.\n\n    window.Group = Group\n\n# `Groups` class\n\nWe then define a class that will encapsulate all the functionality about\ngroups in the editor.  An instance of this class will be stored as a member\nin the TinyMCE editor object.  It will keep track of many instances of the\n`Group` class.\n\nThis convention is adopted for all TinyMCE plugins in the Lurch project;\neach will come with a class, and an instance of that class will be stored as\na member of the editor object when the plugin is installed in that editor.\nThe presence of that member indicates that the plugin has been installed,\nand provides access to the full range of functionality that the plugin\ngrants to that editor.\n\nThis particular plugin defines two classes, `Group` and `Groups`.  The differences are spelled out here:\n * Only one instance of the `Groups` class exists for any given editor.\n   That instance manages global functionality about groups for that editor.\n   Some of its methods create instances of the `Group` class.\n * Zero or more instances of the `Group` class exist for any given editor.\n   Each instance corresponds to a single group in the document in that\n   editor.\n\nIf there were only one editor, this could be changing by making all instance\nmethods of the `Groups` class into class methods of the `Group` class.  But\nsince there can be more than one editor, we need separate instances of that\n\"global\" context for each, so we use a `Groups` class to do so.\n\n## Groups constructor\n\n    class Groups\n\n        constructor: ( @editor ) ->\n\nEach editor has a mapping from valid group type names to their attributes.\n\n            @groupTypes = {}\n\nIt also has a list of the top-level groups in the editor, which is a forest\nin which each node is a group, and groups are nested as hierarchies/trees.\n\n            @topLevel = [ ]\n\nThe object maintains a list of unique integer ids for assigning to Groups in\nthe editor.  The list `@freeIds` is a list `[a_1,...,a_n]` such that an id\nis available if and only if it's one of the `a_i` or is greater than `a_n`.\nFor this reason, the list begins as `[ 0 ]`.\n\n            @freeIds = [ 0 ]\n\nInstall in the Overlay plugin for the same editor object a handler that\ndraws the groups surrounding the user's cursor.\n\n            @editor.Overlay.addDrawHandler @drawGroups\n\nWhen a free id is needed, we need a function that will give the next such\nfree id and then mark that id as consumed from the list.\n\n        nextFreeId: =>\n            if @freeIds.length > 1 then @freeIds.shift() else @freeIds[0]++\n\nWhen an id in use becomes free, we need a function that will put it back\ninto the list of free ids.\n\n        addFreeId: ( id ) =>\n            if id < @freeIds[@freeIds.length-1]\n                @freeIds.push id\n                @freeIds.sort ( a, b ) -> a - b\n\nWe can also check to see if an id is free.\n\n        isIdFree: ( id ) => id in @freeIds or id > @freeIds[@freeIds.length]\n\nWhen a free id becomes used in some way other than through a call to\n`nextFreeId`, we will want to be able to record that fact.  The following\nfunction does so.\n\n        setUsedID: ( id ) =>\n            last = @freeIds[@freeIds.length-1]\n            while last < id then @freeIds.push ++last\n            i = @freeIds.indexOf id\n            @freeIds.splice i, 1\n            if i is @freeIds.length then @freeIds.push id + 1\n\n## Registering group types\n\nTo register a new type of group, simply provide its name, as a text string,\ntogether with an object of attributes.\n\nThe name string should only contain alphabetic characters, a through z, case\nsensitive, hyphens, or underscores.  All other characters are removed. Empty\nnames are not allowed, which includes names that become empty when all\nillegal characters have been removed.\n\nRe-registering the same name with a new data object will overwrite the old\ndata object with the new one.  Data objects may have the following key-value\npairs.\n * key: `openImage`, value: a string pointing to the image file to use when\n   the open grouper is visible, defaults to `'images/red-bracket-open.png'`\n * If instead you provide the `openImageHTML` tag, an image will be created\n   for you by rendering the HTML you provide, and you need not provide an\n   `openImage` key-value pair.\n * key: `closeImage`, complement to the previous, defaults to\n   `'images/red-bracket-close.png'`\n * Similarly, `closeImageHTML` functions like `openImageHTML`.\n * any key-value pairs useful for placing the group into a menu or toolbar,\n   such as the keys `text`, `context`, `tooltip`, `shortcut`, `image`,\n   and/or `icon`\n\nClients don't actually need to call this function.  In their call to their\neditor's `init` function, they can include in the large, single object\nparameter a key-value pair with key `groupTypes` and value an array of\nobjects.  Each should have the key `name` and all the other data that this\nroutine needs, and they will be passed along directly.\n\n        addGroupType: ( name, data = {} ) =>\n            name = ( n for n in name when /[a-zA-Z_-]/.test n ).join ''\n            @groupTypes[name] = data\n            if data.hasOwnProperty 'text'\n                plugin = this\n                if data.imageHTML?\n                    data.image = htmlToImage data.imageHTML\n                if data.openImageHTML?\n                    blob = svgBlobForHTML data.openImageHTML,\n                        createStyleString()\n                    data.openImage = objectURLForBlob blob\n                    base64URLForBlob blob, ( result ) ->\n                        data.openImage = result\n                if data.closeImageHTML?\n                    blob = svgBlobForHTML data.closeImageHTML,\n                        createStyleString()\n                    data.closeImage = objectURLForBlob blob\n                    base64URLForBlob blob, ( result ) ->\n                        data.closeImage = result\n                menuData =\n                    text : data.text\n                    context : data.context ? 'Insert'\n                    onclick : => @groupCurrentSelection name\n                    onPostRender : -> # must use -> here to access \"this\":\n                        plugin.groupTypes[name].menuItem = this\n                        plugin.updateButtonsAndMenuItems()\n                if data.shortcut? then menuData.shortcut = data.shortcut\n                if data.icon? then menuData.icon = data.icon\n                @editor.addMenuItem name, menuData\n                buttonData =\n                    tooltip : data.tooltip\n                    onclick : => @groupCurrentSelection name\n                    onPostRender : -> # must use -> here to access \"this\":\n                        plugin.groupTypes[name].button = this\n                        plugin.updateButtonsAndMenuItems()\n                key = if data.image? then 'image' else \\\n                    if data.icon? then 'icon' else 'text'\n                buttonData[key] = data[key]\n                @editor.addButton name, buttonData\n            data.connections ?= ( group ) ->\n                triples = group.connectionsOut()\n                [ triples..., ( t[1] for t in triples )... ]\n\nThe above function calls `updateButtonsAndMenuItems()` whenever a new button\nor menu item is first drawn.  That function is also called whenever the\ncursor in the document moves or the groups are rescanned.  It enables or\ndisables the group-insertion routines based on whether the selection should\nbe allowed to be wrapped in a group.  This is determined based on whether\nthe two ends of the selection are inside the same deepest group.\n\n        updateButtonsAndMenuItems: =>\n            left = @editor?.selection?.getRng()?.cloneRange()\n            if not left then return\n            right = left.cloneRange()\n            left.collapse yes\n            right.collapse no\n            left = @groupAboveCursor left\n            right = @groupAboveCursor right\n            for own name, type of @groupTypes\n                type?.button?.disabled left isnt right\n                type?.menuItem?.disabled left isnt right\n            @connectionsButton?.disabled not left? or ( left isnt right )\n            @updateConnectionsMode()\n\nThe above function calls `updateConnectionsMode()`, which checks to see if\nconnections mode has been entered/exited since the last time the function\nwas run, and if so, updates the UI to reflect the change.\n\n        updateConnectionsMode: =>\n            if @connectionsButton?.disabled()\n                @connectionsButton?.active no\n\n## Inserting new groups\n\nThe following method will wrap the current selection in the current editor\nin groupers (i.e., group endpoints) of the given type.  The type must be on\nthe list of valid types registered with `addGroupType`, above, or this will\ndo nothing.\n\n        groupCurrentSelection: ( type ) =>\n\nIgnore attempts to insert invalid group types.\n\n            if not @groupTypes.hasOwnProperty type then return\n\nDetermine whether existing groupers are hidden or not, so that we insert the\nnew ones to match.\n\n            hide = ( $ @allGroupers()?[0] ).hasClass 'hide'\n\nCreate data to be used for open and close groupers, a cursor placeholder,\nand the current contents of the cursor selection.\n\n            id = @nextFreeId()\n            open = grouperHTML type, 'open', id, hide,\n                @groupTypes[type].openImage\n            close = grouperHTML type, 'close', id, hide,\n                @groupTypes[type].closeImage\n\nWrap the current cursor selection in open/close groupers, with the cursor\nplaceholder after the old selection.\n\n            sel = @editor.selection\n            if sel.getStart() is sel.getEnd()\n\nIf the whole selection is within one element, then we can just replace the\nselection's content with wrapped content, plus a cursor placeholder that we\nimmediately remove after placing the cursor back there.  We also keep track\nof the close grouper element so that we can place the cursor immediately to\nits left after removing the cursor placeholder (or else the cursor may leap\nto the start of the document).\n\n                content = @editor.selection.getContent()\n                @editor.insertContent open + content + '{$caret}' + close\n                cursor = @editor.selection.getRng()\n                close = cursor.endContainer.childNodes[cursor.endOffset] ?\n                    cursor.endContainer.nextSibling\n                if close.tagName is 'P' then close = close.childNodes[0]\n                newGroup = @grouperToGroup close\n                newGroup.parent?.contentsChanged()\n            else\n\nBut if the selection spans multiple elements, then we must handle each edge\nof the selection separately.  We cannot use this solution in general,\nbecause editing an element messes up cursor bookmarks within that element.\n\n                range = sel.getRng()\n                leftNode = range.startContainer\n                leftPos = range.startOffset\n                rightNode = range.endContainer\n                rightPos = range.endOffset\n                range.collapse no\n                sel.setRng range\n                @disableScanning()\n                @editor.insertContent '{$caret}' + close\n                range = sel.getRng()\n                close = range.endContainer.childNodes[range.endOffset] ?\n                    range.endContainer.nextSibling\n                range.setStart leftNode, leftPos\n                range.setEnd leftNode, leftPos\n                sel.setRng range\n                @editor.insertContent open\n                @enableScanning()\n                @editor.selection.select close\n                @editor.selection.collapse yes\n                newGroup = @grouperToGroup close\n                newGroup.parent?.contentsChanged()\n            newGroup\n\n## Hiding and showing \"groupers\"\n\nThe word \"grouper\" refers to the objects that form the boundaries of a\ngroup, and thus define the group's extent.  Each is an image with specific\nclasses that define its partner, type, visibility, etc.  The following\nmethod applies or removes the visibility flag to all groupers at once, thus\ntoggling their visibility in the document.\n\n        allGroupers: => @editor.getDoc().getElementsByClassName 'grouper'\n        hideOrShowGroupers: =>\n            groupers = $ @allGroupers()\n            if ( $ groupers?[0] ).hasClass 'hide'\n                groupers.removeClass 'hide'\n            else\n                groupers.addClass 'hide'\n            groupers.filter( '.decorate' ).each ( index, grouper ) =>\n                @grouperToGroup( grouper ).updateGrouper grouper\n            @editor.Overlay?.redrawContents()\n            @editor.focus()\n\n## Scanning\n\nScanning is the process of reading the entire document and observing where\ngroupers lie.  This has several purposes.\n * It verifyies that groups are well-formed (i.e., no unpaired groupers, no\n   half-nesting).\n * It ensures the list of `@freeIds` is up-to-date.\n * It maintains an in-memory hierarchy of Group objects (to be implemented).\n\nThere are times when we need programmatically to make several edits to the\ndocument, and want them to happen as a single unit, without the\n`scanDocument` function altering the document's structure admist the work.\nDocument scanning can be disabled by adding a scan lock.  Do so with the\nfollowing two convenience functions.\n\n        disableScanning: => @scanLocks = ( @scanLocks ?= 0 ) + 1\n        enableScanning: =>\n            @scanLocks = Math.max ( @scanLocks ? 0 ) - 1, 0\n            if @scanLocks is 0 then @scanDocument()\n\nWe also want to track when scanning is happening, so that `scanDocument`\ncannot get into infinitely deep recursion by triggering a change in the\ndocument, which in turn calls `scanDocument` again.  We track whether a scan\nis running using this flag.  (Note that the scanning routine constructs new\n`Group` objects, which call `contentsChanged` handlers, which let clients\nexecute arbitrary code, so the infinite loop is quite possible, and thus\nmust be prevented.)\n\n        isScanning = no\n\nNow the routine itself.\n\n        scanDocument: =>\n\nIf scanning is disabled, do nothing.  If it's already happening, then\nwhatever change is attempting to get us to scan again should just have the\nnew scan start *after* this one completes, not during.\n\n            if @scanLocks > 0 then return\n            if isScanning then return setTimeout ( => @scanDocument ), 0\n            isScanning = yes\n\nGroup ids should be unique, so if we encounter the same one twice, we have a\nproblem.  Thus we now mark all old groups as \"old,\" so that we can tell when\nthe first time we re-register them is, and avoid re-regestering the same\ngroup (with the same id) a second time.\n\n            for id in @ids()\n                if @[id]? then @[id].old = yes\n\nInitialize local variables:\n\n            groupers = Array::slice.apply @allGroupers()\n            gpStack = [ ]\n            usedIds = [ ]\n            @topLevel = [ ]\n            @idConversionMap = { }\n            before = @freeIds[..]\n            index = ( id ) ->\n                for gp, i in gpStack\n                    if gp.id is id then return i\n                -1\n\nScanning processes each grouper in the document.\n\n            for grouper in groupers\n\nIf it had the grouper class but wasn't really a grouper, delete it.\n\n                if not ( info = grouperInfo grouper )?\n                    ( $ grouper ).remove()\n\nIf it's an open grouper, push it onto the stack of nested ids we're\ntracking.\n\n                else if info.openOrClose is 'open'\n                    gpStack.unshift\n                        id : info.id\n                        grouper : grouper\n                        children : [ ]\n\nOtherwise, it's a close grouper.  If it doesn't have a corresponding open\ngrouper that we've already seen, delete it.\n\n                else\n                    if index( info.id ) is -1\n                        ( $ grouper ).remove()\n                    else\n\nIt has an open grouper.  In case that open grouper wasn't the most recent\nthing we've seen, delete everything that's intervening, because they're\nincorrectly positioned.\n\n                        while gpStack[0].id isnt info.id\n                            ( $ gpStack.shift().grouper ).remove()\n\nThen allow the grouper and its partner to remain in the document, and pop\nthe stack, because we've moved past the interior of that group.\nFurthermore, register the group and its ID in this Groups object.\n\n                        groupData = gpStack.shift()\n                        id = @registerGroup groupData.grouper, grouper\n                        usedIds.push id\n                        newGroup = @[id]\n\nAssign parent and child relationships, and store this just-created group on\neither the list of children for the next parent outwards in the hierarchy,\nor the \"top level\" list if there is no surrounding group.\n\n                        newGroup.children = groupData.children\n                        for child in newGroup.children\n                            child.parent = newGroup\n                        if gpStack.length > 0\n                            gpStack[0].children.push newGroup\n                        else\n                            @topLevel.push newGroup\n                            newGroup.parent = null\n\nAny groupers lingering on the \"open\" stack have no corresponding close\ngroupers, and must therefore be deleted.\n\n            while gpStack.length > 0\n                ( $ gpStack.shift().grouper ).remove()\n\nNow update the `@freeIds` list to be the complement of the `usedIds` array.\n\n            usedIds.sort ( a, b ) -> a - b\n            count = 0\n            @freeIds = [ ]\n            while usedIds.length > 0\n                if count is usedIds[0]\n                    while count is usedIds[0] then usedIds.shift()\n                else\n                    @freeIds.push count\n                count++\n            @freeIds.push count\n\nAnd any ID that is free now but wasn't before must have its group deleted\nfrom this object's internal cache.  After we delete all of them from the\ncache, we also call the group type's `deleted` method on each one, to permit\nfinalization code to run.  We also mark each with a \"deleted\" attribute set\nto true, so that if there are any pending computations about that group,\nthey know not to bother actually modifying the group when they complete,\nbecause it is no longer in the document anyway.\n\n            after = @freeIds[..]\n            while before[before.length-1] < after[after.length-1]\n                before.push before[before.length-1] + 1\n            while after[after.length-1] < before[before.length-1]\n                after.push after[after.length-1] + 1\n            becameFree = ( a for a in after when a not in before )\n            deleted = [ ]\n            for id in becameFree\n                deleted.push @[id]\n                @[id]?.deleted = yes\n                delete @[id]\n            group?.type()?.deleted? group for group in deleted\n\nIf any groups were just introduced to this document by pasting (or by\nprogrammatic insertion), we need to process their connections, because the\ngroups themselves may have had to be given new ids (to preserve uniqueness\nwithin this document) and thus the ids in any of their connections need to\nbe updated to stay internally consistent within the new content.\n\n            updateConnections = ( group, inOutBoth = 'both' ) =>\n                return unless connections = group.get 'connections'\n                id = group.id()\n                for connection in connections\n                    if inOutBoth is 'both' or \\\n                       ( connection[0] is id and inOutBoth is 'out' )\n                        if @idConversionMap.hasOwnProperty connection[1]\n                            connection[1] = @idConversionMap[connection[1]]\n                    if inOutBoth is 'both' or \\\n                       ( connection[1] is id and inOutBoth is 'in' )\n                        if @idConversionMap.hasOwnProperty connection[0]\n                            connection[0] = @idConversionMap[connection[0]]\n                group.set 'connections', connections\n            for own originalId, newId of @idConversionMap\n                updateConnections @[newId]\n                for connection in newGroup.connectionsOut()\n                    updateConnections @[connection[1]], 'in'\n                for connection in newGroup.connectionsIn()\n                    updateConnections @[connection[0]], 'out'\n\nInvalidate the `ids()` cache\n([defined below](#querying-the-group-hierarchy)) so that the next time that\nfunction is run, it recomputes its results from the newly-generated\nhierarchy in `topLevel`.\n\n            delete @idsCache\n\nIf the Overlay plugin is in use, it should now redraw, since the list of\ngroups may have changed.  We put it on a slight delay, because there may\nstill be some pending cursor movements that we want to ensure have finished\nbefore this drawing routine is called.  At the same time, we also update\nthe enabled/disabled state of group-insertion buttons and menu items.\n\n            setTimeout =>\n                @editor.Overlay?.redrawContents()\n                @updateButtonsAndMenuItems()\n            , 0\n            isScanning = no\n\nThe above function needs to create instances of the `Group` class, and\nassociate them with their IDs.  The following function does so, re-using\ncopies from the cache when possible.  When it encounters a duplicate id, it\nrenames it to the first unused number in the document.  Note that we cannot\nuse `@freeIds` here, because it is being updated by `@scanDocument()`, so we\nmust use the more expensive version of actually querying the elements that\nexist in the document itself via `getElementById()`.\n\n        registerGroup: ( open, close ) =>\n            cached = @[id = grouperInfo( open ).id]\n            if cached?.open isnt open or cached?.close isnt close\n                if @[id]? and not @[id].old\n                    newId = 0\n                    doc = @editor.getDoc()\n                    while doc.getElementById \"open#{newId}\" or \\\n                          doc.getElementById \"close#{newId}\" then newId++\n                    open.setAttribute 'id', \"open#{newId}\"\n                    close.setAttribute 'id', \"close#{newId}\"\n                    @idConversionMap[id] = newId\n                    id = newId\n                @[id] = new Group open, close, this\n            else\n                delete @[id].old\n\nAlso, for each group, we inspect whether its groupers have correctly loaded\ntheir images (by checking their `naturalWidth`), because in several cases\n(e.g., content pasted from a different browser tab, or pasted from this same\npage before a page reload, or re-inserted by an undo operation) the object\nURLs for the images can become invalid.  Thus to avoid broken images for our\ngroupers, we must recompute their `src` attributes.\n\n            if open.naturalWidth is undefined or open.naturalWidth is 0\n                @[id].updateGrouper 'open'\n            if close.naturalWidth is undefined or close.naturalWidth is 0\n                @[id].updateGrouper 'close'\n\nReturn the (old and kept, or newly updated) ID.\n\n            id\n\n## Querying the group hierarchy\n\nThe results of the scanning process in [the previous section](#scanning) are\nreadable through the following functions.\n\nThe following method returns a list of all ids that appear in the Groups\nhierarchy, in tree order.\n\n        ids: =>\n            if not @idsCache?\n                @idsCache = [ ]\n                recur = ( g ) =>\n                    @idsCache.push g.id()\n                    recur child for child in g.children\n                recur group for group in @topLevel\n            @idsCache\n\nThe following method finds the group for a given open/close grouper element\nfrom the DOM.  It returns null if the given object is not an open/close\ngrouper, or does not appear in the group hierarchy.\n\n        grouperToGroup: ( grouper ) =>\n            if ( id = grouperInfo( grouper )?.id )? then @[id] else null\n\nThe following method finds the deepest group containing a given DOM Node.\nIt does so by a binary search through the groupers array for the closest\ngrouper before the node.  If it is an open grouper, the node is in that\ngroup.  If it is a close grouper, the node is in its parent group.\n\n        groupAboveNode: ( node ) =>\n            if ( all = @allGroupers() ).length is 0 then return null\n            left = index : 0, grouper : all[0], leftOfNode : yes\n            return @grouperToGroup left.grouper if left.grouper is node\n            return null if not strictNodeOrder left.grouper, node\n            right = index : all.length - 1, grouper : all[all.length - 1]\n            return @grouperToGroup right.grouper if right.grouper is node\n            return null if strictNodeOrder right.grouper, node\n            loop\n                if left.grouper is node\n                    return @grouperToGroup left.grouper\n                if right.grouper is node\n                    return @grouperToGroup right.grouper\n                if left.index + 1 is right.index\n                    return null unless group = @grouperToGroup left.grouper\n                    return if left.grouper is group.open then group \\\n                        else group.parent\n                middle = Math.floor ( left.index + right.index ) / 2\n                if strictNodeOrder all[middle], node\n                    left =\n                        index : middle\n                        grouper : all[middle]\n                        leftOfNode : yes\n                else\n                    right =\n                        index : middle\n                        grouper : all[middle]\n                        leftOfNode : no\n\nThe following method is like the previous, but instead of computing the\ndeepest group above a given node, it computes the deepest group above a\ngiven cursor position.  This must be presented to the method in the form of\nan HTML Range object that has the same start and end nodes and offsets, such\nas one that has been collapsed.\n\n        groupAboveCursor: ( cursor ) =>\n            if cursor.startContainer?.nodeType is 3 # HTML text node\n                return @groupAboveNode cursor.startContainer\n            if cursor.startContainer.childNodes.length > cursor.startOffset\n                elementAfter =\n                    cursor.startContainer.childNodes[cursor.startOffset]\n                itsGroup = @groupAboveNode elementAfter\n                return if itsGroup?.open is elementAfter \\\n                    then itsGroup.parent else itsGroup\n            if cursor.startContainer.childNodes.length > 0\n                elementBefore =\n                    cursor.startContainer.childNodes[cursor.startOffset - 1]\n                itsGroup = @groupAboveNode elementBefore\n                return if itsGroup?.close is elementBefore \\\n                    then itsGroup.parent else itsGroup\n            @groupAboveNode cursor.startContainer\n\nThe following method generalizes the previous to HTML Range objects that do\nnot have the same starting and ending points.  The group returned will be\nthe deepest group containing both ends of the cursor.\n\n        groupAboveSelection: ( range ) =>\n\nCompute the complete ancestor chain of the left end of the range.\n\n            left = range.cloneRange()\n            left.collapse yes\n            left = @groupAboveCursor left\n            leftChain = [ ]\n            while left?\n                leftChain.unshift left\n                left = left.parent\n\nCompute the complete ancestor chain of the right end of the range.\n\n            right = range.cloneRange()\n            right.collapse no\n            right = @groupAboveCursor right\n            rightChain = [ ]\n            while right?\n                rightChain.unshift right\n                right = right.parent\n\nFind the deepest group in both ancestor chains.\n\n            result = null\n            while leftChain.length > 0 and rightChain.length > 0 and \\\n                  leftChain[0] is rightChain[0]\n                result = leftChain.shift()\n                rightChain.shift()\n            result\n\n## Change Events\n\nThe following function can be called whenever a certain range in the\ndocument has changed, and groups touching that range need to be updated.  It\nassumes that `scanDocument()` was recently called, so that the group\nhierarchy is up-to-date.  The parameter must be a DOM Range object.\n\n        rangeChanged: ( range ) =>\n            group.contentsChanged no for group in @groupsTouchingRange range\n\nThat method uses `@groupsTouchingRange()`, which is implemented below.  It\nuses the previous to get a list of all groups that intersect the given DOM\nRange object, in the order in which their close groupers appear (which means\nthat child groups are guaranteed to appear earlier in the list than their\nparent groups).\n\nThe return value will include all groups whose interior or groupers\nintersect the interior of the range.  This includes groups that intersect\nthe range only indirectly, by being parents whose children intersect the\nrange, and so on for grandparent groups, etc.  When the selection is\ncollapsed, the only \"leaf\" group intersecting it is the one containing it.\n\nThis routine requires that `scanDocument` has recently been called, so that\ngroupers appear in perfectly matched pairs, correctly nested.\n\n        groupsTouchingRange: ( range ) =>\n            if ( all = @allGroupers() ).length is 0 then return [ ]\n            firstInRange = 1 + @grouperIndexOfRangeEndpoint range, yes, all\n            lastInRange = @grouperIndexOfRangeEndpoint range, no, all\n\nIf there are no groupers in the selected range at all, then just create the\nparent chain of groups above the closest node to the selection.\n\n            if firstInRange > lastInRange\n                node = range.startContainer\n                if node.nodeType is 1 and \\ # Element, not Text, etc.\n                   range.startOffset < node.childNodes.length\n                    node = node.childNodes[range.startOffset]\n                group = @groupAboveNode node\n                result = if group\n                    if group.open is node\n                        if group.parent then [ group.parent ] else [ ]\n                    else\n                        [ group ]\n                else\n                    [ ]\n                while maybeOneMore = result[result.length-1]?.parent\n                    result.push maybeOneMore\n                return result\n\nOtherwise walk through all the groupers in the selection and push their\ngroups onto a stack in the order that the close groupers are encountered.\n\n            stack = [ ]\n            result = [ ]\n            for index in [firstInRange..lastInRange]\n                group = @grouperToGroup all[index]\n                if all[index] is group.open\n                    stack.push group\n                else\n                    result.push group\n                    stack.pop()\n\nThen push onto the stack any open groupers that aren't yet closed, and any\nancestor groups of the last big group encountered, the only one whose parent\ngroups may not have been seen as open groupers.\n\n            while stack.length > 0 then result.push stack.pop()\n            while maybeOneMore = result[result.length-1].parent\n                result.push maybeOneMore\n            result\n\nThe above method uses `@grouperIndexOfRangeEndpoint`, which is defined here.\nIt locates the endpoint of a DOM Range object in the list of groupers in the\neditor.  It performs a binary search through the ordered list of groupers.\n\nThe `range` parameter must be a DOM Range object.  The `left` paramter\nshould be true if you're asking about the left end of the range, false if\nyou're asking about the right end.\n\nThe return value will be the index into `@allGroupers()` of the last grouper\nbefore the range endpoint.  Clearly, then, the grouper on the other side of\nthe range endpoint is the return value plus 1.  If no groupers are before\nthe range endpoint, this return value will be -1; a special case of this is\nwhen there are no groupers at all.\n\nThe final parameter is optional; it prevents having to compute\n`@allGroupers()`, in case you already have that data available.\n\n        grouperIndexOfRangeEndpoint: ( range, left, all ) =>\n            if ( all ?= @allGroupers() ).length is 0 then return -1\n            endpoint = if left then Range.END_TO_START else Range.END_TO_END\n            isLeftOfEndpoint = ( grouper ) =>\n                grouperRange = @editor.getDoc().createRange()\n                grouperRange.selectNode grouper\n                range.compareBoundaryPoints( endpoint, grouperRange ) > -1\n            left = 0\n            return -1 if not isLeftOfEndpoint all[left]\n            right = all.length - 1\n            return right if isLeftOfEndpoint all[right]\n            loop\n                return left if left + 1 is right\n                middle = Math.floor ( left + right ) / 2\n                if isLeftOfEndpoint all[middle]\n                    left = middle\n                else\n                    right = middle\n\n## Drawing Groups\n\nThe following function draws groups around the user's cursor, if any.  It is\ninstalled in [the constructor](#groups-constructor) and called by [the\nOverlay plugin](overlayplugin.litcoffee).\n\n        drawGroups: ( canvas, context ) =>\n            @bubbleTags = [ ]\n\nWe do not draw the groups if document scanning is disabled, because it means\nthat we are in the middle of a change to the group hierarchy, which means\nthat calls to the functions we'll need to figure out what to draw will give\nunstable/incorrect results.\n\n            if @scanLocks > 0 then return\n            group = @groupAboveSelection @editor.selection.getRng()\n            bodyStyle = getComputedStyle @editor.getBody()\n            leftMar = parseInt bodyStyle['margin-left']\n            rightMar = parseInt bodyStyle['margin-right']\n            pad = 3\n            padStep = 2\n            radius = 4\n            tags = [ ]\n\nWe define a group-drawing function that we will call on all groups from\n`group` on up the group hierarchy.\n\n            drawGroup = ( group, drawOutline, drawInterior, withTag ) =>\n                type = group.type()\n                color = type?.color ? '#444444'\n\nCompute the group's boundaries, and if that's not possible, quit this whole\nroutine right now.\n\n                if not boundaries = group.getScreenBoundaries()\n                    setTimeout ( => @editor.Overlay?.redrawContents() ), 100\n                    return null\n                { open, close } = boundaries\n\nPad by `pad/3` in the x direction, `pad` in the y direction, and with corner\nradius `radius`.\n\n                x1 = open.left - pad/3\n                y1 = open.top - pad\n                x2 = close.right + pad/3\n                y2 = close.bottom + pad\n\nCompute the group's tag contents, if any, and store where and how to draw\nthem.\n\n                if withTag and tagString = type?.tagContents? group\n                    tags.push\n                        content : tagString\n                        corner : { x : x1, y : y1 }\n                        color : color\n                        style : createFontStyleString group.open\n                        group : group\n\nDraw this group, either a rounded rectangle or a \"zone,\" which is a\nrounded rectangle that experienced something like word wrapping.\n\n                context.fillStyle = context.strokeStyle = color\n                if open.top is close.top and open.bottom is close.bottom\n                    context.roundedRect x1, y1, x2, y2, radius\n                else\n                    context.roundedZone x1, y1, x2, y2, open.bottom,\n                        close.top, leftMar, rightMar, radius\n                if drawOutline\n                    context.save()\n                    context.globalAlpha = 1.0\n                    context.lineWidth = 1.5\n                    type?.setOutlineStyle? group, context\n                    context.stroke()\n                    context.restore()\n                if drawInterior\n                    context.save()\n                    context.globalAlpha = 0.3\n                    type?.setFillStyle? group, context\n                    context.fill()\n                    context.restore()\n                yes # success\n\nThat concludes the group-drawing function.  Let's now call it on all the\ngroups in the hierarchy, from `group` on upwards.\n\n            innermost = yes\n            walk = group\n            while walk\n                if not drawGroup walk, yes, innermost, yes then return\n                walk = walk.parent\n                pad += padStep\n                innermost = no\n\nIf the plugin has been extended with a handler that supplies extra visible\ngroups beyond those surrounding the cursor, find those groups and draw them\nnow.\n\n            for extra in @visibleGroups?() ? []\n                drawGroup extra, yes, no, yes\n\nNow draw the tags on all the bubbles just drawn.  We proceed in reverse\norder, so that outer tags are drawn behind inner ones.  We also track the\nrectangles we've covered, and move any later ones upward so as not to\ncollide with ones drawn earlier.\n\nWe begin by measuring the sizes of the rectangles, and checking for\ncollisions.  Those that collide with previously-scanned rectangles are slid\nupwards so that they don't collide anymore.  After all collisions have been\nresolved, the rectangle's bottom boundary is reset to what it originally\nwas, so that the rectangle actually just got taller.\n\n            tagsToDraw = [ ]\n            while tags.length > 0\n                tag = tags.shift()\n                context.font = tag.font\n                if not size = context.measureHTML tag.content, tag.style\n                    setTimeout ( => @editor.Overlay?.redrawContents() ), 10\n                    return\n                x1 = tag.corner.x - padStep\n                y1 = tag.corner.y - size.height - 2*padStep\n                x2 = x1 + 2*padStep + size.width\n                y2 = tag.corner.y\n                for old in tagsToDraw\n                    if rectanglesCollide x1, y1, x2, y2, old.x1, old.y1, \\\n                                         old.x2, old.y2\n                        moveBy = old.y1 - y2\n                        y1 += moveBy\n                        y2 += moveBy\n                y2 = tag.corner.y\n                [ tag.x1, tag.y1, tag.x2, tag.y2 ] = [ x1, y1, x2, y2 ]\n                tagsToDraw.unshift tag\n\nNow we draw the tags that have already been sized for us by the previous\nloop.\n\n            for tag in tagsToDraw\n                context.roundedRect tag.x1, tag.y1, tag.x2, tag.y2, radius\n                context.globalAlpha = 1.0\n                context.save()\n                context.fillStyle = '#ffffff'\n                tag.group?.type?().setFillStyle? tag.group, context\n                context.fill()\n                context.restore()\n                context.save()\n                context.lineWidth = 1.5\n                context.strokeStyle = tag.color\n                tag.group?.type?().setOutlineStyle? tag.group, context\n                context.stroke()\n                context.restore()\n                context.save()\n                context.globalAlpha = 0.7\n                context.fillStyle = tag.color\n                tag.group?.type?().setFillStyle? tag.group, context\n                context.fill()\n                context.restore()\n                context.fillStyle = '#000000'\n                context.globalAlpha = 1.0\n                if not context.drawHTML tag.content, tag.x1 + padStep, \\\n                        tag.y1, tag.style\n                    setTimeout ( => @editor.Overlay?.redrawContents() ), 10\n                    return\n                @bubbleTags.unshift tag\n\nIf there is a group the mouse is hovering over, also draw its interior only,\nto show where the mouse is aiming.\n\n            pad = 3\n            if @groupUnderMouse\n                if not drawGroup @groupUnderMouse, no, yes, no then return\n\nIf this group has connections to any other groups, draw them now.\n\nFirst, define a few functions that draw an arrow from one group to another.\nThe label is the optional string tag on the connection, and the index is an\nindex into the list of connections that are to be drawn.\n\n            topEdge = ( open, close ) =>\n                left :\n                    x : open.left\n                    y : open.top\n                right :\n                    x : if open.top is close.top and \\\n                           open.bottom is close.bottom\n                        close.right\n                    else\n                        canvas.width - rightMar\n                    y : open.top\n            bottomEdge = ( open, close ) =>\n                left :\n                    x : if open.top is close.top and \\\n                           open.bottom is close.bottom\n                        open.left\n                    else\n                        leftMar\n                    y : close.bottom\n                right :\n                    x : close.right\n                    y : close.bottom\n            gap = 20\n            groupEdgesToConnect = ( fromBds, toBds ) =>\n                if fromBds.close.bottom + gap < toBds.open.top\n                    from : bottomEdge fromBds.open, fromBds.close\n                    to : topEdge toBds.open, toBds.close\n                    startDir : 1\n                    endDir : 1\n                else if toBds.close.bottom + gap < fromBds.open.top\n                    from : topEdge fromBds.open, fromBds.close\n                    to : bottomEdge toBds.open, toBds.close\n                    startDir : -1\n                    endDir : -1\n                else\n                    from : topEdge fromBds.open, fromBds.close\n                    to : topEdge toBds.open, toBds.close\n                    startDir : -1\n                    endDir : 1\n            interp = ( left, right, index, length ) =>\n                pct = ( index + 1 ) / ( length + 1 )\n                right = Math.min right, left + 40 * length\n                ( 1 - pct ) * left + pct * right\n            drawArrow = ( index, outOf, from, to, label, setStyle ) =>\n                context.save()\n                context.strokeStyle = from.type()?.color or '#444444'\n                context.globalAlpha = 1.0\n                context.lineWidth = 2\n                setStyle? context\n                fromBox = from.getScreenBoundaries()\n                toBox = to.getScreenBoundaries()\n                if not fromBox or not toBox then return\n                fromBox.open.top -= pad\n                fromBox.close.top -= pad\n                fromBox.open.bottom += pad\n                fromBox.close.bottom += pad\n                toBox.open.top -= pad\n                toBox.close.top -= pad\n                toBox.open.bottom += pad\n                toBox.close.bottom += pad\n                how = groupEdgesToConnect fromBox, toBox\n                startX = interp how.from.left.x, how.from.right.x, index,\n                    outOf\n                startY = how.from.left.y\n                endX = interp how.to.left.x, how.to.right.x, index, outOf\n                endY = how.to.left.y\n                context.bezierArrow startX, startY,\n                    startX, startY + how.startDir * gap,\n                    endX, endY - how.endDir * gap, endX, endY\n                context.stroke()\n                if label isnt ''\n                    centerX = context.applyBezier startX, startX, endX,\n                        endX, 0.5\n                    centerY = context.applyBezier startY,\n                        startY + how.startDir * gap,\n                        endY - how.endDir * gap, endY, 0.5\n                    style = createFontStyleString from.open\n                    if not size = context.measureHTML label, style\n                        setTimeout ( => @editor.Overlay?.redrawContents() ),\n                            10\n                        return\n                    context.roundedRect \\\n                        centerX - size.width / 2 - padStep,\n                        centerY - size.height / 2 - padStep,\n                        centerX + size.width / 2 + padStep,\n                        centerY + size.width / 2, radius\n                    context.globalAlpha = 1.0\n                    context.fillStyle = '#ffffff'\n                    context.fill()\n                    context.lineWidth = 1.5\n                    context.strokeStyle = from.type()?.color ? '#444444'\n                    context.stroke()\n                    context.fillStyle = '#000000'\n                    context.globalAlpha = 1.0\n                    context.drawHTML label,\n                        centerX - size.width / 2 + padStep,\n                        centerY - size.height / 2, style\n                context.restore()\n\nSecond, draw all connections from the innermost group containing the cursor,\nif there are any, plus connections from any groups registered as visible\nthrough the `visibleGroups` handler.  The connections arrays are permitted\nto contain group indices or actual groups; the former will be converted to\nthe latter if needed.\n\n            for g in [ group, ( @visibleGroups?() ? [] )... ]\n                if g\n                    connections = g.type().connections? g\n                    numArrays = ( c for c in connections \\\n                        when c instanceof Array ).length\n                    for connection in connections ? [ ]\n                        if connection not instanceof Array\n                            if typeof( connection ) is 'number'\n                                connection = @[connection]\n                            drawGroup connection, yes, no, no\n                    for connection, index in connections ? [ ]\n                        if connection instanceof Array\n                            from = if typeof( connection[0] ) is 'number' \\\n                                then @[connection[0]] else connection[0]\n                            to = if typeof( connection[1] ) is 'number' \\\n                                then @[connection[1]] else connection[1]\n                            drawArrow index, numArrays, from, to,\n                                connection[2..]...\n\n# Installing the plugin\n\nThe plugin, when initialized on an editor, places an instance of the\n`Groups` class inside the editor, and points the class at that editor.\n\n    tinymce.PluginManager.add 'groups', ( editor, url ) ->\n        editor.Groups = new Groups editor\n        editor.on 'init', ( event ) -> editor.dom.loadCSS 'groupsplugin.css'\n        for type in editor.settings.groupTypes\n            editor.Groups.addGroupType type.name, type\n        editor.addMenuItem 'hideshowgroups',\n            text : 'Hide/show groups'\n            context : 'View'\n            onclick : -> editor.Groups.hideOrShowGroupers()\n\nApplications which want to use arrows among groups often want to give the\nuser a convenient way to connect groups visually.  We provide the following\nfunction that installs a handy UI for doing so.  This function should be\ncalled before `tinymce.init`, which means at page load time, not thereafter.\n\n        if window.useGroupConnectionsUI\n            editor.addButton 'connect',\n                image : htmlToImage '&#x2197;'\n                tooltip : 'Connect groups'\n                onclick : ->\n                    @active not @active()\n                    editor.Groups.updateConnectionsMode()\n                onPostRender : ->\n                    editor.Groups.connectionsButton = this\n                    editor.Groups.updateButtonsAndMenuItems()\n\nThe document needs to be scanned (to rebuild the groups hierarchy) whenever\nit changes.  The editor's change event is not reliable, in that it fires\nonly once at the beginning of any sequence of typing.  Thus we watch not\nonly for change events, but also for KeyUp events.  We filter the latter so\nthat we do not rescan the document if the key in question was only an arrow\nkey or home/end/pgup/pgdn.\n\nIn addition to rescanning the document, we also call the `rangeChanged`\nevent of the Groups plugin, to update any groups that overlap the range in\nwhich the document was modified.\n\nNote that the `SetContent` event is what fires when the user invokes the\nundo or redo action, but the range is the entire document.  Thus this event\nhandler automatically sends change events to *all* groups in the document\nwhenever the user chooses undo or redo.\n\n        editor.on 'change SetContent', ( event ) ->\n            editor.Groups.scanDocument()\n            if event?.level?.bookmark\n                orig = editor.selection.getBookmark()\n                editor.selection.moveToBookmark event.level.bookmark\n                range = editor.selection.getRng()\n                editor.selection.moveToBookmark orig\n                editor.Groups.rangeChanged range\n        editor.on 'KeyUp', ( event ) ->\n            movements = [ 33..40 ] # arrows, pgup/pgdn/home/end\n            modifiers = [ 16, 17, 18, 91 ] # alt, shift, ctrl, meta\n            if event.keyCode in movements or event.keyCode in modifiers\n                return\n            editor.Groups.scanDocument()\n            editor.Groups.rangeChanged editor.selection.getRng()\n\nWhenever the cursor moves, we should update whether the group-insertion\nbuttons and menu items are enabled.\n\n        editor.on 'NodeChange', ( event ) ->\n            editor.Groups.updateButtonsAndMenuItems()\n\nThe following handler installs a context menu that is exactly like that\ncreated by the TinyMCE context menu plugin, except that it appends to it\nany custom menu items needed by any groups inside which the user clicked.\n\n        editor.on 'contextMenu', ( event ) ->\n\nPrevent the browser's context menu.\n\n            event.preventDefault()\n\nFigure out where the user clicked, and whether there are any groups there.\n\n            x = event.clientX\n            y = event.clientY\n            if node = editor.getDoc().nodeFromPoint x, y\n                group = editor.Groups.groupAboveNode node\n\nCompute the list of normal context menu items.\n\n            contextmenu = editor.settings.contextmenu or \\\n                'link image inserttable | cell row column deletetable'\n            items = [ ]\n            for name in contextmenu.split /[ ,]/\n                item = editor.menuItems[name]\n                if name is '|' then item = text : name\n                if item then item.shortcut = '' ; items.push item\n\nAdd any group-specific context menu items.\n\n            if newItems = group?.type()?.contextMenuItems group\n                items.push text : '|'\n                items = items.concat newItems\n\nConstruct the menu and show it on screen.\n\n            menu = new tinymce.ui.Menu(\n                items : items\n                context : 'contextmenu'\n                classes : 'contextmenu'\n            ).renderTo()\n            editor.on 'remove', -> menu.remove() ; menu = null\n            pos = ( $ editor.getContentAreaContainer() ).position()\n            menu.moveTo x + pos.left, y + pos.top\n\nThere are two actions the plugin must take on the mouse down event in the\neditor.\n\nIn connection-making mode, if the user clicks inside a bubble, we must\nattempt to form a connection between the group the cursor is currently in\nand the group in which the user clicked.\n\nOtherwise, if the user clicks in a bubble tag, we must discern which bubble\ntag received the click, and trigger the tag menu for that group, if it\ndefines one.  We use the mousedown event rather than the click event,\nbecause the mousedown event is the only one for which `preventDefault()` can\nfunction. By the time the click event happens (strictly after mousedown), it\nis too late to prevent the default handling of the event.\n\n        editor.on 'mousedown', ( event ) ->\n            x = event.clientX\n            y = event.clientY\n\nFirst, the case for connection-making mode.\n\n            if editor.Groups.connectionsButton?.active()\n                if group = editor.groupUnderMouse x, y\n                    left = editor.selection?.getRng()?.cloneRange()\n                    if not left then return\n                    left.collapse yes\n                    currentGroup = editor.Groups.groupAboveCursor left\n                    currentGroup.type()?.connectionRequest? currentGroup,\n                        group\n                    event.preventDefault()\n                    editor.Groups.connectionsButton?.active false\n                    editor.Groups.updateConnectionsMode()\n                    return no\n                return\n\nNext, the case for clicking a grouper.\n\n            doc = editor.getDoc()\n            el = doc.elementFromPoint x, y\n            if el and info = grouperInfo el\n                group = editor.Groups.grouperToGroup el\n                group.type()?.clicked? group, 'single',\n                    if el is group.open then 'open' else 'close'\n                return no\n\nLast, the case for clicking bubble tags.\n\n            for tag in editor.Groups.bubbleTags\n                if tag.x1 < x < tag.x2 and tag.y1 < y < tag.y2\n                    menuItems = tag.group?.type()?.tagMenuItems tag.group\n                    menuItems ?= [\n                        text : 'no actions available'\n                        disabled : true\n                    ]\n                    menu = new tinymce.ui.Menu(\n                        items : menuItems\n                        context : 'contextmenu'\n                        classes : 'contextmenu'\n                    ).renderTo()\n                    editor.on 'remove', -> menu.remove() ; menu = null\n                    pos = ( $ editor.getContentAreaContainer() ).position()\n                    menu.moveTo x + pos.left, y + pos.top\n                    event.preventDefault()\n                    return no\n\nNow we install a handler for double-clicking group boundaries (\"groupers\").\n\n        editor.on 'dblclick', ( event ) ->\n            doc = editor.getDoc()\n            el = doc.elementFromPoint event.clientX, event.clientY\n            if el and info = grouperInfo el\n                group = editor.Groups.grouperToGroup el\n                group.type()?.clicked? group, 'double',\n                    if el is group.open then 'open' else 'close'\n                return no\n\nThe following functions install an event handler that highlights the\ninnermost group under the mouse pointer at all times.\n\n        editor.on 'mousemove', ( event ) ->\n            editor.Groups.groupUnderMouse =\n                editor.groupUnderMouse event.clientX, event.clientY\n            editor.Overlay?.redrawContents()\n\nThe previous two functions both leverage the following utility.\n\n        editor.groupUnderMouse = ( x, y ) ->\n            doc = editor.getDoc()\n            el = doc.elementFromPoint x, y\n            for i in [0...el.childNodes.length]\n                node = el.childNodes[i]\n                if node.nodeType is 3\n                    range = doc.createRange()\n                    range.selectNode node\n                    rects = range.getClientRects()\n                    rects = ( rects[i] for i in [0...rects.length] )\n                    for rect in rects\n                        if x > rect.left and x < rect.right and \\\n                           y > rect.top and y < rect.bottom\n                            return editor.Groups.groupAboveNode node\n            null\n\n## LaTeX-like shortcuts for groups\n\nNow we install code that watches for certain text sequences that should be\ninterpreted as the insertion of groups.\n\nThis relies on the KeyUp event, which may only fire once for a few quick\nsuccessive keystrokes.  Thus someone typing very quickly may not have these\nshortcuts work correctly for them, but I do not yet have a workaround for\nthis behavior.\n\n        editor.on 'KeyUp', ( event ) ->\n            movements = [ 33..40 ] # arrows, pgup/pgdn/home/end\n            modifiers = [ 16, 17, 18, 91 ] # alt, shift, ctrl, meta\n            if event.keyCode in movements or event.keyCode in modifiers\n                return\n            range = editor.selection.getRng()\n            if range.startContainer is range.endContainer and \\\n               range.startContainer?.nodeType is 3 # HTML Text node\n                allText = range.startContainer.textContent\n                lastCharacter = allText[range.startOffset-1]\n                if lastCharacter isnt ' ' and lastCharacter isnt '\\\\' and \\\n                   lastCharacter isnt String.fromCharCode( 160 )\n                    return\n                allBefore = allText.substr 0, range.startOffset - 1\n                allAfter = allText.substring range.startOffset - 1\n                for typeName, typeData of editor.Groups.groupTypes\n                    if shortcut = typeData.LaTeXshortcut\n                        if allBefore[-shortcut.length..] is shortcut\n                            newCursorPos = range.startOffset -\n                                shortcut.length - 1\n                            if lastCharacter isnt '\\\\'\n                                allAfter = allAfter.substr 1\n                            allBefore = allBefore[...-shortcut.length]\n                            range.startContainer.textContent =\n                                allBefore + allAfter\n                            range.setStart range.startContainer,\n                                newCursorPos\n                            if lastCharacter is '\\\\'\n                                range.setEnd range.startContainer,\n                                    newCursorPos + 1\n                            else\n                                range.setEnd range.startContainer,\n                                    newCursorPos\n                            editor.selection.setRng range\n                            editor.Groups.groupCurrentSelection typeName\n                            break\n\n\n# MediaWiki Integration\n\n[MediaWiki](https://www.mediawiki.org/wiki/MediaWiki) is the software that\npowers [Wikipedia](wikipedia.org).  We plan to integrate webLurch with a\nMediaWiki instance by adding features that let the software load pages from\nthe wiki into webLurch for editing, and easily post changes back to the\nwiki as well.  This plugin implements that two-way communication.\n\nThis first version is a start, and does not yet implement full\nfunctionality.\n\n## Global variable\n\nWe store the editor into which we're installed in this global variable, so\nthat we can access it easily later.  We initialize it to null here.\n\n    editor = null\n\n## Setup\n\nBefore you do anything else with this plugin, you must specify the URLs for\nthe wiki's main page (usually index.php) and API page (usually api.php).\nDo so with the following functions.\n\n    setIndexPage = ( URL ) -> editor.indexURL = URL\n    getIndexPage = -> editor.indexURL\n    setAPIPage = ( URL ) -> editor.APIURL = URL\n    getAPIPage = -> editor.APIURL\n\n## Extracting wiki pages\n\nThe following (necessarily asynchronous) function accesses the wiki, fetches\nthe content for the page with the given name, and sends it to the given\ncallback.  The callback takes two parameters, the content and an error.\nOnly one will be non-null, depending on the success or failure of the\nprocess.\n\nThis internal function therefore does the grunt work.  It can fetch any data\nabout a wiki page using the `rvprop` parameter of [the MediaWiki Revisions\nAPI](https://www.mediawiki.org/wiki/API:Revisions).  Two convenience\nfunctions for common use cases follow.\n\n    getPageData = ( pageName, rvprop, callback ) ->\n        xhr = new XMLHttpRequest()\n        xhr.addEventListener 'load', ->\n            json = @responseText\n            try\n                object = JSON.parse json\n            catch e\n                callback null,\n                    'Invalid response format.\\nShould be JSON:\\n' + json\n                return\n            try\n                content = object.query.pages[0].revisions[0][rvprop]\n            catch e\n                callback null, 'No such page on wiki.\\nRaw reply:\\n' + json\n                return\n            callback content, null\n        xhr.open 'GET',\n            editor.MediaWiki.getAPIPage() + '?action=query&titles=' + \\\n            encodeURIComponent( pageName ) + \\\n            '&prop=revisions' + \\\n            '&rvprop=' + rvprop + '&rvparse' + \\\n            '&format=json&formatversion=2'\n        xhr.setRequestHeader 'Api-User-Agent', 'webLurch application'\n        xhr.send()\n\nInserting the response data from this function into the editor happens in\nthe function after this one.\n\n    getPageContent = ( pageName, callback ) ->\n        getPageData pageName, 'content', callback\n\nThis function is very similar to `getPageContent`, but gets the last\nmodified date of the page instead of its content.\n\n    getPageTimestamp = ( pageName, callback ) ->\n        getPageData pageName, 'timestamp', callback\n\nThe following function wraps `getPageContent` in a simple UI, which either\ninserts the fetched content into the editor on success, or pops up an error\ninformation dialog on failure.  An optional callback will be called with\ntrue or false, indicating success or failure.\n\n    importPage = ( pageName, callback ) ->\n        editor.MediaWiki.getPageContent pageName, ( content, error ) ->\n            if error\n                editor.Dialogs.alert\n                    title : 'Wiki Error'\n                    message : \"<p>Error loading content from wiki:</p>\n                        <p>#{error.split( '\\n' )[0]}</p>\"\n                console.log error\n                callback? false # failure\n            { metadata, document } = editor.Storage.extractMetadata content\n            if not metadata?\n                editor.Dialogs.alert\n                    title : 'Not a Lurch document'\n                    message : '<p><b>The wiki page that you attempted to\n                        import is not a Lurch document.</b></p>\n                        <p>Although it is possible to import any wiki page\n                        into Lurch, it does not work well to edit and\n                        re-post such pages to the wiki.</p>\n                        <p>To edit a non-Lurch wiki page, visit the page on\n                        the wiki and edit it there.</p>'\n                callback? false # failure\n            editor.setContent document\n            callback? document, metadata # success\n\nA variant of the previous function silently attempts to fetch just the\nmetadata from a document stored in the wiki.  It calls the callback with\nnull on any failure, and the metadata as JSON on success.\n\n    getPageMetadata = ( pageName, callback ) ->\n        editor.MediaWiki.getPageContent pageName, ( content, error ) ->\n            callback? if error then null else \\\n                editor.Storage.extractMetadata( content ).metadata\n\nThe following function accesses the wiki, logs in using the given username\nand password, and sends the results to the given callback.  The \"token\"\nparameter is for recursive calls only, and should not be provided by\nclients.  The callback accepts result and error parameters.  The result will\neither be true, in which case login succeeded, or null, in which case the\nerror parameter will contain the error message as a string.\n\n    login = ( username, password, callback, token ) ->\n        xhr = new XMLHttpRequest()\n        xhr.addEventListener 'load', ->\n            json = @responseText\n            try\n                object = JSON.parse json\n            catch e\n                callback null, 'Invalid JSON response: ' + json\n                return\n            if object?.login?.result is 'Success'\n                callback true, null\n            else if object?.login?.result is 'NeedToken'\n                editor.MediaWiki.login username, password, callback,\n                    object.login.token\n            else\n                callback null, 'Login error of type ' + \\\n                    object?.login?.result\n        URL = editor.MediaWiki.getAPIPage() + '?action=login' + \\\n            '&lgname=' + encodeURIComponent( username ) + \\\n            '&lgpassword=' + encodeURIComponent( password ) + \\\n            '&format=json&formatversion=2'\n        if token then URL += '&lgtoken=' + token\n        xhr.open 'POST', URL\n        xhr.setRequestHeader 'Api-User-Agent', 'webLurch application'\n        xhr.send()\n\nThe following function accesses the wiki, attempts to overwrite the page\nwith the given name, using the given content (in wikitext form), and then\ncalls the given callback with the results.  That callback should take two\nparameters, result and error.  If result is `'Success'` then error will be\nnull, and the edit succeeded.  If result is null, then the error will be a\nstring explaining the problem.\n\nNote that if the posting you attempt to do with the following function would\nneed a certain user's access rights to complete it, you should call the\n`login()` function, above, first, to establish that access.  Call this one\nfrom its callback (or any time thereafter).\n\n    exportPage = ( pageName, content, callback ) ->\n        xhr = new XMLHttpRequest()\n        xhr.addEventListener 'load', ->\n            json = @responseText\n            try\n                object = JSON.parse json\n            catch e\n                callback null, 'Invalid JSON response: ' + json\n                return\n            if not object?.query?.tokens?.csrftoken\n                callback null, 'No token provided: ' + json\n                return\n            xhr2 = new XMLHttpRequest()\n            xhr2.addEventListener 'load', ->\n                json = @responseText\n                try\n                    object = JSON.parse json\n                catch e\n                    callback null, 'Invalid JSON response: ' + json\n                    return\n                # callback JSON.stringify object, null, 4\n                if object?.edit?.result isnt 'Success'\n                    callback null, 'Edit failed: ' + json\n                    return\n                callback 'Success', null\n            content = formatContentForWiki content\n            xhr2.open 'POST',\n                editor.MediaWiki.getAPIPage() + '?action=edit' + \\\n                '&title=' + encodeURIComponent( pageName ) + \\\n                '&text=' + encodeURIComponent( content ) + \\\n                '&summary=' + encodeURIComponent( 'posted from Lurch' ) + \\\n                '&contentformat=' + encodeURIComponent( 'text/x-wiki' ) + \\\n                '&contentmodel=' + encodeURIComponent( 'wikitext' ) + \\\n                '&format=json&formatversion=2', true\n            token = 'token=' + \\\n                encodeURIComponent object.query.tokens.csrftoken\n            xhr2.setRequestHeader 'Content-type',\n                'application/x-www-form-urlencoded'\n            xhr2.setRequestHeader 'Api-User-Agent', 'webLurch application'\n            xhr2.send token\n        xhr.open 'GET',\n            editor.MediaWiki.getAPIPage() + '?action=query&meta=tokens' + \\\n            '&format=json&formatversion=2'\n        xhr.setRequestHeader 'Api-User-Agent', 'webLurch application'\n        xhr.send()\n\nThe previous function makes use of the following one.  This depends upon the\n[HTMLTags](https://www.mediawiki.org/wiki/Extension:HTML_Tags) extension to\nMediaWiki, which permits arbitrary HTML, as long as it is encoded using tags\nof a certain form, and the MediaWiki configuration permits the tags.  See\nthe documentation for the extension for details.\n\n    formatContentForWiki = ( editorHTML ) ->\n        result = ''\n        depth = 0\n        openRE = /^<([^ >]+)\\s*([^>]+)?>/i\n        closeRE = /^<\\/([^ >]+)\\s*>/i\n        charRE = /^&([a-z0-9]+|#[0-9]+);/i\n        toReplace = [ 'img', 'span', 'var', 'sup' ]\n        decoder = document.createElement 'div'\n        while editorHTML.length > 0\n            if match = closeRE.exec editorHTML\n                tagName = match[1].toLowerCase()\n                if tagName in toReplace\n                    depth--\n                    result += \"</htmltag#{depth}>\"\n                else\n                    result += match[0]\n                editorHTML = editorHTML[match[0].length..]\n            else if match = openRE.exec editorHTML\n                tagName = match[1].toLowerCase()\n                if tagName in toReplace\n                    result += \"<htmltag#{depth}\n                        tagname='#{tagName}' #{match[2]}>\"\n                    if not /\\/\\s*$/.test match[2] then depth++\n                else\n                    result += match[0]\n                editorHTML = editorHTML[match[0].length..]\n            else if match = charRE.exec editorHTML\n                decoder.innerHTML = match[0]\n                result += decoder.textContent\n                editorHTML = editorHTML[match[0].length..]\n            else\n                result += editorHTML[0]\n                editorHTML = editorHTML[1..]\n        result\n\n# Installing the plugin\n\nThe plugin, when initialized on an editor, installs all the functions above\ninto the editor, in a namespace called `MediaWiki`.\n\n    tinymce.PluginManager.add 'mediawiki', ( ed, url ) ->\n        ( editor = ed ).MediaWiki =\n            setIndexPage : setIndexPage\n            getIndexPage : getIndexPage\n            setAPIPage : setAPIPage\n            getAPIPage : getAPIPage\n            login : login\n            getPageContent : getPageContent\n            getPageTimestamp : getPageTimestamp\n            importPage : importPage\n            exportPage : exportPage\n            getPageMetadata : getPageMetadata\n\n\n# Overlay Plugin for [TinyMCE](http://www.tinymce.com)\n\nThis plugin creates a canvas element that sits directly on top of the\neditor.  It is transparent, and thus invisible, unless items are drawn on\nit; hence it functions as an overlay.  It also passes all mouse and keyboard\nevents through to the elements beneath it, so it does not interefere with\nthe functionality of the rest of the page in that respect.\n\n# `Overlay` class\n\nWe begin by defining a class that will contain all the information needed\nabout the overlay element and how to use it.  An instance of this class will\nbe stored as a member in the TinyMCE editor object.\n\nThis convention is adopted for all TinyMCE plugins in the Lurch project;\neach will come with a class, and an instance of that class will be stored as\na member of the editor object when the plugin is installed in that editor.\nThe presence of that member indicates that the plugin has been installed,\nand provides access to the full range of functionality that the plugin\ngrants to that editor.\n\n    class Overlay\n\nWe construct new instances of the Overlay class as follows, and these are\ninserted as members of the corresponding editor by means of the code [below,\nunder \"Installing the Plugin.\"](#installing-the-plugin)\n\n        constructor: ( @editor ) ->\n\nThe first task of the constructor is to create and style the canvas element,\ninserting it at the appropriate place in the DOM.  The following code does\nso.  Note the use of `rgba(0,0,0,0)` for transparency, the `pointer-events`\nattribute for ignoring mouse clicks, and the fact that the canvas is a child\nof the same container as the editor itself.\n\n            @editor.on 'init', =>\n                @container = @editor.getContentAreaContainer()\n                @canvas = document.createElement 'canvas'\n                ( $ @container ).after @canvas\n                @canvas.style.position = 'absolute'\n                @canvas.style['background-color'] = 'rgba(0,0,0,0)'\n                @canvas.style['pointer-events'] = 'none'\n                @canvas.style['z-index'] = '10'\n\nWe then allow any client to register drawing routines with this plugin, and\nall registered routines will be called (in the order in which they were\nregistered) every time the canvas needs to be redrawn.  The following line\ninitializes the list of drawing handlers to empty.\n\n            @drawHandlers = []\n            @editor.on 'NodeChange', @redrawContents\n            ( $ @editor.getContentAreaContainer() ).resize @redrawContent\n\nThis function installs an event handler that, each time something in the\ndocument changes, repositions the canvas, clears it, and runs all drawing\nhandlers.\n\n        redrawContents: ( event ) =>\n            @positionCanvas()\n            if not context = @canvas?.getContext '2d' then return\n            @clearCanvas context\n            context.translate 0, ( $ @container ).position().top\n            for doDrawing in @drawHandlers\n                try\n                    doDrawing @canvas, context\n                catch e\n                    console.log \"Error in overlay draw function: #{e.stack}\"\n\nThe following function permits the installation of new drawing handlers.\nEach will receive two parameters (as shown in the code immediately above),\nthe first being the canvas on which to draw, and the second being the\ndrawing context.\n\n        addDrawHandler: ( drawFunction ) -> @drawHandlers.push drawFunction\n\nThis function is part of the private API, and is used only by\n`positionCanvas`, below.  It fetches the `<iframe>` used by the editor in\nwhich this plugin was installed.\n\n        getEditorFrame: ->\n            for frame in window.frames\n                if frame.document is @editor.getDoc()\n                    return frame\n            null\n\nThis function repositions the canvas, so that if the window is moved or\nresized, then before redrawing takes place, the canvas reacts accordingly.\nThis is called only by the handler installed in the constructor, above.\n\n        positionCanvas: ->\n            con = $ @container\n            can = $ @canvas\n            if not con.position()? then return\n            can.css 'top', 0\n            can.css 'left', con.position().left\n            can.width con.width()\n            can.height con.position().top + con.height()\n            @canvas.width = can.width()\n            @canvas.height = can.height()\n\nThis function clears the canvas before drawing.  It is called only by the\nhandler installed in the constructor, above.\n\n        clearCanvas: ( context ) ->\n            context.clearRect 0, 0, @canvas.width, @canvas.height\n\n# Installing the plugin\n\nThe plugin, when initialized on an editor, places an instance of the\n`Overlay` class inside the editor, and points the class at that editor.\n\n    tinymce.PluginManager.add 'overlay', ( editor, url ) ->\n        editor.Overlay = new Overlay editor\n\nWhenever the user scrolls, redraw the contents of the overlay, since things\nprobably need to be repositioned.\n\n        editor.on 'init', ( event ) ->\n            ( $ editor.getWin() ).scroll -> editor.Overlay.redrawContents()\n\n\n# Settings Plugin\n\nThere are a few situations in which apps wish to specify settings.  One is\nthe most common type of settings -- those global to the entire app.  Another\nis per-document settings, stored in the document's metadata.  This plugin\ntherefore provides a way to create categories of settings (e.g., a global\napp category, and a per-document category) and provide ways for getting,\nsetting, and editing each type.  It provides TinyMCE dialog boxes to make\nthis easier for the client.\n\nWe store all data about the plugin in the following object, which we will\ninstall into the editor into which this plugin is installed.\n\n    plugin = { }\n\n## Creating a category\n\nAny app that uses this module will want to create at least one category of\nsettings (e.g., the global app category).  To do so requires just one\nfunction call, the following.\n\n    plugin.addCategory = ( name ) ->\n        plugin[name] =\n            get : ( key ) -> window.localStorage.getItem key\n            set : ( key, value ) -> window.localStorage.setItem key, value\n            setup : ( div ) -> null\n            teardown : ( div ) -> null\n            showUI : -> plugin.showUI name\n\nOf course, the client may not want to use these default functions.  The\n`get` and `set` implementations are perfectly fine for global settings, but\nthe `setup` and `teardown` functions (explained below) do nothing at all.\nThe `showUI` function is also explained below.\n\n## How settings are stored\n\nOnce the client has created a category (say,\n`editor.Settings.addCategory 'global'`), he or she can then store values in\nthat category using the category name, as in\n`editor.Settings.global.get 'key'` or\n`editor.Settings.global.set 'key', 'value'`.\n\nThe default implementations for these, given above, use the browser's\n`localStorage` object.  But the client can define new `get` and `set`\nmethods by simply overwriting the existing ones, as in\n`editor.Settings.global.get = ( key ) -> 'put new implementation here'`.\n\n## How settings are edited\n\nThe client may wish to present to the user some kind of UI related to a\ncategory of settings, so that the user can interactively see and edit those\nsettings.  The following (non-customizable) function pops up a dialog box\nand sets it up so that the user can see and edit the settings for a given\ncategory.\n\nThe heart of this function is its reliance on the `setup` and `teardown`\nfunctions defined for the category, so that while this function is not\ndirectly customizable, it is indirectly very customizable.  See the code\nbelow.\n\n    plugin.showUI = ( category ) ->\n\nAll the controls for editing the settings will be in a certain DIV in the\nDOM, inside the dialog box that's about to pop up.  It will be created\nbelow, and stored in the following variable.\n\n        div = null\n\nCreate the buttons for the bottom of the dialog box.  Cancel just closes the\ndialog, but Save saves the settings if the user chooses to do so.  It will\nrun the `teardown` function on the DIV with all the settings editing\ncontrols in it.  The `teardown` function is responsible for inspecting the\nstate of all those controls and storing the corresponding values in the\nsettings, via calls to `set`.\n\n        buttons = [\n            type : 'button'\n            text : 'Cancel'\n            onclick : ( event ) ->\n                tinymce.activeEditor.windowManager.close()\n        ,\n            type : 'button'\n            text : 'Save'\n            subtype : 'primary'\n            onclick : ( event ) ->\n                plugin[category].teardown div\n                tinymce.activeEditor.windowManager.close()\n        ]\n\nCreate a title and show the dialog box with a blank interior.\n\n        categoryTitle = category[0].toUpperCase() + \\\n            category[1..].toLowerCase() + ' Settings'\n        tinymce.activeEditor.windowManager.open\n            title : categoryTitle\n            url : 'about:blank'\n            width : 500\n            height : 400\n            buttons : buttons\n\nFind the DIV in the DOM that represents the dialog box's interior.\n\n        wins = tinymce.activeEditor.windowManager.windows\n        div = wins[wins.length-1].getEl() \\\n            .getElementsByClassName( 'mce-container-body' )[0]\n\nClear out that DIV, then allow the `setup` function to fill it with whatever\ncontrols (in whatever state) are appropriate for representing the current\nsettings in this category.  This will happen instants after the dialog\nbecomes visible, so the user will not perceive the reversal of the usual\norder (of setting up a UI and then showing it).\n\n        div.innerHTML = ''\n        plugin[category].setup div\n\n## Convenience functions for a UI\n\nA common UI for settings dialogs is a two-column view, in which the left\ncolumn contains labels for corresponding controls in the right column.  The\nfunctions in this section provide a convenient way to create such a UI.\nEach function herein creates a single row of two columns, with the label on\nthe left, and the control on the right (with a few exceptions).\n\n    plugin.UI = { }\n\nEach function below takes an optional `id` argument.  If it is omitted, the\ngenerated HTML code will contain no `id` attributes.  If it is present, the\ngenerated HTML code will contain an `id` attribute, and its value will be\nthe value of that parameter.\n\nFor creating informational lines and category headings:\n\n    plugin.UI.info = ( name, id ) -> plugin.UI.tr \\\n        \"<td style='width: 100%; text-align: center; white-space: normal;'\n         >#{name}</td>\", id\n    plugin.UI.heading = ( name, id ) ->\n        plugin.UI.info \"<hr style='border: 1px solid black;'>\n            <span style='font-size: 20px;'>#{name}</span>\n            <hr style='border: 1px solid black;'>\", id\n\nFor creating read-only rows:\n\n    plugin.UI.readOnly = ( label, data, id ) ->\n        plugin.UI.tpair label, data, id\n\nFor creating a text input (`id` not optional in this case):\n\n    plugin.UI.text = ( label, id, initial ) ->\n        plugin.UI.tpair label,\n            \"<input type='text' id='#{id}' value='#{initial}'\n            style='border-width: 2px; border-style: inset;'/>\"\n\nFor creating a password input (`id` not optional in this case):\n\n    plugin.UI.password = ( label, id, initial ) ->\n        plugin.UI.tpair label,\n            \"<input type='password' id='#{id}' value='#{initial}'\n            style='border-width: 2px; border-style: inset;'/>\"\n\nFor creating a check box input (`id` not optional in this case):\n\n    plugin.UI.checkbox = ( text, checked = no, id, optionalDescription ) ->\n\n        checked = if checked then ' checked' else ''\n        result = plugin.UI.generalPair \\\n            \"<input type='checkbox' id='#{id}' #{checked}/>\",\n            \"<b>#{text}</b>\", null, 10\n        if optionalDescription\n            result += plugin.UI.generalPair '',\n                \"<p>#{optionalDescription}</p>\", null, 10\n        result\n\nFor creating a radio box input (`id` not optional in this case):\n\n    plugin.UI.radioButton = ( text, groupName, checked = no, id,\n                              optionalDescription ) ->\n        checked = if checked then ' checked' else ''\n        result = plugin.UI.generalPair \\\n            \"<input type='radio' name='#{groupName}' id='#{id}'\n             #{checked}/>\", \"<b>#{text}</b>\", null, 10\n        if optionalDescription\n            result += plugin.UI.generalPair '',\n                \"<p>#{optionalDescription}</p>\", null, 10\n        result\n\nFor creating a button:\n\n    plugin.UI.button = ( text, id ) ->\n        \"<input type='button' #{if id? then \" id='#{id}'\" else ''}\n          value='#{text}' style='border: 1px solid #999999; background:\n          #dddddd; padding: 2px; margin: 2px;'\n          onmouseover='this.style.background=\\\"#eeeeee\\\";'\n          onmouseout='this.style.background=\\\"#dddddd\\\";'/>\"\n\nAnd some utility functions used by functions above.\n\n    plugin.UI.tr = ( content, id ) ->\n        \"<table border=0 cellpadding=0 cellspacing=10\n                style='width: 100%;' #{if id? then \" id='#{id}'\" else ''}>\n            <tr style='width: 100%; vertical-align: middle;'>\" + \\\n        content + '</tr></table>'\n    plugin.UI.tpair = ( left, right, id ) ->\n        plugin.UI.tr \"<td style='width: 50%; text-align: right;\n                        vertical-align: middle;'><b>#{left}:</b></td>\n                      <td style='width: 50%; text-align: left;\n                        vertical-align: middle;'>#{right}</td>\", id\n    plugin.UI.generalPair = ( left, right, id, percent, align = 'left' ) ->\n        plugin.UI.tr \"<td style='width: #{percent}%; text-align: #{align};\n                        vertical-align: middle;'>#{left}</td>\n                      <td style='width: #{100-percent}%; text-align: left;\n                        vertical-align: middle;'>#{right}</td>\", id\n\n# Installing the plugin\n\nThe plugin, when initialized on an editor, installs all the functions above\ninto the editor, in a namespace called `Settings`.\n\n    tinymce.PluginManager.add 'settings', ( editor, url ) ->\n        editor.Settings = plugin\n\n\n# Storage Plugin for [TinyMCE](http://www.tinymce.com)\n\nThis plugin will leverage\n[the cloud storage module](https://github.com/lurchmath/cloud-storage) to\nadd load and save functionality to a TinyMCE instance.  It assumes that both\nTinyMCE and the cloud storage module have been loaded into the global\nnamespace, so that it can access both.  It provides both in-cloud and\nin-browser storage.\n\n# `Storage` class\n\nWe begin by defining a class that will contain all the information needed\nregarding loading and saving documents to various storage back-ends.  An\ninstance of this class will be stored as a member in the TinyMCE editor\nobject.\n\nThis convention is adopted for all TinyMCE plugins in the Lurch project;\neach will come with a class, and an instance of that class will be stored as\na member of the editor object when the plugin is installed in that editor.\nThe presence of that member indicates that the plugin has been installed,\nand provides access to the full range of functionality that the plugin\ngrants to that editor.\n\n    class Storage\n\n## Class variables\n\nAs a class variable, we store the name of the app.  We allow changing this\nby a global function defined at the end of this file.  Be default, there is\nno app name.  If one is provided, it will be used when filling in the title\nof the page, upon changes to the filename and/or document dirty state.\n\n        appName: null\n\nIt comes with a setter, so that if the app name changes, all instances will\nautomatically change their app names as well.\n\n        @setAppName: ( newname = null ) ->\n            Storage::appName = newname\n            instance.setAppName newname for instance in Storage::instances\n\nWe must therefore track all instances in a class variable.\n\n        instances: [ ]\n\n## Constructor\n\n        constructor: ( @editor ) ->\n\nClients can specify the app's name in a class variable, and all instances\nwill use it by default.  At the end of this file is a global function for\nsetting the app name in the class variable.\n\n            @setAppName Storage::appName\n\nInstall all back-ends supported by this plugin, and default to the simplest.\n\n            @backends =\n                'browser storage' : new LocalStorageFileSystem()\n                'Dropbox' : new DropboxFileSystem '7mfyk58haigi2c4'\n            @setBackend 'browser storage'\n\nThe \"last file object\" is one returned by\n[the cloud storage module](https://github.com/lurchmath/cloud-storage),\nwith information about the last file opened or saved.  It can be used to\nre-save the current file in the same location.  It defaults to null,\nmeaning that we have not yet opened or saved any files.\n\n            @setLastFileObject null\n\nA newly-constructed document defaults to being clean.\n\n            setTimeout ( => @clear() ), 0\n\nThe following handlers exist for wrapping metadata around a document before\nsaving, or unwrapping after loading.  They default to null, but can be\noverridden by a client by direct assignment of functions to these members.\n\nThe `saveMetaData` function should take no inputs, and yield as output a\nsingle object encoding all the metadata as key-value pairs in the object.\nIt will be saved together with the document content.\n\nThe `loadMetaData` function should take as input one argument, an object\nthat was previously created by the a call to `saveMetaData`, and repopulate\nthe UI and memory with the relevant portions of that document metadata.  It\nis called immediately after a document is loaded.  It is also called when a\nnew document is created, with an empty object to initialize the metadata.\n\n            @saveMetaData = @loadMetaData = null\n\nWhenever the contents of the document changes, we mark the document dirty in\nthis object, which therefore adds the \\* marker to the page title.\n\n            @editor.on 'change', ( event ) => @setDocumentDirty yes\n\nNow install into the editor controls that run methods in this object.  The\n`control` method does something seemingly inefficient to duplicate the input\ndata object to pass to `addButton`, but this turns out to be necessary, or\nthe menu items look like buttons.  (I believe TinyMCE manipulates the object\nupon receipt.)\n\n            control = ( name, data ) =>\n                buttonData =\n                    icon : data.icon\n                    shortcut : data.shortcut\n                    onclick : data.onclick\n                    tooltip : data.tooltip\n                key = if data.icon? then 'icon' else 'text'\n                buttonData[key] = data[key]\n                @editor.addButton name, buttonData\n                @editor.addMenuItem name, data\n            control 'newfile',\n                text : 'New'\n                icon : 'newdocument'\n                context : 'file'\n                shortcut : 'meta+alt+N'\n                tooltip : 'New file'\n                onclick : => @tryToClear()\n            control 'savefile',\n                text : 'Save'\n                icon : 'save'\n                context : 'file'\n                shortcut : 'meta+S'\n                tooltip : 'Save file'\n                onclick : => @tryToSave()\n            @editor.addMenuItem 'saveas',\n                text : 'Save as...'\n                context : 'file'\n                shortcut : 'meta+shift+S'\n                onclick : => @tryToSave null, yes\n            control 'openfile',\n                text : 'Open...'\n                icon : 'browse'\n                context : 'file'\n                shortcut : 'meta+O'\n                tooltip : 'Open file...'\n                onclick : => @handleOpen()\n\nLastly, keep track of this instance in the class member for that purpose.\n\n            Storage::instances.push this\n\n## Setters and getters\n\nWe then provide setters for the `@documentDirty`, `@filename`, and\n`@appName` members, because changes to those members trigger the\nrecomputation of the page title.  The page title will be of the form \"app\nname: document title \\*\", where the \\* is only present if the document is\ndirty, and the app name (with colon) are omitted if none has been specified\nin code.\n\n        recomputePageTitle: =>\n            document.title = \"#{if @appName then @appName+': ' else ''}\n                              #{@getFilename() or '(untitled)'}\n                              #{if @documentDirty then '*' else ''}\"\n        setDocumentDirty: ( setting = yes ) =>\n            @documentDirty = setting\n            @recomputePageTitle()\n        setAppName: ( newname = null ) =>\n            @appName = newname\n            @recomputePageTitle()\n\nWe can also set which back-end is used for storage, which comes with a\nrelated getters for listing all back-ends, or getting the current one.\n\n        availableBackends: => Object.keys @backends\n        getBackend: => @backend\n        setBackend: ( which ) =>\n            console.log 'setting back end', which\n            if which in @availableBackends()\n                @backend = which\n                window.setFileSystem @backends[@backend]\n                console.log @backends[@backend]\n\nThe following function is useful for storing file objects provided by\n[the cloud storage module](https://github.com/lurchmath/cloud-storage), and\nfor querying the filename from them.\n\n        setLastFileObject: ( fileObject ) =>\n            @lastFileObject = fileObject\n            @recomputePageTitle()\n        getFilename: => @lastFileObject?.path?.slice()?.pop()\n\n## Embedding metadata and code\n\nHere are two functions for embedding metadata into/extracting metadata from\nthe HTML content of a document.  These are useful before saving and after\nloading, respectively.  They use an invisible span on the front of the\ndocument containing the encoded metadata, which can be any object amenable\nto JSON.\n\n        embedMetadata: ( documentHTML, metadataObject = { } ) ->\n            encoding = encodeURIComponent JSON.stringify metadataObject\n            \"<span id='metadata' style='display: none;'\n             >#{encoding}</span>#{documentHTML}\"\n        extractMetadata: ( html ) ->\n            re = /^<span[^>]+id=.metadata.[^>]*>([^<]*)<\\/span>/\n            if match = re.exec html\n                metadata : JSON.parse decodeURIComponent match[1]\n                document : html[match[0].length..]\n            else\n                metadata : null\n                document : html\n\nHere are two functions for appending a useful script to the end of an HTML\ndocument, and removing it again later.  These functions are inverses of one\nanother, and can be used before/after saving a document, to append the\nscript in question.  The script is useful as follows.\n\nIf the user double-clicks a Lurch file stored on their local disk (e.g.,\nthrough Dropbox syncing), the behavior they expect will happen:  Because\nLurch files are HTML, the user's default browser opens the file, the script\nat the end runs, and its purpose is to reload the same document, but in the\nweb app that saved it, thus in an active editor rather than as merely a\nstatic view of the content.\n\n        addLoadingScript: ( document ) ->\n            currentHref = window.location.href.split( '?' )[0]\n            \"\"\"\n            <div id=\"EmbeddedLurchDocument\">#{document}</div>\n            <script>\n                elt = document.getElementById( 'EmbeddedLurchDocument' );\n                window.location.href = '#{currentHref}'\n                  + '?document=' + encodeURIComponent( elt.innerHTML );\n            </script>\n            \"\"\"\n        removeLoadingScript: ( document ) ->\n            openTag = '<div id=\"EmbeddedLurchDocument\">'\n            closeTag = '</div>'\n            openIndex = document.indexOf openTag\n            closeIndex = document.lastIndexOf closeTag\n            document[openIndex+openTag.length...closeIndex]\n\n## New documents\n\nTo clear the contents of the editor, use this method in its `Storage`\nmember.  It handles notifying this instance that the document is then clean.\nIt does *not* check to see if the document needs to be saved first; it just\noutright clears the editor.  It also clears the filename, so that if you\ncreate a new document and then save, it does not save over your last\ndocument.\n\n        clear: =>\n            @editor.setContent ''\n            @editor.undoManager.clear()\n            @setDocumentDirty no\n            @loadMetaData? { }\n\nUnlike the previous, this function *does* first check to see if the contents\nof the editor need to be saved.  If they do, and they aren't saved (or if\nthe user cancels), then the clear is aborted.  Otherwise, clear is run.\n\n        tryToClear: =>\n            if not @documentDirty\n                @clear()\n                @editor.focus()\n                return\n            @editor.windowManager.open {\n                title : 'Save first?'\n                buttons : [\n                    text : 'Save'\n                    onclick : =>\n                        @tryToSave ( success ) => if success then @clear()\n                        @editor.windowManager.close()\n                ,\n                    text : 'Discard'\n                    onclick : =>\n                        @clear()\n                        @editor.windowManager.close()\n                ,\n                    text : 'Cancel'\n                    onclick : => @editor.windowManager.close()\n                ]\n            }\n\n## Saving documents\n\nThis function tries to save the current document.  When the save has been\ncompleted or canceled, the callback will be called, with one of the\nfollowing parameters:  `false` means the save was canceled, `true` means it\nsucceeded, and any string means there was an error.  If the save succeeded,\nthe internal `@filename` field of this object may have been updated.\n\nTo force a save into a file other than the current `@filename`, pass a true\nvalue as the second parameter, and \"Save As...\" behavior will be invoked.\n\n        tryToSave: ( callback, saveAs = no ) ->\n\n### Compute content to save\n\nGet the contents of the editor and embed in them any metadata the app may\nhave about the document, then wrap them in the loading script mentioned\nabove.\n\n            content = @editor.getContent()\n            content = @embedMetadata content, @saveMetaData?()\n            content = @addLoadingScript content\n\n### If saving in same location as last time\n\nIf we are capable of re-saving over top of the most recently loaded/saved\nfile, *and* that's what the caller asked of us, then let's do so, using the\n`update` method of the object returned from the last call do `openFile` or\n`saveFile`.  That method takes three parameters: the new content, the\nsuccess callback, and the failure callback.\n\n            if not saveAs and @lastFileObject\n                filename = @lastFileObject.path.slice().pop()\n                return @editor.Dialogs.waiting\n                    title : 'Saving file'\n                    message : 'Please wait...'\n                    work : ( done ) =>\n                        @lastFileObject.update content, ( success ) =>\n                            @setDocumentDirty no\n                            done()\n                        , ( error ) =>\n                            done()\n                            @editor.Dialogs.alert\n                                title : 'Error saving file'\n                                message : \"<h1>File not saved!</h1>\n                                           <p>File NOT saved to\n                                           #{@backend}:<br>\n                                           #{filename}</p>\n                                           <p>Reason: #{error}</p>\"\n\n### If not saving in same location as last time\n\nIf we have reached this point, then either we are not capable of re-saving\nover top of the most recently loaded/saved file, or the caller asked us to\nprompt the user for a filename before saving, and so in either case we must\ndo that prompting.\n\nThe `window.saveFile` function is installed by [the cloud storage tools\nmentioned above](https://lurchmath.github.io/cloud-storage/).  Its first\nargument is the success callback from the dialog.\n\n            window.saveFile ( destination ) =>\n\nIt provides an object in which we can call the `update` method to overwrite\nthe file's contents.\n\n                @setLastFileObject destination\n                filename = @lastFileObject.path.slice().pop()\n\nThe first argument to the `update` function is the new content to write.\nThe second and third are the success and failure callbacks from the save\noperation.\n\n                @editor.Dialogs.waiting\n                    title : 'Saving file'\n                    message : 'Please wait...'\n                    work : ( done ) =>\n                        destination.update content, ( success ) =>\n                            done()\n                            @setDocumentDirty no\n                        , ( error ) =>\n                            done()\n                            @editor.Dialogs.alert\n                                title : 'Error saving file'\n                                message : \"<h1>File not saved!</h1>\n                                           <p>File NOT saved to\n                                           #{@backend}:<br>\n                                           #{filename}</p>\n                                           <p>Reason: #{error}</p>\"\n\n## Loading documents\n\nThe following function can be called when a document has been loaded from\nstorage, and it will place the document into the editor.  This includes\nextracting the metadata from the document and loading that, if needed, as\nwell as making several adjustments to the editor itself in recognition of a\nnewly loaded file.\n\n        loadIntoEditor: ( loadedData ) =>\n            loadedData = @removeLoadingScript loadedData\n            { document, metadata } = @extractMetadata loadedData\n            @editor.setContent document\n            @editor.undoManager.clear()\n            @editor.focus()\n            @setDocumentDirty no\n            @loadMetaData? metadata ? { }\n\nThis function lets the user choose a new document to open.  If the user\nsuccessfully chooses one, the callback will be called with its only\nparameter being the contents of the file as loaded from whatever storage\nback-end is currently in use.  A very sensible callback to use is the\n`loadIntoEditor` function defined immediately above, which we use as the\ndefault.\n\n        tryToOpen: ( callback = ( data ) => @loadIntoEditor data ) =>\n\nThe `window.openFile` function is installed by [the cloud storage tools\nmentioned above](https://lurchmath.github.io/cloud-storage/).  Its first\nargument is the success callback from the dialog.\n\n            window.openFile ( chosenFile ) =>\n\nIt provides an object in which we can call the `get` method to load the\nfile's contents.  We store that object so that we can call `update` in it\nlater, if the user clicks \"Save.\"\n\n                @setLastFileObject chosenFile\n\nWe must delay the actions below by a moment, in case the filesystem is an\nimmediate one, which will load files too quickly for the UI to keep up.\n\n                delay = ( func ) -> ( args... ) ->\n                    setTimeout ( -> func args... ), 0\n\nThe first argument to the `get` function is the success callback from the\nload operation.\n\n                @editor.Dialogs.waiting\n                    title : 'Loading file'\n                    message : 'Please wait...'\n                    work : delay ( done ) =>\n                        chosenFile.get ( contents ) =>\n\nThe success handler just hands things off to the `loadIntoEditor` function.\n\n                            @loadIntoEditor contents\n                            done()\n\nThe `get` function might also return an error, which we report here.\n\n                        , ( error ) =>\n                            @setLastFileObject null\n                            done()\n                            @editor.Dialogs.alert\n                                title : 'File load error'\n                                message : \"<h1>Error loading file</h1>\n                                           <p>The file failed to load from\n                                           #{@backend}, with an error of\n                                           type #{error}.</p>\"\n\nThe file dialog might also return an error, which we report here.\n\n                    , ( error ) =>\n                        done()\n                        @editor.Dialogs.alert\n                            title : 'File dialog error',\n                            message : \"<h1>Error in file dialog</h1>\n                                       <p>The file dialog gave the following\n                                       error: #{error}.</p>\"\n\nThe following handler for the \"open\" controls checks with the user to see if\nthey wish to save their current document first, if and only if that document\nis dirty.  The user may save, or cancel, or discard the document.\n\n        handleOpen: =>\n\nFirst, if the document does not need to be saved, just do a regular \"open.\"\n\n            if not @documentDirty then return @tryToOpen()\n\nNow, we know that the document needs to be saved.  So prompt the user with a\ndialog box asking what they wish to do.\n\n            @editor.windowManager.open {\n                title : 'Save first?'\n                buttons : [\n                    text : 'Save'\n                    onclick : =>\n                        @editor.windowManager.close()\n                        @tryToSave ( success ) => @tryToOpen() if success\n                ,\n                    text : 'Discard'\n                    onclick : =>\n                        @editor.windowManager.close()\n                        @tryToOpen()\n                ,\n                    text : 'Cancel'\n                    onclick : => @editor.windowManager.close()\n                ]\n            }\n\n# Direct access\n\nIt is also possible to read a file directly from or write a file directly to\na particular storage back-end.  This is uncommon, because usually the user\nshould be involved.  However, there are times when files need to be opened\nfor inspection in the background, or temporary files saved, and this\ninterface can be useful for that.\n\nThe following function reads a file directly from a given back-end.  The\nfirst parameter is the name of the back-end, the second is an array of the\nfull path to the file, and the final two arguments are callback functions.\nThe first receives the contents of the file, and the second receives an\nerror message; exatly one of the two will be called.\n\nThe function does nothing if the first parameter is not the name of one of\nthe back-ends installed in this object.\n\n        directRead: ( backend, filepath, success, failure ) =>\n            @backends[backend]?.readFile filepath, success, failure\n\nThe following is analogous, but for writing a file instead.  The only change\nis the new third argument, which is the content to be written.\n\n        directWrite: ( backend, filepath, content, success, failure ) =>\n            @backends[backend]?.writeFile filepath, content,\n                success, failure\n\n# Global stuff\n\n## Installing the plugin\n\nThe plugin, when initialized on an editor, places an instance of the\n`Storage` class inside the editor, and points the class at that editor.\n\n    tinymce.PluginManager.add 'storage', ( editor, url ) ->\n        editor.Storage = new Storage editor\n\n## Global functions\n\nFinally, the global function that changes the app name.\n\n    window.setAppName = ( newname = null ) -> Storage::appName = newname\n\n\n# Workaround for Browser Keyboard Shortcut Conflicts\n\nAssigning keyboard shortcuts to menu items in TinyMCE will not override the\nshortcuts in the browser (such as Ctrl/Cmd+S for Save).  This is problematic\nfor a word processing app like Lurch, in which users expect certain natural\nkeyboard shortcuts like Ctrl/Cmd+S to have their usual semantics.\n\nThe following function takes a TinyMCE editor instance as parameter and\nmodifies it so that any menu item or toolbar button added to the editor with\nan associated keyboard shortcut will have a new handler installed that does\noverride the browser shortcuts when possible.\n\nThere are some browser shortcuts that cannot be overridden.  For instance,\non Chrome, the Ctrl/Cmd+N and Ctrl/Cmd+Shift+N shortcuts for new window and\nnew incognito window (respectively) cannot be overridden.  This limitation\ncannot be solved from within scripts, as far as I know.\n\n    keyboardShortcutsWorkaround = ( editor ) ->\n\nThe array of shortcuts we will watch for on each keystroke.\n\n        shortcuts = [ ]\n\nNext, a function to turn TinyMCE keyboard shortcut descriptions like\n\"Meta+S\" or \"Ctrl+Shift+K\" into a more usable form.  The result is an object\nwith modifier keys separated out as booleans, and a single non-modifier key\nstored separately.\n\n        createShortcutData = ( text ) ->\n            [ modifiers..., key ] =\n                text.toLowerCase().replace( /\\s+/g, '' ).split '+'\n            altKey : 'alt' in modifiers\n            ctrlKey : 'ctrl' in modifiers\n            metaKey : 'meta' in modifiers\n            key : key\n\nThe following function takes the name and settings object of a menu item or\ntoolbar button from the editor and, if a keyboard shortcut is specified in\nthe settings object, stores the relevant shortcut data in the aforementioned\narray, for later lookup.  Do nothing for Cut, Copy, or Paste, however,\nbecause it is important to leave the native keyboard shortcut handlers of\nthe platform active for those actions, since some browsers prevent the app\nfrom accessing the clipboard.\n\n        maybeInstall = ( name, settings ) ->\n            if settings?.shortcut? and \\\n               name not in [ 'cut', 'copy', 'paste' ]\n                shortcuts.push\n                    keys : createShortcutData settings.shortcut\n                    action : settings.onclick ? -> editor.execCommand name\n\nWe now override the editor's built-in `addMenuItem` and `addButton`\nfunctions to first install any necessary shortcuts, and then proceed with\ntheir original implementations.\n\n        editor.__addMenuItem = editor.addMenuItem\n        editor.addMenuItem = ( name, settings ) ->\n            maybeInstall name, settings\n            editor.__addMenuItem name, settings\n        editor.__addButton = editor.addButton\n        editor.addButton = ( name, settings ) ->\n            maybeInstall name, settings\n            editor.__addButton name, settings\n\nNow install an event listener on every keydown event in the editor.  If any\nof our stored shortcuts comes up, trigger its stored handler, then prevent\nany other handling of the event.\n\n        editor.on 'keydown', ( event ) ->\n            for shortcut in shortcuts\n                matches = yes\n                for own key, value of shortcut.keys\n                    if event[key] isnt value\n                        matches = no\n                        break\n                if matches\n                    event.preventDefault()\n                    shortcut.action()\n                    return\n\n\n# Test Recording Loader\n\nwebLurch supports a mode in which it can record various keystrokes and\ncommand invocations, and store them in the form of code that can be copied\nand pasted into the source code for the app's unit testing suite.  This is\nvery handy for constructing new test cases without writing a ton of code.\nIt is also less prone to typographical and other small errors, since the\ncode is generated for you automatically.\n\nThat mode is implemented in two script files:\n * This file pops up a separate browser window that presents the\n   test-recording UI.\n * That popup window uses the script\n   [testrecorder-solo.litcoffee](testrecorder-solo.litcoffee), which\n   implements all that window's UI interactivity.\n\nFirst, we have a function that switches the app into test-recording mode, if\nand only if the query string equals \"?test\".  Test-recording mode uses a\npopup window so that the main app window stays pristine and undisturbed, and\ntests are recorded in the normal app environment.\n\n    maybeSetupTestRecorder = ->\n        if location.search is '?test'\n\nLaunch popup window.\n\n            testwin = open './testrecorder.html', 'recording',\n                \"status=no, location=no, toolbar=no, menubar=no,\n                left=#{window.screenX+($ window).width()},\n                top=#{window.screenY}, width=400, height=600\"\n\nIf the browser blocked it, notify the user.\n\n            if not testwin\n                alert 'You have asked to run webLurch in test-recording\n                    mode, which requires a popup window.  Your browser has\n                    blocked the popup window.  Change its settings or allow\n                    this popup to use test-recording mode.'\n\nIf the browser did not block it, then it is loaded.  It loads its own\nscripts for handling UI events for controls in the popup window.\n\nNow we setup timers that (in 0.1 seconds) will install in the editor\nlisteners for various events that we want to record.\n\n            installed = [ ]\n            do installListeners = ->\n                notSupported = ( whatYouDid ) ->\n                    alert \"You #{whatYouDid}, which the test recorder does\n                        not yet support.  The current test has therefore\n                        become corrupted, and you should reload this page\n                        and start your test again.  You will need to limit\n                        yourself to using only supported keys, menu items,\n                        and mouse operations.\"\n                try\n\nIf a keypress occurs for a key that can be typed (letter, number, space),\ntell the test recorder window about it.  For any other type of key, tell the\nuser that we can't yet record it, so the test is corrupted.\n\n                    if 'keypress' not in installed\n                        tinymce.activeEditor.on 'keypress', ( event ) ->\n                            letter = String.fromCharCode event.keyCode\n                            if /[A-Za-z0-9 ]/.test letter\n                                testwin.editorKeyPress event.keyCode,\n                                    event.shiftKey, event.ctrlKey, event.altKey\n                            else\n                                notSupported \"pressed the key with code\n                                    #{event.keyCode}\"\n                        installed.push 'keypress'\n\nIf a keyup occurs for any key, do one of three things.  First, if it's a\nletter, ignore it, because the previous case handles that better.  Second,\nif it's shift/ctrl/alt/meta, ignore it.  Finally, if it's one of the special\nkeys we can handle (arrows, backspace, etc.), notify the test recorder about\nit.  For any other type of key, tell the user that we can't yet record it,\nso the test is corrupted.\n\n                    if 'keyup' not in installed\n                        tinymce.activeEditor.on 'keyup', ( event ) ->\n                            letter = String.fromCharCode event.keyCode\n                            if /[A-Za-z0-9 ]/.test letter then return\n                            ignore = [ 16, 17, 18, 91 ] # shft,ctl,alt,meta\n                            if event.keyCode in ignore then return\n                            conversion =\n                                8 : 'backspace'\n                                13 : 'enter'\n                                35 : 'end'\n                                36 : 'home'\n                                37 : 'left'\n                                38 : 'up'\n                                39 : 'right'\n                                40 : 'down'\n                                46 : 'delete'\n                            if conversion.hasOwnProperty event.keyCode\n                                testwin.editorKeyPress \\\n                                    conversion[event.keyCode],\n                                    event.shiftKey, event.ctrlKey, event.altKey\n                            else\n                                notSupported \"pressed the key with code\n                                    #{event.keyCode}\"\n                        installed.push 'keyup'\n\nTell the test recorder about any mouse clicks in the editor.  If the user\nis holding a ctrl, alt, or shift key while clicking, we cannot currently\nsupport that, so we warn the user if they try to record such an action.\n\n                    if 'click' not in installed\n                        tinymce.activeEditor.on 'click', ( event ) ->\n                            if event.shiftKey\n                                notSupported \"shift-clicked\"\n                            else if event.ctrlKey\n                                notSupported \"ctrl-clicked\"\n                            else if event.altKey\n                                notSupported \"alt-clicked\"\n                            else\n                                testwin.editorMouseClick event.clientX,\n                                    event.clientY\n                        installed.push 'click'\n\nTell the test recorder about any toolbar buttons that are invoked in the\neditor.\n\n                    findAll = ( type ) ->\n                        Array::slice.apply \\\n                            tinymce.activeEditor.theme.panel.find type\n                    if 'buttons' not in installed\n                        for button in findAll 'button'\n                            do ( button ) ->\n                                button.on 'click', ->\n                                    testwin.buttonClicked \\\n                                        button.settings.icon\n                        installed.push 'buttons'\n\nDisable any drop-down menu, for which I am (as yet) unable to attach event\nlisteners.\n\n                    object.disabled yes for object in \\\n                        [ findAll( 'splitbutton' )...,\n                          findAll( 'listbox' )...,\n                          findAll( 'menubutton' )... ]\n\nTell the test recording page that the main page has finished loading, and it\ncan show its contents.\n\n                    testwin.enterReadyState()\n\nIf any of the above handler installations fail, the reason is probably that\nthe editor hasn't been initialized yet.  So just wait 0.1sec and retry.\n\n                catch e\n                    setTimeout installListeners, 100\n\n\n# App Setup Script\n\n## Specify app settings\n\nFirst, applications should specify their app's name using a call like the\nfollowing.  In this generic setup script, we fill in a placeholder value.\nThis will be used when creating the title for this page (e.g., to show up in\nthe tab in Chrome).\n\n    setAppName 'Untitled'\n\nSecond, we initialize a very simple default configuration for the Groups\nplugin.  It can be overridden by having any script assign to the global\nvariable `groupTypes`, overwriting this data.  Such a change must be done\nbefore the page is fully loaded, when the `tinymce.init` call, below, takes\nplace.\n\n    window.groupTypes ?= [\n        name : 'example'\n        text : 'Example group'\n        imageHTML : '['\n        openImageHTML : ']'\n        closeImageHTML : '[]'\n        tooltip : 'Wrap text in a group'\n        color : '#666666'\n    ]\n\nClients who define their own group types may also define their own toolbar\nbuttons and menu items to go with them.  But these lists default to empty.\n\n    window.groupToolbarButtons ?= { }\n    window.groupMenuItems ?= { }\n\nSimilarly, a client can provide a list of plugins to load when initializing\nTinyMCE, and they will be added to the list loaded by default.\n\n    window.pluginsToLoad ?= [ ]\n\nBy default, we always make the editor full screen, and a child of the\ndocument body.  But the client can change that by changing the following\nvalues.  The `editorContainer` can be an `HTMLElement` or a function that\nevaluates to one.  We can't access the document body yet, so we set it to\nnull, which will be replaced by the body below, once it exists.\n\n    window.fullScreenEditor = yes\n    window.editorContainer = null\n\nWe also provide a variable in which apps can specify an icon to appear on\nthe menu bar, at the very left.  It defaults to an empty object, but can be\noverridden, in the same way as `window.groupTypes`, above.  If you override\nit, specify its file as the `src` attribute, and its `width`, `height`, and\n`padding` attributes as CSS strings (e.g., `'2px'`).\n\n    window.menuBarIcon ?= { }\n\nWe also provide a set of styles to be added to the editor by default.\nClients can also override this object if they prefer different styles.\n\n    window.defaultEditorStyles ?=\n        fontSize : '16px'\n        fontFamily : 'Verdana, Arial, Helvetica, sans-serif'\n\n## Add an editor to the app\n\nThis file initializes a [TinyMCE](http://www.tinymce.com/) editor inside the\n[main app page](index.html).  It is designed to be used inside that page,\nwhere [jQuery](http://jquery.com/) has already been loaded, thus defining\nthe `$` symbol used below.  Its use in this context causes the function to\nbe run only after the DOM has been fully loaded.\n\n    $ ->\n\nCreate a `<textarea>` to be used as the editor.\n\n        editor = document.createElement 'textarea'\n        editor.setAttribute 'id', 'editor'\n        window.editorContainer ?= document.body\n        if typeof window.editorContainer is 'function'\n            window.editorContainer = window.editorContainer()\n        window.editorContainer.appendChild editor\n\nIf the query string is telling us to switch the app into test-recording\nmode, then do so.  This uses the main function defined in\n[testrecorder.litcoffee](./testrecorder.litcoffee), which does nothing\nunless the query string contains the code that invokes test-recording mode.\n\n        maybeSetupTestRecorder()\n\nWe need the list of group types names so that we can include them in the\ntoolbar and menu initializations below.  If a group does not wish to be on\nthe toolbar, it will set its `onToolbar` option to false, which we respect\nhere.\n\n        groupTypeNames = ( type.name for type in groupTypes \\\n            when type.onToolbar ? yes )\n\nInstall a TinyMCE instance in that text area, with specific plugins, toolbar\nbuttons, and context menu items as given below.\n\n        tinymce.init\n            selector : '#editor'\n            auto_focus : 'editor'\n            branding : no\n\nThese enable the use of the browser's built-in spell-checking facilities, so\nthat no server-side callback needs to be done for spellchecking.\n\n            browser_spellcheck : yes\n            gecko_spellcheck : yes\n            statusbar : no\n            paste_data_images : true\n\nNot all of the following plugins are working yet, but most are.  A plugin\nthat begins with a hyphen is a local plugin written as part of this project.\n\n            plugins :\n                'advlist table charmap colorpicker image link\n                paste print searchreplace textcolor\n                -storage -overlay -groups -equationeditor -dependencies\n                -dialogs -downloadupload ' \\\n                + ( \"-#{p}\" for p in window.pluginsToLoad ).join( ' ' ) \\\n                + ( if window.fullScreenEditor then ' fullscreen' else '' )\n\nThe groups plugin requires that we add the following, to prevent resizing of\ngroup boundary images.\n\n            object_resizing : ':not(img.grouper)'\n\nWe then install two toolbars, with separators indicated by pipes (`|`).\n\n            toolbar : [\n                'newfile openfile savefile managefiles | print\n                    | undo redo | cut copy paste\n                    | alignleft aligncenter alignright alignjustify\n                    | bullist numlist outdent indent blockquote | table'\n                'fontselect fontsizeselect styleselect\n                    | bold italic underline\n                      textcolor subscript superscript removeformat\n                    | link unlink | charmap image\n                    | spellchecker searchreplace | equationeditor | ' + \\\n                    groupTypeNames.join( ' ' ) + ' connect' + \\\n                    moreToolbarItems()\n            ]\n\nThe following settings support some of the buttons on the toolbar just\ndefined.  See\n[here](https://www.tinymce.com/docs/configure/content-formatting/) for\ndocumentation on how to edit this style data.\n\n            fontsize_formats : '8pt 10pt 12pt 14pt 18pt 24pt 36pt'\n            style_formats_merge : yes\n            style_formats : [\n                title: 'Grading'\n                items: [\n                    title : 'Red highlighter'\n                    inline  : 'span'\n                    styles :\n                        'border-radius' : '5px'\n                        padding : '2px 5px'\n                        margin : '0 2px'\n                        color : '#770000'\n                        'background-color' : '#ffaaaa'\n                ,\n                    title : 'Yellow highlighter'\n                    inline  : 'span'\n                    styles :\n                        'border-radius' : '5px'\n                        padding : '2px 5px'\n                        margin : '0 2px'\n                        color : '#777700'\n                        'background-color' : '#ffffaa'\n                ,\n                    title : 'Green highlighter'\n                    inline  : 'span'\n                    styles :\n                        'border-radius' : '5px'\n                        padding : '2px 5px'\n                        margin : '0 2px'\n                        color : '#007700'\n                        'background-color' : '#aaffaa'\n                ,\n                    title : 'No highlighting'\n                    inline : 'span'\n                    exact : yes\n                ]\n            ]\n\nWe then customize the menus' contents as follows.\n\n            menu :\n                file :\n                    title : 'File'\n                    items : 'newfile openfile\n                           | savefile saveas download upload\n                           | managefiles | print' + moreMenuItems 'file'\n                edit :\n                    title : 'Edit'\n                    items : 'undo redo\n                           | cut copy paste pastetext\n                           | selectall' + moreMenuItems 'edit'\n                insert :\n                    title : 'Insert'\n                    items : 'link media\n                           | template hr\n                           | me' + moreMenuItems 'insert'\n                view :\n                    title : 'View'\n                    items : 'visualaid hideshowgroups' \\\n                          + moreMenuItems 'view'\n                format :\n                    title : 'Format'\n                    items : 'bold italic underline\n                             strikethrough superscript subscript\n                           | formats | removeformat' \\\n                           + moreMenuItems 'format'\n                table :\n                    title : 'Table'\n                    items : 'inserttable tableprops deletetable\n                           | cell row column' + moreMenuItems 'table'\n                help :\n                    title : 'Help'\n                    items : 'about tour website' + moreMenuItems 'help'\n\nThen we customize the context menu.\n\n            contextmenu : 'link image inserttable\n                | cell row column deletetable' + moreMenuItems 'contextmenu'\n\nAnd finally, we include in the editor's initialization the data needed by\nthe Groups plugin, so that it can find it when that plugin is initialized.\n\n            groupTypes : groupTypes\n\nEach editor created will have the following `setup` function called on it.\nIn our case, there will be only one, but this is how TinyMCE installs setup\nfunctions, regardless.\n\n            setup : ( editor ) ->\n\nSee the [keyboard shortcuts workaround\nfile](keyboard-shortcuts-workaround.litcoffee) for an explanation of the\nfollowing line.\n\n                keyboardShortcutsWorkaround editor\n\nAdd a Help menu.\n\n                editor.addMenuItem 'about',\n                    text : 'About...'\n                    context : 'help'\n                    onclick : -> editor.Dialogs.alert\n                        title : 'webLurch'\n                        message : helpAboutText ? ''\n                editor.addMenuItem 'tour',\n                    text : 'Take a tour'\n                    context : 'help'\n                    onclick : ->\n                        findMenu = ( name ) ->\n                            same = ( x, y ) ->\n                                x.trim().toLowerCase() is \\\n                                y.trim().toLowerCase()\n                            menuHeaders = document.getElementsByClassName \\\n                                'mce-menubtn'\n                            for element in menuHeaders\n                                if same element.textContent, name\n                                    return element\n                            null\n                        findToolButton = ( name ) ->\n                            document.getElementsByClassName(\n                                \"mce-i-#{name}\" )[0]\n                        tour = new Tour\n                            storage : no\n                            steps : [\n                                element : findMenu 'edit'\n                                title : 'Edit menu'\n                                content : 'This tour is just an example for\n                                     now.  Obviously you already knew where\n                                     the edit menu was.'\n                            ,\n                                element : findToolButton 'table'\n                                title : 'Table maker'\n                                content : 'Yes, you can make tables, too!\n                                    Okay, that\\'s enough of a fake tour.\n                                    We\\'ll add a real tour to the\n                                    application later.'\n                            ]\n                        tour.init()\n                        tour.start()\n                editor.addMenuItem 'website',\n                    text : 'Documentation'\n                    context : 'help'\n                    onclick : -> window.open \\\n                        'http://nathancarter.github.io/weblurch', '_blank'\n\nAdd actions and toolbar buttons for all other menu items the client may have\ndefined.\n\n                for own name, data of window.groupMenuItems\n                    editor.addMenuItem name, data\n                for own name, data of window.groupToolbarButtons\n                    editor.addButton name, data\n\nInstall our DOM utilities in the TinyMCE's iframe's window instance.\nIncrease the default font size and maximize the editor to fill the page\nby invoking the \"mceFullScreen\" command.\n\n                editor.on 'init', ->\n                    installDOMUtilitiesIn editor.getWin()\n                    for own key, value of window.defaultEditorStyles\n                        editor.getBody().style[key] = value\n                    setTimeout ->\n                        editor.execCommand 'mceFullScreen'\n                    , 0\n\nThe third-party plugin for math equations requires the following stylesheet.\n\n                    editor.dom.loadCSS './eqed/mathquill.css'\n\nAdd an icon to the left of the File menu, if one has been specified.\n\n                    if window.menuBarIcon?.src?\n                        filemenu = ( editor.getContainer()\n                            .getElementsByClassName 'mce-menubtn' )[0]\n                        icon = document.createElement 'img'\n                        icon.setAttribute 'src', window.menuBarIcon.src\n                        icon.style.width = window.menuBarIcon.width\n                        icon.style.height = window.menuBarIcon.height\n                        icon.style.padding = window.menuBarIcon.padding\n                        filemenu.insertBefore icon, filemenu.childNodes[0]\n\nWorkaround for [this bug](http://www.tinymce.com/develop/bugtracker_view.php?id=3162):\n\n                    editor.getBody().addEventListener 'focus', ->\n                        if editor.windowManager.getWindows().length isnt 0\n                            editor.windowManager.close()\n\nOverride the default handling of the tab key so that it does not leave the\neditor, but instead inserts a large space (\"em space\").  In HTML, if we were\nto insert a tab, it would be treated as any other whitespace, and look just\nlike a single, small space.  So we use this instead, the largest space in\nHTML.\n\n                    editor.on 'KeyDown', ( event ) ->\n                        if event.keyCode is 9 # tab key\n                            event.preventDefault()\n                            editor.insertContent '&emsp;'\n\nEnsure users do not accidentally navigate away from their unsaved changes.\n\n                    window.addEventListener 'beforeunload', ( event ) ->\n                        if editor.Storage.documentDirty\n                            event.returnValue = 'You have unsaved changes.'\n                            return event.returnValue\n\nAnd if the app installed a global handler for editor post-setup, run that\nfunction now.\n\n                    window.afterEditorReady? editor\n\nEnsure the storage plugin loads its default filesystem from settings.\n\n                    fs = editor.Settings?.application?.get 'filesystem'\n                    editor.Storage.setBackend fs ? 'browser storage'\n\nThe following utility functions are used to help build lists of menu and\ntoolbar items in the setup data above.\n\n    moreMenuItems = ( menuName ) ->\n        names = if window.groupMenuItems.hasOwnProperty \"#{menuName}_order\"\n            window.groupMenuItems[\"#{menuName}_order\"]\n        else\n            ( k for k in Object.keys window.groupMenuItems \\\n                when window.groupMenuItems[k].context is menuName ).join ' '\n        if names.length and names[...2] isnt '| ' then \"| #{names}\" else ''\n    moreToolbarItems = ->\n        names = ( window.groupToolbarButtons.order ? \\\n            Object.keys window.groupToolbarButtons ).join ' '\n        if window.useGroupConnectionsUI then names = \"connect #{names}\"\n        if names.length and names[...2] isnt '| ' then \"| #{names}\" else ''\n\n## Support demo apps\n\nWe want to allow the demo applications in the webLurch source code\nrepository to place links on their Help menu to their documented source\ncode.  This will help people who want to learn Lurch coding find\nresources to do so more easily.  We thus provide this function they can use\nto do so as a one-line call.\n\nNot only does it set up the link they request, but it also sets up a link to\nthe developer tutorial in general, and it flashes the Help menu briefly to\ndraw the viewer's attention there.\n\n    window.addHelpMenuSourceCodeLink = ( path ) ->\n        window.groupMenuItems ?= { }\n        window.groupMenuItems.sourcecode =\n            text : 'View documented source code'\n            context : 'help'\n            onclick : ->\n                window.location.href = 'http://github.com/' + \\\n                    'nathancarter/weblurch/blob/master/' + path\n        window.groupMenuItems.tutorial =\n            text : 'View developer tutorial'\n            context : 'help'\n            onclick : ->\n                window.location.href = 'http://github.com/' + \\\n                    'nathancarter/weblurch/blob/master/doc/tutorial.md'\n        flash = ( count, delay, elts ) ->\n            if count-- <= 0 then return\n            elts.fadeOut( delay ).fadeIn delay, -> flash count, delay, elts\n        setTimeout ->\n            flash 3, 500, ( $ '.mce-menubtn' ).filter ( index, element ) ->\n                element.textContent.trim() is 'Help'\n        , 1000\n\nThe following tool is useful for debugging the undo/redo stack in a TinyMCE\neditor instance.\n\n    window.showUndoStack = ->\n        manager = tinymce.activeEditor.undoManager\n        console.log 'entry 0: document initial state'\n        for index in [1...manager.data.length]\n            previous = manager.data[index-1].content\n            current = manager.data[index].content\n            if previous is current\n                console.log \"entry #{index}: same as #{index-1}\"\n                continue\n            initial = final = 0\n            while previous[..initial] is current[..initial] then initial++\n            while previous[previous.length-final..] is \\\n                  current[current.length-final..] then final++\n            console.log \"entry #{index}: at #{initial}:\n                \\n\\torig: #{previous[initial..previous.length-final]}\n                \\n\\tnow:  #{current[initial..current.length-final]}\"\n"]}
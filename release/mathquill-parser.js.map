{"version":3,"sources":["mathquill-parser.litcoffee"],"names":["G","Grammar","OM","OMNode","exports","ref","ref1","symbols","slice","module","window","require","mathQuillToMeaning","node","child","i","j","k","len","len1","len2","marker","name","ref2","ref3","ref4","ref5","result","nodeType","textContent","trim","childNodes","length","$","hasClass","test","getAttribute","concat","tagName","toLowerCase","unshift","push","mathQuillParser","addRule","+","symbol","-","−","±","×","·","÷","^","∞","√","∼","=","<",">","≠","≈","≤","≥","≃","¬","∘","%","∫","def∫","ln","log","unary-","overarc","overline","d","setOption","expr","a","b","build","from","left","right","to","varname","arg","args","argstrs","tmp","arguments","call","results","hasOwnProperty","decode","application","apply","expressionBuilderDebug","encode","console","join","integer","parseInt","float","parseFloat","value","variable","binding","equals"],"mappings":"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","file":"mathquill-parser.js","sourcesContent":["\n# MathQuill Parser\n\nThis file depends upon [the parsing\nmodule](https://www.npmjs.com/package/earley-parser), and uses it to define\na parser for the types of expressions that come out of the\n[MathQuill](www.mathquill.com) plugin ([stored here](../app/eqed)).  More\ndetails are given below.\n\nThe following lines ensure that this file works in Node.js, for testing.\n\n    if not exports? then exports = module?.exports ? window\n    if require?\n        { OM, OMNode } = require 'openmath-js'\n        { Grammar } = require 'earley-parser'\n    else\n        Grammar = window.Grammar\n        OM = window.OM\n        OMNode = window.OMNode\n\n## Extracting text from MathQuill DOM nodes\n\nThe third-party plugin for math equations can have its rough meaning\nextracted by the following function, which can be applied to any DOM element\nthat has the style \"mathquill-rendered-math.\"  For instance, the expression\n$x^2+5$ in MathQuill would become `[\"x\",\"sup\",\"2\",\"+\",\"5\"]` as returned by\nthis function, similar to the result of a tokenizer, ready for a parser.\n\nThat's why this function appears in this file, because it prepares MathQuill\nnodes for the parser defined below.\n\n    window.mathQuillToMeaning = exports.mathQuillToMeaning = ( node ) ->\n        if node.nodeType is 3 # text node, regardless of parent window\n            if node.textContent.trim() is '' then return [ ]\n            return node.textContent\n        result = [ ]\n        for child in node.childNodes\n            if ( $ child ).hasClass( 'selectable' ) or \\\n               ( $ child ).hasClass( 'cursor' ) or \\\n               /width:0/.test child.getAttribute? 'style'\n                continue\n            result = result.concat mathQuillToMeaning child\n        if node.tagName in [ 'SUP', 'SUB' ]\n            name = node.tagName.toLowerCase()\n            if ( $ node ).hasClass 'nthroot' then name = 'nthroot'\n            if result.length > 1\n                result.unshift '('\n                result.push ')'\n            result.unshift name\n        for marker in [ 'fraction', 'overline', 'overarc' ]\n            if ( $ node ).hasClass marker\n                if result.length > 1\n                    result.unshift '('\n                    result.push ')'\n                result.unshift marker\n        for marker in [ 'numerator', 'denominator' ]\n            if ( $ node ).hasClass marker\n                if result.length > 1\n                    result.unshift '('\n                    result.push ')'\n        if result.length is 1 then result[0] else result\n\n## Grammar definition\n\nThe `mathQuillToMeaning` function defined in\n[the main app setup file](../app/setup.litcoffee) converts a WYSIWYG math\nexpression into a chain of tokens that can be read by a parser.  For\ninstance, a fraction with numerator x+1 and denominator t squared would\nbecome the expression \"fraction ( ( x + 1 ) ( t sup 2 ) )\".  This module\ndefines a grammar for parsing such expressions (including arithmetic,\nradicals, transcendental functions, limits, summations, integrals,\ndifferentials, absolute values, and relations).\n\n    exports.mathQuillParser = G = new Grammar 'expression'\n\nRules for numbers:\n\n    G.addRule 'digit', /[0-9]/\n    G.addRule 'nonnegint', 'digit'\n    G.addRule 'nonnegint', [ 'digit', 'nonnegint' ]\n    G.addRule 'integer', 'nonnegint'\n    G.addRule 'integer', [ /\\u2212|-/, 'nonnegint' ]\n    G.addRule 'float', [ 'integer', /\\./, 'nonnegint' ]\n    G.addRule 'float', [ 'integer', /\\./ ]\n    G.addRule 'infinity', [ /\\u221e/ ]\n\nRule for variables:\n\n    G.addRule 'variable', /[a-zA-Z\\u0374-\\u03FF]/\n\nThe above togeteher are called \"atomics\":\n\n    G.addRule 'atomic', 'integer'\n    G.addRule 'atomic', 'float'\n    G.addRule 'atomic', 'variable'\n    G.addRule 'atomic', 'infinity'\n\nRules for the operations of arithmetic:\n\n    G.addRule 'factor', 'atomic'\n    G.addRule 'factor', [ 'atomic', /sup/, 'atomic' ]\n    G.addRule 'factor', [ 'factor', /[%]/ ]\n    G.addRule 'factor', [ /\\$/, 'factor' ]\n    G.addRule 'factor', [ 'factor', /sup/, /\\u2218/ ] # degree symbol\n    G.addRule 'prodquo', 'factor'\n    G.addRule 'prodquo', [ 'prodquo', /[\\u00f7\\u00d7\\u00b7]/, 'factor' ]\n    # the above three are divide, times, and cdot\n    G.addRule 'prodquo', [ /\\u2212|-/, 'prodquo' ]\n    G.addRule 'sumdiff', 'prodquo'\n    G.addRule 'sumdiff', [ 'sumdiff', /[+\\u00b1\\u2212-]/, 'prodquo' ]\n    # the escapes above are for the \\pm symbol and the alternate - sign\n\nRules for logarithms:\n\n    G.addRule 'ln', [ /ln/, 'atomic' ]\n    G.addRule 'log', [ /log/, 'atomic' ]\n    G.addRule 'log', [ /log/, /sub/, 'atomic', 'atomic' ]\n    G.addRule 'prodquo', 'ln'\n    G.addRule 'prodquo', 'log'\n\nRules for factorial:\n\n    G.addRule 'factorial', [ 'atomic', /!/ ]\n    G.addRule 'factor', 'factorial'\n\nRules for the operations of set theory (still incomplete):\n\n    G.addRule 'setdiff', 'variable'\n    G.addRule 'setdiff', [ 'setdiff', /[\\u223c]/, 'variable' ]\n\nRules for subscripts, which count as function application (so that \"x sub i\"\nstill contains i as a free variable):\n\n    G.addRule 'subscripted', [ 'atomic', /sub/, 'atomic' ]\n    G.addRule 'noun', 'subscripted'\n\nRules for various structures, like fractions, which are treated indivisibly,\nand thus as if they were atomics:\n\n    G.addRule 'fraction',\n        [ /fraction/, /\\(/, 'atomic', 'atomic', /\\)/ ]\n    G.addRule 'atomic', 'fraction'\n    G.addRule 'root', [ /\\u221a/, 'atomic' ]\n    G.addRule 'root', [ /nthroot/, 'atomic', /√/, 'atomic' ]\n    G.addRule 'atomic', 'root'\n    G.addRule 'decoration', [ /overline/, 'atomic' ]\n    G.addRule 'decoration', [ /overarc/, 'atomic' ]\n    G.addRule 'atomic', 'decoration'\n    G.addRule 'trigfunc', [ /sin|cos|tan|cot|sec|csc/ ]\n    G.addRule 'trigapp', [ 'trigfunc', 'prodquo' ]\n    G.addRule 'trigapp',\n        [ 'trigfunc', /sup/, /\\(/, /-|\\u2212/, /1/, /\\)/, 'prodquo' ]\n    G.addRule 'atomic', 'trigapp'\n\nRules for limits and summations:\n\n    G.addRule 'limit', [ /lim/, /sub/,\n        /\\(/, 'variable', /[\\u2192]/, 'expression', /\\)/, 'prodquo' ]\n        # 2192 is a right arrow\n    G.addRule 'takesleftcoeff', 'limit'\n    G.addRule 'sum', [ /[\\u03a3]/, # summation sign\n        /sub/, /\\(/, 'variable', /[=]/, 'expression', /\\)/,\n        /sup/, 'atomic', 'prodquo' ]\n    G.addRule 'sum', [ /[\\u03a3]/, /sup/, 'atomic', # summation sign\n        /sub/, /\\(/, 'variable', /[=]/, 'expression', /\\)/,\n        'prodquo' ]\n    G.addRule 'takesleftcoeff', 'sum'\n\nRules for differential and integral calculus:\n\n    G.addRule 'differential', [ /d/, 'atomic' ]\n    G.addRule 'difffrac',\n        [ /fraction/, /\\(/, /d/, /\\(/, /d/, 'variable', /\\)/, /\\)/ ]\n    G.addRule 'indefint', [ /[\\u222b]/, 'prodquo' ] # integral sign\n    G.addRule 'defint',\n        [ /[\\u222b]/, /sub/, 'atomic', /sup/, 'atomic', 'prodquo' ] # again\n    G.addRule 'defint',\n        [ /[\\u222b]/, /sup/, 'atomic', /sub/, 'atomic', 'prodquo' ] # again\n    G.addRule 'factor', 'differential'\n    G.addRule 'factor', 'difffrac'\n    G.addRule 'takesleftcoeff', 'indefint'\n    G.addRule 'takesleftcoeff', 'defint'\n\nThe category `takesleftcoeff` contains those things that can be multiplied\non the left, unambiguously, by a coefficient.  For instance, a limit, when\nmultiplied on the left by a coefficient, is clearly the coefficient times\nthe entire limit, as a consequence of the opening marker \"lim\" which removes\nthe possibility for ambiguity.  The same is true of summations and\nintegrals.\n\n    G.addRule 'sumdiff', 'takesleftcoeff'\n    G.addRule 'sumdiff',\n        [ 'factor', /[\\u00f7\\u00d7\\u00b7]/, 'takesleftcoeff' ]\n    G.addRule 'sumdiff',\n        [ 'prodquo', /[+\\u00b1\\u2212-]/, 'takesleftcoeff' ]\n\nSo far we've only defined rules for forming mathematical nouns, so we wrap\nthe highest-level non-terminal defined so far, sumdiff, in the label \"noun.\"\n\n    G.addRule 'noun', 'sumdiff'\n    G.addRule 'noun', 'setdiff'\n\nRules for forming sentences from nouns, by placing relations between them:\n\n    G.addRule 'atomicsentence',\n        [ 'noun', /[=\\u2260\\u2248\\u2243\\u2264\\u2265<>]/, 'noun' ]\n        # =, \\ne, \\approx, \\cong, \\le, \\ge, <, >\n    G.addRule 'atomicsentence', [ /[\\u00ac]/, 'atomicsentence' ]\n    G.addRule 'sentence', 'atomicsentence'\n    G.addRule 'sentence', [ /[\\u2234]/, 'sentence' ] # therefore symbol\n\nRules for groupers:\n\n    G.addRule 'atomic', [ /\\(/, 'noun', /\\)/ ]\n    G.addRule 'atomicsentence', [ /\\(/, 'sentence', /\\)/ ]\n    G.addRule 'interval',\n        [ /[\\(\\[]/, 'noun', /,/, 'noun', /[\\)\\]]/ ]\n    G.addRule 'atomic', 'interval'\n    G.addRule 'absval', [ /\\|/, 'noun', /\\|/ ]\n    G.addRule 'atomic', 'absval'\n\nAnd finally, place \"expression\" at the top of the grammar; one is permitted\nto use this grammar to express mathematical nouns or complete sentences:\n\n    G.addRule 'expression', 'noun'\n    G.addRule 'expression', 'sentence'\n\nA function that recursively assembles OpenMath nodes from the hierarchy of\narrays created by the parser:\n\n    symbols =\n        '+' : OM.symbol 'plus', 'arith1'\n        '-' : OM.symbol 'minus', 'arith1'\n        '\\u2212' : OM.symbol 'minus', 'arith1'\n        '\\u00b1' : OM.symbol 'plusminus', 'multiops'\n        '\\u00d7' : OM.symbol 'times', 'arith1'\n        '\\u00b7' : OM.symbol 'times', 'arith1'\n        '\\u00f7' : OM.symbol 'divide', 'arith1'\n        '^' : OM.symbol 'power', 'arith1'\n        '\\u221e' : OM.symbol 'infinity', 'nums1'\n        '\\u221a' : OM.symbol 'root', 'arith1'\n        '\\u223c' : OM.symbol 'set1', 'setdiff' # alternate form of ~\n        '=' : OM.symbol 'eq', 'relation1'\n        '<' : OM.symbol 'lt', 'relation1'\n        '>' : OM.symbol 'gt', 'relation1'\n        '\\u2260' : OM.symbol 'neq', 'relation1'\n        '\\u2248' : OM.symbol 'approx', 'relation1'\n        '\\u2264' : OM.symbol 'le', 'relation1'\n        '\\u2265' : OM.symbol 'ge', 'relation1'\n        '\\u2243' : OM.symbol 'modulo_relation', 'integer2'\n        '\\u00ac' : OM.symbol 'not', 'logic1'\n        '\\u2218' : OM.symbol 'degrees', 'units'\n        '$' : OM.symbol 'dollars', 'units'\n        '%' : OM.symbol 'percent', 'units'\n        '\\u222b' : OM.symbol 'int', 'calculus1'\n        'def\\u222b' : OM.symbol 'defint', 'calculus1'\n        'ln' : OM.symbol 'ln', 'transc1'\n        'log' : OM.symbol 'log', 'transc1'\n        'unary-' : OM.symbol 'unary_minus', 'arith1'\n        'overarc' : OM.symbol 'overarc', 'decoration'\n        'overline' : OM.symbol 'overline', 'decoration'\n        'd' : OM.symbol 'd', 'diff'\n    G.setOption 'expressionBuilder', ( expr ) ->\n        build = ( args... ) ->\n            args = for a in args\n                if typeof a is 'number' then a = expr[a]\n                if symbols.hasOwnProperty a then a = symbols[a]\n                if typeof a is 'string' then a = OM.decode a\n                a\n            tmp = OM.application args...\n            if G.expressionBuilderDebug\n                argstrs = for arg in args\n                    if arg instanceof OMNode then arg.encode() \\\n                        else \"#{arg}\"\n                console.log 'build', argstrs..., '-->', tmp\n            tmp\n        result = switch expr[0]\n            when 'digit', 'nonnegint' then expr[1..].join ''\n            when 'integer'\n                OM.integer parseInt expr[1..].join ''\n            when 'float' then OM.float parseFloat \\\n                \"#{expr[1].value}#{expr[2..].join ''}\"\n            when 'variable' then OM.variable expr[1]\n            when 'infinity' then symbols[expr[1]]\n            when 'sumdiff', 'prodquo'\n                switch expr.length\n                    when 4 then build 2, 1, 3\n                    when 3 then build 'unary-', 2\n            when 'factor'\n                switch expr.length\n                    when 4\n                        if expr[3] is '\\u2218' # degrees\n                            build '\\u00d7', 1, symbols['\\u2218'] # degrees\n                        else\n                            build '^', 1, 3\n                    when 3\n                        if expr[2] is '%'\n                            build '\\u00d7', 1, symbols['%']\n                        else\n                            build '\\u00d7', 2, symbols['$']\n            when 'fraction' then build '\\u00f7', 3, 4\n            when 'root'\n                switch expr.length\n                    when 3 then build '\\u221a', 2, OM.integer 2\n                    when 5 then build '\\u221a', 4, 2\n            when 'ln' then build 'ln', 2\n            when 'log'\n                switch expr.length\n                    when 3 then build 'log', OM.integer( 10 ), 2\n                    when 5 then build 'log', 3, 4\n            when 'atomic'\n                if expr.length is 4 and expr[1] is '(' and \\\n                   expr[3] is ')' then expr[2]\n            when 'atomicsentence'\n                switch expr.length\n                    when 4 then build 2, 1, 3\n                    when 3 then build 1, 2\n            when 'decoration' then build 1, 2\n            when 'sentence' then if expr[1] is '\\u2234' then expr[2]\n            when 'interval'\n                left = if expr[1] is '(' then 'o' else 'c'\n                right = if expr[5] is ')' then 'o' else 'c'\n                build OM.symbol( \"interval_#{left}#{right}\",\n                    'interval1' ), 2, 4\n            when 'absval' then build OM.symbol( 'abs', 'arith1' ), 2\n            when 'trigapp'\n                switch expr.length\n                    when 3 then build OM.symbol( expr[1],\n                        'transc1' ), 2\n                    when 8 then build OM.symbol( \"arc#{expr[1]}\",\n                        'transc1' ), 7\n            when 'subscripted' then build 1, 3\n            when 'factorial' then build OM.symbol( 'factorial',\n                'integer1' ), 1\n            when 'limit'\n                build OM.symbol( 'limit', 'limit1' ), 6,\n                    OM.symbol( 'both_sides', 'limit1' ),\n                    OM.binding OM.symbol( 'lambda', 'fns1' ),\n                        expr[4], expr[8]\n            when 'sum'\n                [ varname, from, to ] = if expr[2] is 'sup' then \\\n                    [ 6, 8, 3 ] else [ 4, 6, 9 ]\n                build OM.symbol( 'sum', 'arith1' ),\n                    OM.application(\n                        OM.symbol( 'interval', 'interval1' ),\n                        expr[from], expr[to] ),\n                    OM.binding( OM.symbol( 'lambda', 'fns1' ),\n                        expr[varname], expr[10] )\n            when 'differential' then build 'd', 2\n            when 'difffrac' then build '\\u00f7', 'd', build 'd', 6\n            when 'indefint' then build '\\u222b', 2\n            when 'defint'\n                [ a, b ] = if expr[2] is 'sup' then [ 5, 3 ] \\\n                    else [ 3, 5 ]\n                build 'def\\u222b', a, b, 6\n        if not result? then result = expr[1]\n        # if result instanceof OMNode then result = result.tree\n        if G.expressionBuilderDebug\n            console.log ( if expr instanceof OMNode then \\\n                expr.encode() else \"#{expr}\" ), '--->',\n                if result instanceof OMNode then \\\n                    result.encode() else result\n        result\n    G.setOption 'comparator', ( a, b ) -> a?.equals? b\n"]}